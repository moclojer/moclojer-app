{"version":3,"sources":["lambdaisland/uri.cljc"],"mappings":"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","names":["lambdaisland.uri/uri-regex","lambdaisland.uri/authority-regex","lambdaisland.uri/authority-string","user","password","host","port","G__57150","and__5043__auto__","p__57152","map__57153","cljs.core/--destructure-map","cljs.core.get","lambdaisland.uri/uri-str","scheme","path","query","fragment","authority","G__57154","this__5343__auto__","k__5344__auto__","this__5345__auto__","k57156","else__5346__auto__","G__57167","cljs.core/Keyword","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__57193","vec__57197","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__57155","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this57157","other57158","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__57291","this__5351__auto__","k__5352__auto__","pred__57301","cljs.core/keyword-identical?","expr__57302","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","unused__11783__auto__","self__","G__57307","js/Error","args57160","cljs.core/aclone","lambdaisland.uri/URI","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__57159","extmap__5385__auto__","G__57329","cljs.core/record?","lambdaisland.uri/->URI","lambdaisland.uri/map->URI","this","kw","lambdaisland.uri/match-uri","uri","vec__57339","matches","cljs.core/re-matches","_","lambdaisland.uri/match-authority","vec__57344","lambdaisland.uri/parse","vec__57356","vec__57359","lambdaisland.uri/uri","uri-like","lambdaisland.uri/absolute-path?","cljs.core/first","lambdaisland.uri/remove-dot-segments","in","clojure.string.split","out","G__57373","cljs.core/next","cljs.core.conj","cljs.core/vec","cljs.core/butlast","clojure.string.join","lambdaisland.uri/merge-paths","a","b","cljs.core/some","cljs.core/re-find","lambdaisland.uri/join*","base","ref","cljs.core.update","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","lambdaisland.uri/join","seq57386","self__5755__auto__","uris","cljs.core.map","lambdaisland.uri/decode-param-pair","param","vec__57388","k","v","lambdaisland.uri.normalize/percent-decode","clojure.string/replace","G__57403","lambdaisland.uri/query-string->map","p__57407","map__57408","q","lambdaisland.uri.query_string__GT_map","multikeys","keywordize?","clojure.string/blank?","p__57412","vec__57413","m","cljs.core.keyword","G__57418","cljs.core/conj","G__57421","lambdaisland.uri/query-map","lambdaisland.uri.query_map","u","opts","lambdaisland.uri/query-encode","s","p1__57427#","encode-char","lambdaisland.uri.normalize.percent_encode","lambdaisland.uri.normalize.char_seq","cljs.core.apply","cljs.core/str","lambdaisland.uri/encode-param-pair","cljs.core/simple-ident?","cljs.core/name","cljs.core/qualified-ident?","cljs.core/namespace","lambdaisland.uri/map->query-string","cljs.core.mapcat","p__57467","vec__57468","cljs.core/coll?","cljs.core.partial","cljs.core.interpose","lambdaisland.uri/assoc-query*","cljs.core.merge","lambdaisland.uri/assoc-query","p__57477","map__57478","seq57473","G__57474","self__5754__auto__","kvs","lambdaisland.uri/relative?","lambdaisland.uri/absolute?","cljs.core/complement","lambdaisland.uri/uri?","o","lambdaisland.uri/edn-tag","cljs.core/PROTOCOL_SENTINEL","writer","_opts","cljs.core.write_all","cljs.core.prn_str","lambdaisland.uri/edn-readers"],"sourcesContent":["(ns lambdaisland.uri\n  (:refer-clojure :exclude [uri?])\n  (:require [clojure.string :as str]\n            [lambdaisland.uri.normalize :as normalize])\n  #?(:clj (:import clojure.lang.IFn)))\n\n(def uri-regex #?(:clj #\"\\A(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?\\z\"\n                  :cljs #\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?$\"))\n(def authority-regex #?(:clj #\"\\A(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?\\z\"\n                        :cljs #\"^(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?$\"))\n\n(defn- authority-string  [user password host port]\n  (when host\n    (cond-> user\n      (and user password) (str \":\" password)\n      user                (str \"@\")\n      true                (str host)\n      port                (str \":\" port))))\n\n(defn uri-str\n  \"Convert the URI instance back to a string\"\n  [{:keys [scheme user password host port path query fragment]}]\n  (let [authority (authority-string user password host port)]\n    (cond-> \"\"\n      scheme    (str scheme \":\")\n      authority (str \"//\" authority)\n      true      (str path)\n      query     (str \"?\" query)\n      fragment  (str \"#\" fragment))))\n\n(defrecord URI [scheme user password host port path query fragment]\n  #?@(:bb []\n      :default\n      [IFn\n       (#?(:clj invoke :cljs -invoke) [this kw]\n                                      (get this kw))])\n  Object\n  (toString [this]\n    (uri-str this)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; parse\n\n(defn- match-uri [uri]\n  (let [matches (re-matches uri-regex uri)\n        [_ _ scheme _ authority path _ query _ fragment] matches]\n    [scheme authority (when (seq path) path) query fragment]))\n\n(defn- match-authority [authority]\n  (let [matches (re-matches authority-regex authority)\n        [_ _ user _ password host _ port] matches]\n    [user password host port]))\n\n(defn parse\n  \"Parse a URI string into a lambadisland.uri.URI record.\"\n  [uri]\n  (let [[scheme authority path query fragment] (match-uri uri)]\n    (if authority\n      (let [[user password host port] (match-authority authority)]\n        (URI. scheme user password host port path query fragment))\n      (URI. scheme nil nil nil nil path query fragment))))\n\n(defn uri\n  \"Turn the given value into a lambdaisland.uri.URI record, if it isn't one\n  already. Supports String, java.net.URI, and other URI-like objects that return\n  a valid URI string with `str`.\"\n  [uri-like]\n  (if (instance? URI uri-like)\n    uri-like\n    (parse (str uri-like))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; join / resolve\n\n;; This section is based on RFC 3986\n\n(defn- absolute-path? [path]\n  (= (first path) \\/))\n\n(defn- remove-dot-segments\n  \"As per RFC 3986 section 5.2.4\"\n  [path]\n  (when path\n    (loop [in (str/split path #\"(?=/)\")\n           out []]\n      (case (first in)\n        \"/.\" (if (next in)\n               (recur (next in) out)\n               (recur nil (conj out \"/\")))\n        \"/..\" (if (next in)\n                (recur (next in) (vec (butlast out)))\n                (recur nil (conj (vec (butlast out)) \"/\")))\n        nil (str/join out)\n        (recur (next in) (conj out (first in)))))))\n\n(defn- merge-paths [a b]\n  (if (some #{\\/} a)\n    (str (re-find #?(:clj #\"\\A.*/\"\n                     :cljs #\"^.*/\") a) b)\n    (if (absolute-path? b)\n      b\n      (str \"/\" b))))\n\n(defn join*\n  \"Join two URI records as per RFC 3986. Handles relative URIs.\"\n  [base ref]\n  (if (:scheme ref)\n    (update ref :path remove-dot-segments)\n    (-> (if (:host ref)\n          (assoc ref\n                 :scheme (:scheme base)\n                 :query  (:query ref))\n          (if (nil? (:path ref))\n            (assoc base :query (some :query [ref base]))\n            (assoc base :path\n                   (remove-dot-segments\n                    (if (absolute-path? (:path ref))\n                      (:path ref)\n                      (merge-paths (:path base) (:path ref))))\n                   :query (:query ref))))\n        (assoc :fragment (:fragment ref)))))\n\n(defn join\n  \"Joins any number of URIs as per RFC3986. Arguments can be strings, they will\n  be coerced to URI records.\"\n  [& uris]\n  (reduce join* (map uri uris)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Query strings\n\n(defn- decode-param-pair [param]\n  (let [[k v] (str/split param #\"=\")]\n    [(if k (normalize/percent-decode k) \"\")\n     (if v (normalize/percent-decode (str/replace v #\"\\+\" \" \")) \"\")]))\n\n(defn query-string->map\n  \"Parse a query string, consisting of key=value pairs, separated by \\\"&\\\". Takes\n  the following options:\n\n  - `:keywordize?` whether to turn return keys as keywords. Defaults to `true`.\n  - `:multikeys` how to handle the same key occuring multiple times, defaults to\n    `:duplicates`\n\n  The possible values for `:multikeys` are\n\n  - `:never` always return a single value for a key. The rightmost value\n    \\\"wins\\\"\n  - `:always` return a map with vectors as values, with successive\n    values of the same key in order\n  - `:duplicates` return a vector for keys that occur multiple times, or a\n    string otherwise\"\n  ([q]\n   (query-string->map q nil))\n  ([q {:keys [multikeys keywordize?]\n       :or {multikeys :duplicates\n            keywordize? true}}]\n   (when (not (str/blank? q))\n     (->> (str/split q #\"&\")\n          (map decode-param-pair)\n          (reduce\n           (fn [m [k v]]\n             (let [k (if keywordize? (keyword k) k)]\n               (case multikeys\n                 :never\n                 (assoc m k v)\n                 :always\n                 (if (contains? m k)\n                   (update m k conj v)\n                   (assoc m k [v]))\n                 :duplicates\n                 (if (contains? m k)\n                   (if (vector? (m k))\n                     (update m k conj v)\n                     (assoc m k [(m k) v]))\n                   (assoc m k v)))))\n           {})))))\n\n(defn query-map\n  \"Return the query section of a URI as a map. Will coerce its argument\n  with [[uri]]. Takes an options map, see [[query-string->map]] for options.\"\n  ([uri]\n   (query-map uri nil))\n  ([u opts]\n   (query-string->map (:query (uri u)) opts)))\n\n(defn query-encode\n  \"Percent encoding for query strings. Will percent-encode values that are\n  reserved in query strings only. Encodes spaces as +.\"\n  [s]\n  (let [encode-char #(cond\n                       (= \" \" %)\n                       \"+\"\n                       (re-find #\"[^a-zA-Z0-9\\-\\._~@\\/]\" %)\n                       (normalize/percent-encode %)\n                       :else\n                       %)]\n    (->> (normalize/char-seq s)\n         (map encode-char)\n         (apply str))))\n\n(defn- encode-param-pair [k v]\n  (str (query-encode\n        (cond\n          (simple-ident? k)\n          (name k)\n          (qualified-ident? k)\n          (str (namespace k) \"/\" (name k))\n          :else (str k)))\n       \"=\"\n       (query-encode (str v))))\n\n(defn map->query-string\n  \"Convert a map into a query string, consisting of key=value pairs separated by\n  `&`. The result is percent-encoded so it is always safe to use. Keys can be\n  strings or keywords. If values are collections then this results in multiple\n  entries for the same key. `nil` values are ignored. Values are stringified.\"\n  [m]\n  (when (seq m)\n    (->> m\n         (mapcat (fn [[k v]]\n                   (cond\n                     (nil? v)\n                     []\n                     (coll? v)\n                     (map (partial encode-param-pair k) v)\n                     :else\n                     [(encode-param-pair k v)])))\n         (interpose \"&\")\n         (apply str))))\n\n(defn assoc-query*\n  \"Add additional query parameters to a URI. Takes a URI (or coercible to URI) and\n  a map of query params.\"\n  [u m]\n  (let [u (uri u)]\n    (assoc u :query (map->query-string (merge (query-map u) m)))))\n\n(defn assoc-query\n  \"Add additional query parameters to a URI. Takes a URI (or coercible to URI)\n  followed key value pairs.\n\n  (assoc-query \\\"http://example.com?id=1&name=John\\\" :name \\\"Jack\\\" :style \\\"goth\\\")\n  ;;=> #lambdaisland/uri \\\"http://example.com?id=1&name=Jack&style=goth\\\" \"\n  [u & {:as kvs}]\n  (assoc-query* u kvs))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Predicates\n\n(defn relative?\n  \"Is the URI relative? Returns true if the URI does not have a scheme (protocol).\"\n  [uri]\n  (nil? (:scheme uri)))\n\n(def\n  ^{:doc\n    \"Is the URI absolute? Returns true if the URI has a scheme (protocol), and hence also an origin.\"}\n  absolute? (complement relative?))\n\n(defn uri?\n  \"Check if `o` is URI instance.\"\n  [o]\n  (instance? URI o))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; EDN\n\n(def edn-tag 'lambdaisland/uri)\n\n#?(:clj\n   (defmethod print-method URI [^URI this ^java.io.Writer writer]\n     (.write writer \"#\")\n     (.write writer (str edn-tag))\n     (.write writer \" \")\n     (.write writer (prn-str (.toString this))))\n\n   :cljs\n   (extend-type URI\n     IPrintWithWriter\n     (-pr-writer [this writer _opts]\n       (write-all writer \"#\" (str edn-tag) \" \" (prn-str (.toString this))))))\n\n(def\n  ^{:doc\n    \"A map that can be passed to clojure.edn/read, so tagged URI literals are\n     read back correctly.\"}\n  edn-readers {edn-tag parse})\n"]}