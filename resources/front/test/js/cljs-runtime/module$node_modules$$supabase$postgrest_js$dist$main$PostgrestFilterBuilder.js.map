{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestFilterBuilder.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@supabase/postgrest-js/dist/main/PostgrestFilterBuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestFilterBuilder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestTransformBuilder_1 = __importDefault(require(\"./PostgrestTransformBuilder\"));\nclass PostgrestFilterBuilder extends PostgrestTransformBuilder_1.default {\n    /**\n     * Match only rows where `column` is equal to `value`.\n     *\n     * To check if the value of `column` is NULL, you should use `.is()` instead.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    eq(column, value) {\n        this.url.searchParams.append(column, `eq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is not equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    neq(column, value) {\n        this.url.searchParams.append(column, `neq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gt(column, value) {\n        this.url.searchParams.append(column, `gt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gte(column, value) {\n        this.url.searchParams.append(column, `gte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lt(column, value) {\n        this.url.searchParams.append(column, `lt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lte(column, value) {\n        this.url.searchParams.append(column, `lte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    like(column, pattern) {\n        this.url.searchParams.append(column, `like.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    ilike(column, pattern) {\n        this.url.searchParams.append(column, `ilike.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` IS `value`.\n     *\n     * For non-boolean columns, this is only relevant for checking if the value of\n     * `column` is NULL by setting `value` to `null`.\n     *\n     * For boolean columns, you can also set `value` to `true` or `false` and it\n     * will behave the same way as `.eq()`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    is(column, value) {\n        this.url.searchParams.append(column, `is.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is included in the `values` array.\n     *\n     * @param column - The column to filter on\n     * @param values - The values array to filter with\n     */\n    in(column, values) {\n        const cleanedValues = values\n            .map((s) => {\n            // handle postgrest reserved characters\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\n                return `\"${s}\"`;\n            else\n                return `${s}`;\n        })\n            .join(',');\n        this.url.searchParams.append(column, `in.(${cleanedValues})`);\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * `column` contains every element appearing in `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    contains(column, value) {\n        if (typeof value === 'string') {\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n            // keep it simple and accept a string\n            this.url.searchParams.append(column, `cs.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * every element appearing in `column` is contained by `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    containedBy(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `cd.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is greater than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGt(column, range) {\n        this.url.searchParams.append(column, `sr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or greater than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGte(column, range) {\n        this.url.searchParams.append(column, `nxl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is less than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLt(column, range) {\n        this.url.searchParams.append(column, `sl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or less than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLte(column, range) {\n        this.url.searchParams.append(column, `nxr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where `column` is\n     * mutually exclusive to `range` and there can be no element between the two\n     * ranges.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeAdjacent(column, range) {\n        this.url.searchParams.append(column, `adj.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for array and range columns. Match only rows where\n     * `column` and `value` have an element in common.\n     *\n     * @param column - The array or range column to filter on\n     * @param value - The array or range value to filter with\n     */\n    overlaps(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `ov.${value}`);\n        }\n        else {\n            // array\n            this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for text and tsvector columns. Match only rows where\n     * `column` matches the query string in `query`.\n     *\n     * @param column - The text or tsvector column to filter on\n     * @param query - The query text to match with\n     * @param options - Named parameters\n     * @param options.config - The text search configuration to use\n     * @param options.type - Change how the `query` text is interpreted\n     */\n    textSearch(column, query, { config, type } = {}) {\n        let typePart = '';\n        if (type === 'plain') {\n            typePart = 'pl';\n        }\n        else if (type === 'phrase') {\n            typePart = 'ph';\n        }\n        else if (type === 'websearch') {\n            typePart = 'w';\n        }\n        const configPart = config === undefined ? '' : `(${config})`;\n        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Match only rows where each column in `query` keys is equal to its\n     * associated value. Shorthand for multiple `.eq()`s.\n     *\n     * @param query - The object to filter with, with column names as keys mapped\n     * to their filter values\n     */\n    match(query) {\n        Object.entries(query).forEach(([column, value]) => {\n            this.url.searchParams.append(column, `eq.${value}`);\n        });\n        return this;\n    }\n    /**\n     * Match only rows which doesn't satisfy the filter.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to be negated to filter with, following\n     * PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    not(column, operator, value) {\n        this.url.searchParams.append(column, `not.${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy at least one of the filters.\n     *\n     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure it's properly sanitized.\n     *\n     * It's currently not possible to do an `.or()` filter across multiple tables.\n     *\n     * @param filters - The filters to use, following PostgREST syntax\n     * @param foreignTable - Set this to filter on foreign tables instead of the\n     * current table\n     */\n    or(filters, { foreignTable } = {}) {\n        const key = foreignTable ? `${foreignTable}.or` : 'or';\n        this.url.searchParams.append(key, `(${filters})`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy the filter. This is an escape hatch - you\n     * should use the specific filter methods wherever possible.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to filter with, following PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    filter(column, operator, value) {\n        this.url.searchParams.append(column, `${operator}.${value}`);\n        return this;\n    }\n}\nexports.default = PostgrestFilterBuilder;\n//# sourceMappingURL=PostgrestFilterBuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","PostgrestTransformBuilder_1","PostgrestFilterBuilder","default","eq","column","url","searchParams","append","neq","gt","gte","lt","lte","like","pattern","ilike","is","in","values","cleanedValues","map","s","RegExp","test","join","contains","Array","isArray","JSON","stringify","containedBy","rangeGt","range","rangeGte","rangeLt","rangeLte","rangeAdjacent","overlaps","textSearch","query","config","type","typePart","undefined","configPart","match","entries","forEach","not","operator","or","filters","foreignTable","key","filter"]
}
