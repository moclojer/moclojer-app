shadow$provide.module$node_modules$graphql$validation$rules$UniqueTypeNamesRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.UniqueTypeNamesRule=function(context){function checkTypeName(node){const typeName=node.name.value;if(null!==schema&&void 0!==schema&&schema.getType(typeName))context.reportError(new _GraphQLError.GraphQLError(`Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:node.name}));
else return knownTypeNames[typeName]?context.reportError(new _GraphQLError.GraphQLError(`There can be only one type named "${typeName}".`,{nodes:[knownTypeNames[typeName],node.name]})):knownTypeNames[typeName]=node.name,!1}const knownTypeNames=Object.create(null),schema=context.getSchema();return{ScalarTypeDefinition:checkTypeName,ObjectTypeDefinition:checkTypeName,InterfaceTypeDefinition:checkTypeName,UnionTypeDefinition:checkTypeName,EnumTypeDefinition:checkTypeName,InputObjectTypeDefinition:checkTypeName}};
var _GraphQLError=require("module$node_modules$graphql$error$GraphQLError")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$UniqueTypeNamesRule.js.map
