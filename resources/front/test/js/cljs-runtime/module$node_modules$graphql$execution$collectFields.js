shadow$provide.module$node_modules$graphql$execution$collectFields=function(global,require,module,exports){function collectFieldsImpl(schema,fragments,variableValues,runtimeType,selectionSet,fields,visitedFragmentNames){for(const selection of selectionSet.selections)switch(selection.kind){case _kinds.Kind.FIELD:if(!shouldIncludeNode(variableValues,selection))continue;selectionSet=selection.alias?selection.alias.value:selection.name.value;const fieldList=fields.get(selectionSet);void 0!==fieldList?
fieldList.push(selection):fields.set(selectionSet,[selection]);break;case _kinds.Kind.INLINE_FRAGMENT:if(!shouldIncludeNode(variableValues,selection)||!doesFragmentConditionMatch(schema,selection,runtimeType))continue;collectFieldsImpl(schema,fragments,variableValues,runtimeType,selection.selectionSet,fields,visitedFragmentNames);break;case _kinds.Kind.FRAGMENT_SPREAD:selectionSet=selection.name.value,!visitedFragmentNames.has(selectionSet)&&shouldIncludeNode(variableValues,selection)&&(visitedFragmentNames.add(selectionSet),
(selectionSet=fragments[selectionSet])&&doesFragmentConditionMatch(schema,selectionSet,runtimeType)&&collectFieldsImpl(schema,fragments,variableValues,runtimeType,selectionSet.selectionSet,fields,visitedFragmentNames))}}function shouldIncludeNode(variableValues,node){const skip=(0,_values.getDirectiveValues)(_directives.GraphQLSkipDirective,node,variableValues);if(!0===(null===skip||void 0===skip?void 0:skip.if))return!1;variableValues=(0,_values.getDirectiveValues)(_directives.GraphQLIncludeDirective,
node,variableValues);return!1===(null===variableValues||void 0===variableValues?void 0:variableValues.if)?!1:!0}function doesFragmentConditionMatch(schema,fragment,type){fragment=fragment.typeCondition;if(!fragment)return!0;fragment=(0,_typeFromAST.typeFromAST)(schema,fragment);return fragment===type?!0:(0,_definition.isAbstractType)(fragment)?schema.isSubType(fragment,type):!1}Object.defineProperty(exports,"__esModule",{value:!0});exports.collectFields=function(schema,fragments,variableValues,runtimeType,
selectionSet){const fields=new Map;collectFieldsImpl(schema,fragments,variableValues,runtimeType,selectionSet,fields,new Set);return fields};exports.collectSubfields=function(schema,fragments,variableValues,returnType,fieldNodes){const subFieldNodes=new Map,visitedFragmentNames=new Set;for(const node of fieldNodes)node.selectionSet&&collectFieldsImpl(schema,fragments,variableValues,returnType,node.selectionSet,subFieldNodes,visitedFragmentNames);return subFieldNodes};var _kinds=require("module$node_modules$graphql$language$kinds"),
_definition=require("module$node_modules$graphql$type$definition"),_directives=require("module$node_modules$graphql$type$directives"),_typeFromAST=require("module$node_modules$graphql$utilities$typeFromAST"),_values=require("module$node_modules$graphql$execution$values")}
//# sourceMappingURL=module$node_modules$graphql$execution$collectFields.js.map
