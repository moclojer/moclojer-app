shadow$provide.module$node_modules$graphql$type$definition=function(global,require,module,exports){function isType(type){return isScalarType(type)||isObjectType(type)||isInterfaceType(type)||isUnionType(type)||isEnumType(type)||isInputObjectType(type)||isListType(type)||isNonNullType(type)}function isScalarType(type){return(0,_instanceOf.instanceOf)(type,GraphQLScalarType)}function isObjectType(type){return(0,_instanceOf.instanceOf)(type,GraphQLObjectType)}function isInterfaceType(type){return(0,_instanceOf.instanceOf)(type,
GraphQLInterfaceType)}function isUnionType(type){return(0,_instanceOf.instanceOf)(type,GraphQLUnionType)}function isEnumType(type){return(0,_instanceOf.instanceOf)(type,GraphQLEnumType)}function isInputObjectType(type){return(0,_instanceOf.instanceOf)(type,GraphQLInputObjectType)}function isListType(type){return(0,_instanceOf.instanceOf)(type,GraphQLList)}function isNonNullType(type){return(0,_instanceOf.instanceOf)(type,GraphQLNonNull)}function isInputType(type){return isScalarType(type)||isEnumType(type)||
isInputObjectType(type)||isWrappingType(type)&&isInputType(type.ofType)}function isOutputType(type){return isScalarType(type)||isObjectType(type)||isInterfaceType(type)||isUnionType(type)||isEnumType(type)||isWrappingType(type)&&isOutputType(type.ofType)}function isLeafType(type){return isScalarType(type)||isEnumType(type)}function isCompositeType(type){return isObjectType(type)||isInterfaceType(type)||isUnionType(type)}function isAbstractType(type){return isInterfaceType(type)||isUnionType(type)}
function isWrappingType(type){return isListType(type)||isNonNullType(type)}function isNullableType(type){return isType(type)&&!isNonNullType(type)}function isNamedType(type){return isScalarType(type)||isObjectType(type)||isInterfaceType(type)||isUnionType(type)||isEnumType(type)||isInputObjectType(type)}function resolveReadonlyArrayThunk(thunk){return"function"===typeof thunk?thunk():thunk}function resolveObjMapThunk(thunk){return"function"===typeof thunk?thunk():thunk}function defineInterfaces(config){var _config$interfaces;
const interfaces=resolveReadonlyArrayThunk(null!==(_config$interfaces=config.interfaces)&&void 0!==_config$interfaces?_config$interfaces:[]);Array.isArray(interfaces)||(0,_devAssert.devAssert)(!1,`${config.name} interfaces must be an Array or a function which returns an Array.`);return interfaces}function defineFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);isPlainObj(fieldMap)||(0,_devAssert.devAssert)(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`);
return(0,_mapValue.mapValue)(fieldMap,(fieldConfig,fieldName)=>{var _fieldConfig$args;isPlainObj(fieldConfig)||(0,_devAssert.devAssert)(!1,`${config.name}.${fieldName} field config must be an object.`);null==fieldConfig.resolve||"function"===typeof fieldConfig.resolve||(0,_devAssert.devAssert)(!1,`${config.name}.${fieldName} field resolver must be a function if `+`provided, but got: ${(0,_inspect.inspect)(fieldConfig.resolve)}.`);const argsConfig=null!==(_fieldConfig$args=fieldConfig.args)&&void 0!==
_fieldConfig$args?_fieldConfig$args:{};isPlainObj(argsConfig)||(0,_devAssert.devAssert)(!1,`${config.name}.${fieldName} args must be an object with argument names as keys.`);return{name:(0,_assertName.assertName)(fieldName),description:fieldConfig.description,type:fieldConfig.type,args:defineArguments(argsConfig),resolve:fieldConfig.resolve,subscribe:fieldConfig.subscribe,deprecationReason:fieldConfig.deprecationReason,extensions:(0,_toObjMap.toObjMap)(fieldConfig.extensions),astNode:fieldConfig.astNode}})}
function defineArguments(config){return Object.entries(config).map(([argName,argConfig])=>({name:(0,_assertName.assertName)(argName),description:argConfig.description,type:argConfig.type,defaultValue:argConfig.defaultValue,deprecationReason:argConfig.deprecationReason,extensions:(0,_toObjMap.toObjMap)(argConfig.extensions),astNode:argConfig.astNode}))}function isPlainObj(obj){return(0,_isObjectLike.isObjectLike)(obj)&&!Array.isArray(obj)}function fieldsToFieldsConfig(fields){return(0,_mapValue.mapValue)(fields,
field=>({description:field.description,type:field.type,args:argsToArgsConfig(field.args),resolve:field.resolve,subscribe:field.subscribe,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode}))}function argsToArgsConfig(args){return(0,_keyValMap.keyValMap)(args,arg=>arg.name,arg=>({description:arg.description,type:arg.type,defaultValue:arg.defaultValue,deprecationReason:arg.deprecationReason,extensions:arg.extensions,astNode:arg.astNode}))}function defineTypes(config){const types=
resolveReadonlyArrayThunk(config.types);Array.isArray(types)||(0,_devAssert.devAssert)(!1,`Must provide Array of types or a function which returns such an array for Union ${config.name}.`);return types}function didYouMeanEnumValue(enumType,unknownValueStr){enumType=enumType.getValues().map(value=>value.name);unknownValueStr=(0,_suggestionList.suggestionList)(unknownValueStr,enumType);return(0,_didYouMean.didYouMean)("the enum value",unknownValueStr)}function defineEnumValues(typeName,valueMap){isPlainObj(valueMap)||
(0,_devAssert.devAssert)(!1,`${typeName} values must be an object with value names as keys.`);return Object.entries(valueMap).map(([valueName,valueConfig])=>{isPlainObj(valueConfig)||(0,_devAssert.devAssert)(!1,`${typeName}.${valueName} must refer to an object with a "value" key `+`representing an internal value but got: ${(0,_inspect.inspect)(valueConfig)}.`);return{name:(0,_assertName.assertEnumValueName)(valueName),description:valueConfig.description,value:void 0!==valueConfig.value?valueConfig.value:
valueName,deprecationReason:valueConfig.deprecationReason,extensions:(0,_toObjMap.toObjMap)(valueConfig.extensions),astNode:valueConfig.astNode}})}function defineInputFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);isPlainObj(fieldMap)||(0,_devAssert.devAssert)(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`);return(0,_mapValue.mapValue)(fieldMap,(fieldConfig,fieldName)=>{"resolve"in fieldConfig&&(0,_devAssert.devAssert)(!1,
`${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`);return{name:(0,_assertName.assertName)(fieldName),description:fieldConfig.description,type:fieldConfig.type,defaultValue:fieldConfig.defaultValue,deprecationReason:fieldConfig.deprecationReason,extensions:(0,_toObjMap.toObjMap)(fieldConfig.extensions),astNode:fieldConfig.astNode}})}Object.defineProperty(exports,"__esModule",{value:!0});exports.GraphQLUnionType=exports.GraphQLScalarType=exports.GraphQLObjectType=
exports.GraphQLNonNull=exports.GraphQLList=exports.GraphQLInterfaceType=exports.GraphQLInputObjectType=exports.GraphQLEnumType=void 0;exports.argsToArgsConfig=argsToArgsConfig;exports.assertAbstractType=function(type){if(!isAbstractType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL abstract type.`);return type};exports.assertCompositeType=function(type){if(!isCompositeType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL composite type.`);return type};
exports.assertEnumType=function(type){if(!isEnumType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL Enum type.`);return type};exports.assertInputObjectType=function(type){if(!isInputObjectType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL Input Object type.`);return type};exports.assertInputType=function(type){if(!isInputType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL input type.`);return type};exports.assertInterfaceType=
function(type){if(!isInterfaceType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL Interface type.`);return type};exports.assertLeafType=function(type){if(!isLeafType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL leaf type.`);return type};exports.assertListType=function(type){if(!isListType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL List type.`);return type};exports.assertNamedType=function(type){if(!isNamedType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL named type.`);
return type};exports.assertNonNullType=function(type){if(!isNonNullType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL Non-Null type.`);return type};exports.assertNullableType=function(type){if(!isNullableType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL nullable type.`);return type};exports.assertObjectType=function(type){if(!isObjectType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL Object type.`);return type};exports.assertOutputType=
function(type){if(!isOutputType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL output type.`);return type};exports.assertScalarType=function(type){if(!isScalarType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL Scalar type.`);return type};exports.assertType=function(type){if(!isType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL type.`);return type};exports.assertUnionType=function(type){if(!isUnionType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL Union type.`);
return type};exports.assertWrappingType=function(type){if(!isWrappingType(type))throw Error(`Expected ${(0,_inspect.inspect)(type)} to be a GraphQL wrapping type.`);return type};exports.defineArguments=defineArguments;exports.getNamedType=function(type){if(type){for(;isWrappingType(type);)type=type.ofType;return type}};exports.getNullableType=function(type){if(type)return isNonNullType(type)?type.ofType:type};exports.isAbstractType=isAbstractType;exports.isCompositeType=isCompositeType;exports.isEnumType=
isEnumType;exports.isInputObjectType=isInputObjectType;exports.isInputType=isInputType;exports.isInterfaceType=isInterfaceType;exports.isLeafType=isLeafType;exports.isListType=isListType;exports.isNamedType=isNamedType;exports.isNonNullType=isNonNullType;exports.isNullableType=isNullableType;exports.isObjectType=isObjectType;exports.isOutputType=isOutputType;exports.isRequiredArgument=function(arg){return isNonNullType(arg.type)&&void 0===arg.defaultValue};exports.isRequiredInputField=function(field){return isNonNullType(field.type)&&
void 0===field.defaultValue};exports.isScalarType=isScalarType;exports.isType=isType;exports.isUnionType=isUnionType;exports.isWrappingType=isWrappingType;exports.resolveObjMapThunk=resolveObjMapThunk;exports.resolveReadonlyArrayThunk=resolveReadonlyArrayThunk;var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),_didYouMean=require("module$node_modules$graphql$jsutils$didYouMean"),_identityFunc=require("module$node_modules$graphql$jsutils$identityFunc"),_inspect=require("module$node_modules$graphql$jsutils$inspect"),
_instanceOf=require("module$node_modules$graphql$jsutils$instanceOf"),_isObjectLike=require("module$node_modules$graphql$jsutils$isObjectLike"),_keyMap=require("module$node_modules$graphql$jsutils$keyMap"),_keyValMap=require("module$node_modules$graphql$jsutils$keyValMap"),_mapValue=require("module$node_modules$graphql$jsutils$mapValue"),_suggestionList=require("module$node_modules$graphql$jsutils$suggestionList"),_toObjMap=require("module$node_modules$graphql$jsutils$toObjMap"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),
_kinds=require("module$node_modules$graphql$language$kinds"),_printer=require("module$node_modules$graphql$language$printer"),_valueFromASTUntyped=require("module$node_modules$graphql$utilities$valueFromASTUntyped"),_assertName=require("module$node_modules$graphql$type$assertName");class GraphQLList{constructor(ofType){isType(ofType)||(0,_devAssert.devAssert)(!1,`Expected ${(0,_inspect.inspect)(ofType)} to be a GraphQL type.`);this.ofType=ofType}get [Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+
String(this.ofType)+"]"}toJSON(){return this.toString()}}exports.GraphQLList=GraphQLList;class GraphQLNonNull{constructor(ofType){isNullableType(ofType)||(0,_devAssert.devAssert)(!1,`Expected ${(0,_inspect.inspect)(ofType)} to be a GraphQL nullable type.`);this.ofType=ofType}get [Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}exports.GraphQLNonNull=GraphQLNonNull;class GraphQLScalarType{constructor(config){var _config$parseValue,
_config$serialize,_config$parseLiteral,_config$extensionASTN;const parseValue=null!==(_config$parseValue=config.parseValue)&&void 0!==_config$parseValue?_config$parseValue:_identityFunc.identityFunc;this.name=(0,_assertName.assertName)(config.name);this.description=config.description;this.specifiedByURL=config.specifiedByURL;this.serialize=null!==(_config$serialize=config.serialize)&&void 0!==_config$serialize?_config$serialize:_identityFunc.identityFunc;this.parseValue=parseValue;this.parseLiteral=
null!==(_config$parseLiteral=config.parseLiteral)&&void 0!==_config$parseLiteral?_config$parseLiteral:(node,variables)=>parseValue((0,_valueFromASTUntyped.valueFromASTUntyped)(node,variables));this.extensions=(0,_toObjMap.toObjMap)(config.extensions);this.astNode=config.astNode;this.extensionASTNodes=null!==(_config$extensionASTN=config.extensionASTNodes)&&void 0!==_config$extensionASTN?_config$extensionASTN:[];null==config.specifiedByURL||"string"===typeof config.specifiedByURL||(0,_devAssert.devAssert)(!1,
`${this.name} must provide "specifiedByURL" as a string, `+`but got: ${(0,_inspect.inspect)(config.specifiedByURL)}.`);null==config.serialize||"function"===typeof config.serialize||(0,_devAssert.devAssert)(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`);config.parseLiteral&&("function"===typeof config.parseValue&&"function"===typeof config.parseLiteral||(0,_devAssert.devAssert)(!1,
`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get [Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}exports.GraphQLScalarType=GraphQLScalarType;
class GraphQLObjectType{constructor(config){var _config$extensionASTN2;this.name=(0,_assertName.assertName)(config.name);this.description=config.description;this.isTypeOf=config.isTypeOf;this.extensions=(0,_toObjMap.toObjMap)(config.extensions);this.astNode=config.astNode;this.extensionASTNodes=null!==(_config$extensionASTN2=config.extensionASTNodes)&&void 0!==_config$extensionASTN2?_config$extensionASTN2:[];this._fields=()=>defineFieldMap(config);this._interfaces=()=>defineInterfaces(config);null==
config.isTypeOf||"function"===typeof config.isTypeOf||(0,_devAssert.devAssert)(!1,`${this.name} must provide "isTypeOf" as a function, `+`but got: ${(0,_inspect.inspect)(config.isTypeOf)}.`)}get [Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){"function"===typeof this._fields&&(this._fields=this._fields());return this._fields}getInterfaces(){"function"===typeof this._interfaces&&(this._interfaces=this._interfaces());return this._interfaces}toConfig(){return{name:this.name,description:this.description,
interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}exports.GraphQLObjectType=GraphQLObjectType;class GraphQLInterfaceType{constructor(config){var _config$extensionASTN3;this.name=(0,_assertName.assertName)(config.name);this.description=config.description;this.resolveType=config.resolveType;this.extensions=
(0,_toObjMap.toObjMap)(config.extensions);this.astNode=config.astNode;this.extensionASTNodes=null!==(_config$extensionASTN3=config.extensionASTNodes)&&void 0!==_config$extensionASTN3?_config$extensionASTN3:[];this._fields=defineFieldMap.bind(void 0,config);this._interfaces=defineInterfaces.bind(void 0,config);null==config.resolveType||"function"===typeof config.resolveType||(0,_devAssert.devAssert)(!1,`${this.name} must provide "resolveType" as a function, `+`but got: ${(0,_inspect.inspect)(config.resolveType)}.`)}get [Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){"function"===
typeof this._fields&&(this._fields=this._fields());return this._fields}getInterfaces(){"function"===typeof this._interfaces&&(this._interfaces=this._interfaces());return this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}
exports.GraphQLInterfaceType=GraphQLInterfaceType;class GraphQLUnionType{constructor(config){var _config$extensionASTN4;this.name=(0,_assertName.assertName)(config.name);this.description=config.description;this.resolveType=config.resolveType;this.extensions=(0,_toObjMap.toObjMap)(config.extensions);this.astNode=config.astNode;this.extensionASTNodes=null!==(_config$extensionASTN4=config.extensionASTNodes)&&void 0!==_config$extensionASTN4?_config$extensionASTN4:[];this._types=defineTypes.bind(void 0,
config);null==config.resolveType||"function"===typeof config.resolveType||(0,_devAssert.devAssert)(!1,`${this.name} must provide "resolveType" as a function, `+`but got: ${(0,_inspect.inspect)(config.resolveType)}.`)}get [Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){"function"===typeof this._types&&(this._types=this._types());return this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,
extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}exports.GraphQLUnionType=GraphQLUnionType;class GraphQLEnumType{constructor(config){var _config$extensionASTN5;this.name=(0,_assertName.assertName)(config.name);this.description=config.description;this.extensions=(0,_toObjMap.toObjMap)(config.extensions);this.astNode=config.astNode;this.extensionASTNodes=null!==(_config$extensionASTN5=config.extensionASTNodes)&&void 0!==_config$extensionASTN5?_config$extensionASTN5:
[];this._values=defineEnumValues(this.name,config.values);this._valueLookup=new Map(this._values.map(enumValue=>[enumValue.value,enumValue]));this._nameLookup=(0,_keyMap.keyMap)(this._values,value=>value.name)}get [Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(name){return this._nameLookup[name]}serialize(outputValue){const enumValue=this._valueLookup.get(outputValue);if(void 0===enumValue)throw new _GraphQLError.GraphQLError(`Enum "${this.name}" cannot represent value: ${(0,_inspect.inspect)(outputValue)}`);
return enumValue.name}parseValue(inputValue){if("string"!==typeof inputValue)throw inputValue=(0,_inspect.inspect)(inputValue),new _GraphQLError.GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${inputValue}.`+didYouMeanEnumValue(this,inputValue));const enumValue=this.getValue(inputValue);if(null==enumValue)throw new _GraphQLError.GraphQLError(`Value "${inputValue}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,inputValue));return enumValue.value}parseLiteral(valueNode,
_variables){if(valueNode.kind!==_kinds.Kind.ENUM)throw _variables=(0,_printer.print)(valueNode),new _GraphQLError.GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${_variables}.`+didYouMeanEnumValue(this,_variables),{nodes:valueNode});_variables=this.getValue(valueNode.value);if(null==_variables)throw _variables=(0,_printer.print)(valueNode),new _GraphQLError.GraphQLError(`Value "${_variables}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,_variables),{nodes:valueNode});
return _variables.value}toConfig(){const values=(0,_keyValMap.keyValMap)(this.getValues(),value=>value.name,value=>({description:value.description,value:value.value,deprecationReason:value.deprecationReason,extensions:value.extensions,astNode:value.astNode}));return{name:this.name,description:this.description,values,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}exports.GraphQLEnumType=GraphQLEnumType;
class GraphQLInputObjectType{constructor(config){var _config$extensionASTN6;this.name=(0,_assertName.assertName)(config.name);this.description=config.description;this.extensions=(0,_toObjMap.toObjMap)(config.extensions);this.astNode=config.astNode;this.extensionASTNodes=null!==(_config$extensionASTN6=config.extensionASTNodes)&&void 0!==_config$extensionASTN6?_config$extensionASTN6:[];this._fields=defineInputFieldMap.bind(void 0,config)}get [Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){"function"===
typeof this._fields&&(this._fields=this._fields());return this._fields}toConfig(){const fields=(0,_mapValue.mapValue)(this.getFields(),field=>({description:field.description,type:field.type,defaultValue:field.defaultValue,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode}));return{name:this.name,description:this.description,fields,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}
exports.GraphQLInputObjectType=GraphQLInputObjectType}
//# sourceMappingURL=module$node_modules$graphql$type$definition.js.map
