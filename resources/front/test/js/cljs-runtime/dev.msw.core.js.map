{"version":3,"sources":["dev/msw/core.cljs"],"mappings":";;AAMA,sBAAA,tBAAeA;AAEf,GAAA,QAAAC,gCAAAC,oCAAAC,yCAAAC;AAAA;AAAA,AAAA,AAASC,0BAAW,6CAAA,7CAACC;;AAErB,6BAAA,7BAAMC,kEAAeC;AAArB,AACE,GAAU,CAAA,AAAAC,4CAAA,5BAAOJ;AAAjB;AAAA,AACE,AAAgB,AAAAI,gBAAYJ;;;AAC9B,AAACK,sBAAOL,wBAAWG;;OACf,AAAA,AAAAC,gBAASJ,+BAAW,qBAAA,2CAAA,gFAAA,hJAACM,/CACrB,uNAAA,9NACA;AADA,AAAQ,8DAAA,vDAACC,mCAAaZ;UACtB,WAAAa;AAAA,AAAS,mBAAAA,ZAACC;;;AAEhB,4BAAA,5BAAMC;AAAN,AACE,AAAA,AAAAN,gBAAQJ;;AACR,8CAAA,9CAACK,sBAAOL;;AACR,OAACW,sCAAgBhB;;AAEnB,AAAA,2BAAA,mCAAAiB,9DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAMD;AAAN,AACM,OAACE,uDAAOC;;;AADd,CAAA,yDAAA,zDAAMH,oEAEFI;AAFJ,AAGG,OAAChB,2BAAc,AAACiB,8CAAMC,8CAAgB,AAACC,oBAAYH;;;AAHtD,CAAA,mDAAA,nDAAMJ;;AAAN,AAKA,0BAAA,1BAAMQ;AAAN,AACE,OAACZ;;AAEH,0BAAA,1BAAMa;AAAN,AACE,oBAAI,AAACC,6BAAY7B;AACf,OAACqB;;AACD,OAACS","names":["dev.msw.core/ss-key","js/dev","js/dev.msw","js/dev.msw.core","js/dev.msw.core.mock-state","dev.msw.core/mock-state","cljs.core.atom","dev.msw.core/start-browser","handlers","cljs.core/deref","cljs.core/reset!","cljs.core/clj->js","dev.session-storage/set-item!","p1__33339#","js/console.log","dev.msw.core/stop-browser","dev.session-storage/remove-item!","var_args","G__33341","dev.msw.core/start!","js/Error","dev.msw.core.start_BANG_","dev.msw.config/default","custom-config","cljs.core.apply","js/module$node_modules$msw$lib$index.setupWorker","dev.msw.mount/mount","dev.msw.core/stop!","dev.msw.core/init!","dev.session-storage/get-item","js/Promise.resolve"],"sourcesContent":["(ns dev.msw.core\n  (:require [\"msw\" :as msw]\n            [dev.msw.config :as config]\n            [dev.msw.mount :as mount]\n            [dev.session-storage :as ss]))\n\n(def ^:private ss-key \"mock-active?\")\n\n(defonce mock-state (atom nil))\n\n(defn start-browser [handlers]\n  (when-not (nil? @mock-state)\n    (.resetHandlers ^js/Object @mock-state))\n  (reset! mock-state handlers)\n  (-> (.start @mock-state (clj->js {:onUnhandledRequest \"bypass\"}))\n      (.then #(ss/set-item! ss-key true))\n      (.catch #(js/console.log %))))\n\n(defn stop-browser []\n  (.stop @mock-state)\n  (reset! mock-state nil)\n  (ss/remove-item! ss-key))\n\n(defn start!\n  ([] (start! config/default))\n  ([custom-config]\n   (start-browser (apply msw/setupWorker (mount/mount custom-config)))))\n\n(defn stop! []\n  (stop-browser))\n\n(defn init! []\n  (if (ss/get-item ss-key)\n    (start!)\n    (js/Promise.resolve)))\n"]}