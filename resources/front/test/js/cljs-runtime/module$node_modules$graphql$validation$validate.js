shadow$provide.module$node_modules$graphql$validation$validate=function(global,require,module,exports){function validateSDL(documentAST,schemaToExtend,rules=_specifiedRules.specifiedSDLRules){const errors=[],context=new _ValidationContext.SDLValidationContext(documentAST,schemaToExtend,error=>{errors.push(error)});schemaToExtend=rules.map(rule=>rule(context));(0,_visitor.visit)(documentAST,(0,_visitor.visitInParallel)(schemaToExtend));return errors}Object.defineProperty(exports,"__esModule",{value:!0});
exports.assertValidSDL=function(documentAST){documentAST=validateSDL(documentAST);if(0!==documentAST.length)throw Error(documentAST.map(error=>error.message).join("\n\n"));};exports.assertValidSDLExtension=function(documentAST,schema){documentAST=validateSDL(documentAST,schema);if(0!==documentAST.length)throw Error(documentAST.map(error=>error.message).join("\n\n"));};exports.validate=function(schema,documentAST,rules=_specifiedRules.specifiedRules,options,typeInfo=new _TypeInfo.TypeInfo(schema)){var _options$maxErrors;
const maxErrors=null!==(_options$maxErrors=null===options||void 0===options?void 0:options.maxErrors)&&void 0!==_options$maxErrors?_options$maxErrors:100;documentAST||(0,_devAssert.devAssert)(!1,"Must provide document.");(0,_validate.assertValidSchema)(schema);const abortObj=Object.freeze({}),errors=[],context=new _ValidationContext.ValidationContext(schema,documentAST,typeInfo,error=>{if(errors.length>=maxErrors)throw errors.push(new _GraphQLError.GraphQLError("Too many validation errors, error limit reached. Validation aborted.")),
abortObj;errors.push(error)});schema=(0,_visitor.visitInParallel)(rules.map(rule=>rule(context)));try{(0,_visitor.visit)(documentAST,(0,_TypeInfo.visitWithTypeInfo)(typeInfo,schema))}catch(e){if(e!==abortObj)throw e;}return errors};exports.validateSDL=validateSDL;var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_visitor=require("module$node_modules$graphql$language$visitor"),_validate=require("module$node_modules$graphql$type$validate"),
_TypeInfo=require("module$node_modules$graphql$utilities$TypeInfo"),_specifiedRules=require("module$node_modules$graphql$validation$specifiedRules"),_ValidationContext=require("module$node_modules$graphql$validation$ValidationContext")}
//# sourceMappingURL=module$node_modules$graphql$validation$validate.js.map
