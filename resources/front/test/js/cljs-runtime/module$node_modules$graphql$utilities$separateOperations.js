shadow$provide.module$node_modules$graphql$utilities$separateOperations=function(global,require,module,exports){function collectTransitiveDependencies(collected,depGraph,fromName){if(!collected.has(fromName)&&(collected.add(fromName),fromName=depGraph[fromName],void 0!==fromName))for(const toName of fromName)collectTransitiveDependencies(collected,depGraph,toName)}function collectDependencies(selectionSet){const dependencies=[];(0,_visitor.visit)(selectionSet,{FragmentSpread(node){dependencies.push(node.name.value)}});
return dependencies}Object.defineProperty(exports,"__esModule",{value:!0});exports.separateOperations=function(documentAST){const operations=[],depGraph=Object.create(null);for(var definitionNode of documentAST.definitions)switch(definitionNode.kind){case _kinds.Kind.OPERATION_DEFINITION:operations.push(definitionNode);break;case _kinds.Kind.FRAGMENT_DEFINITION:depGraph[definitionNode.name.value]=collectDependencies(definitionNode.selectionSet)}definitionNode=Object.create(null);for(const operation of operations){const dependencies=
new Set;for(const fragmentName of collectDependencies(operation.selectionSet))collectTransitiveDependencies(dependencies,depGraph,fragmentName);definitionNode[operation.name?operation.name.value:""]={kind:_kinds.Kind.DOCUMENT,definitions:documentAST.definitions.filter(node=>node===operation||node.kind===_kinds.Kind.FRAGMENT_DEFINITION&&dependencies.has(node.name.value))}}return definitionNode};var _kinds=require("module$node_modules$graphql$language$kinds"),_visitor=require("module$node_modules$graphql$language$visitor")}
//# sourceMappingURL=module$node_modules$graphql$utilities$separateOperations.js.map
