{"version":3,"sources":["front/app/http.cljs"],"mappings":";AAKA,iCAAA,jCAAOA,0EAAcC;AAArB,AACE,uHAAA,2EAAA,3LAACC,0DAAQD;;AAEX,oCAAA,4CAAAE,hFAAOI,yFAC4CK;AADnD,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAC0CO;UAD1C,AAAAL,4CAAAF,eAAA,jEACWI;iBADX,AAAAF,4CAAAF,eAAA,xEACeK;iBADf,AAAAH,4CAAAF,eAAA,xEAC0BM;AAD1B,OAEM,CAACE,2CAAAA,wDAAAA,fAAWJ,oCAAAA,hCAAIG,oCAAAA,7HAChB,4IAAO,WAAAE,9JAIP;AAJO,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;WAAAA,PAAyBE;aAAzB,AAAAV,4CAAAQ,eAAA,pEAAaC;AAAb,AACE,GAAI,UAAA,TAAGA;AACL,OAACE,oBAAS,AAACC,6CAAKR,WAAW,AAACV,+BAAagB;;AACzC,OAACC,oBAAS,AAACC,6CAAKT,WAAW,AAACT,+BAAagB;;UAC5C,WAAKA;AAAL,AACE,OAACC,oBAAS,AAACC,6CAAKR,WAAW,AAACV,+BAAagB;;;AAEzD,6BAAA,7BAAMG,kEACHP;AADH,AAEE,kBAAKD;AAAL,AACE,GAAI,AAACS,4BAAYT;AACf,IAAAU,aAAA,AAAAC,cAAYX;IAAZY,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,UAAA,AAAAD,kDAAAE,xDAAQS;AAAR,AAAA,AACE,AAAC3B,kCAAc2B,IAAItB;;AADrB;AAAA,eAAAS;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,UAAA,AAAAI,gBAAAX,tBAAQa;AAAR,AAAA,AACE,AAAC3B,kCAAc2B,IAAItB;;AADrB;AAAA,eAAA,AAAAqB,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAEA,OAACd,kCAAcI,QAAQC;;;;AAE7B,oCAAA,pCAAMuB,gFAAoBC;AAA1B,AACE,kBAAK5B,IAAI6B;AAAT,AACE,IAAAC,aAAiC,yDAAA,+FAAA,2CAAA,0DAAA,MAAA,sDAAA,zTAACG,+CAAOL,6FACC5B;IAD1C8B,iBAAA,AAAAjC,4BAAAiC;eAAAA,XAAuBE;UAAvB,AAAAlC,4CAAAgC,eAAA,jEAAcC;AAAd,AAIE,OAACG,iDAAQ,iBAAAC,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAA;;KAAaH;;;AAE5B,kBAAA,lBAACI,sEAAa,AAACzB,2BAAY0B;AAE3B","names":["front.app.http/js->cljs-key","obj","cljs.core.js__GT_clj","p__53035","map__53036","cljs.core/--destructure-map","cljs.core.get","front.app.http/send-request!","url","on-success","on-failure","request","fn-request","p__53037","map__53038","status","resp","refx.alpha/dispatch","cljs.core.conj","front.app.http/http-effect","cljs.core/sequential?","seq__53039","cljs.core/seq","chunk__53040","count__53041","i__53042","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","req","front.app.http/fetch-request-mock","responses","_request","map__53043","lag","response","cljs.core.get_in","promesa.core.delay","or__5045__auto__","refx.alpha/reg-fx","lambdaisland.fetch/request"],"sourcesContent":["(ns front.app.http\n  (:require [lambdaisland.fetch :as fetch]\n            [promesa.core :as p]\n            [refx.alpha :refer [dispatch reg-fx]]))\n\n(defn- js->cljs-key [obj]\n  (js->clj obj :keywordize-keys true))\n\n(defn- send-request!\n  [{:keys [url on-success on-failure] :as request} fn-request]\n  (-> (fn-request url request)\n      (.then (fn [{:keys [status] :as resp}]\n               (if (> status 400)\n                 (dispatch (conj on-failure (js->cljs-key resp)))\n                 (dispatch (conj on-success (js->cljs-key resp))))))\n      (.catch (fn [resp]\n                (dispatch (conj on-failure (js->cljs-key resp)))))))\n\n(defn http-effect\n  [fn-request]\n  (fn [request]\n    (if (sequential? request)\n      (doseq [req request]\n        (send-request! req fn-request))\n      (send-request! request fn-request))))\n\n(defn fetch-request-mock [responses]\n  (fn [url _request]\n    (let [{:keys [lag] :as response} (get-in responses\n                                             [url]\n                                             {:status 500\n                                              :body \"Response not set in mocks!\"})]\n      (p/delay (or lag 100) response))))\n\n(reg-fx :http (http-effect fetch/request))\n\n(comment\n  ; is possible to mock directly this effect\n  (reg-fx\n   :http (http-effect (fetch-request-mock\n                       {\"/login/send-email\" {:status 201\n                                             :body #js {:ok true}}}))))\n"]}