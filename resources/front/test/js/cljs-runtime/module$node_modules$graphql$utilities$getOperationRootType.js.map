{
"version":3,
"file":"module$node_modules$graphql$utilities$getOperationRootType.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CASAA,QAA6B,CAACC,MAAD,CAASC,SAAT,CAAoB,CAC/C,GAA4B,OAA5B,GAAIA,SAAUA,CAAAA,SAAd,CAAqC,CAC7BC,MAAAA,CAAYF,MAAOG,CAAAA,YAAP,EAElB,IAAI,CAACD,MAAL,CACE,KAAM,KAAIE,aAAcC,CAAAA,YAAlB,CACJ,sDADI,CAEJ,CACEC,MAAOL,SADT,CAFI,CAAN,CAQF,MAAOC,OAZ4B,CAerC,GAA4B,UAA5B,GAAID,SAAUA,CAAAA,SAAd,CAAwC,CAChCM,MAAAA,CAAeP,MAAOQ,CAAAA,eAAP,EAErB,IAAI,CAACD,MAAL,CACE,KAAM,KAAIH,aAAcC,CAAAA,YAAlB,CACJ,yCADI;AAEJ,CACEC,MAAOL,SADT,CAFI,CAAN,CAQF,MAAOM,OAZ+B,CAexC,GAA4B,cAA5B,GAAIN,SAAUA,CAAAA,SAAd,CAA4C,CACpCQ,MAAAA,CAAmBT,MAAOU,CAAAA,mBAAP,EAEzB,IAAI,CAACD,MAAL,CACE,KAAM,KAAIL,aAAcC,CAAAA,YAAlB,CACJ,6CADI,CAEJ,CACEC,MAAOL,SADT,CAFI,CAAN,CAQF,MAAOQ,OAZmC,CAe5C,KAAM,KAAIL,aAAcC,CAAAA,YAAlB,CACJ,4DADI,CAEJ,CACEC,MAAOL,SADT,CAFI,CAAN,CA9C+C,CAPjD,KAAIG,cAAgBX,OAAA,CAAQ,gDAAR,CARmG;",
"sources":["node_modules/graphql/utilities/getOperationRootType.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$getOperationRootType\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.getOperationRootType = getOperationRootType;\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\n/**\n * Extracts the root type of the operation from the schema.\n *\n * @deprecated Please use `GraphQLSchema.getRootType` instead. Will be removed in v17\n */\nfunction getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    const queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new _GraphQLError.GraphQLError(\n        'Schema does not define the required query root type.',\n        {\n          nodes: operation,\n        },\n      );\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    const mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new _GraphQLError.GraphQLError(\n        'Schema is not configured for mutations.',\n        {\n          nodes: operation,\n        },\n      );\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    const subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new _GraphQLError.GraphQLError(\n        'Schema is not configured for subscriptions.',\n        {\n          nodes: operation,\n        },\n      );\n    }\n\n    return subscriptionType;\n  }\n\n  throw new _GraphQLError.GraphQLError(\n    'Can only have query, mutation and subscription operations.',\n    {\n      nodes: operation,\n    },\n  );\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","getOperationRootType","schema","operation","queryType","getQueryType","_GraphQLError","GraphQLError","nodes","mutationType","getMutationType","subscriptionType","getSubscriptionType"]
}
