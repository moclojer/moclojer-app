shadow$provide.module$node_modules$graphql$language$visitor=function(global,require,module,exports){function getEnterLeaveForKind(visitor,kind){kind=visitor[kind];return"object"===typeof kind?kind:"function"===typeof kind?{enter:kind,leave:void 0}:{enter:visitor.enter,leave:visitor.leave}}Object.defineProperty(exports,"__esModule",{value:!0});exports.BREAK=void 0;exports.getEnterLeaveForKind=getEnterLeaveForKind;exports.getVisitFn=function(visitor,kind,isLeaving){const {enter,leave}=getEnterLeaveForKind(visitor,
kind);return isLeaving?leave:enter};exports.visit=function(root,visitor,visitorKeys=_ast.QueryDocumentKeys){const enterLeaveMap=new Map;for(var kind of Object.values(_kinds.Kind))enterLeaveMap.set(kind,getEnterLeaveForKind(visitor,kind));kind=void 0;var inArray=Array.isArray(root);let keys=[root],index=-1;var edits=[];let node=root,key=void 0,parent=void 0;const path=[],ancestors=[];do{index++;const isLeaving=index===keys.length,isEdited=isLeaving&&0!==edits.length;if(isLeaving){key=0===ancestors.length?
void 0:path[path.length-1];node=parent;parent=ancestors.pop();if(isEdited)if(inArray){node=node.slice();inArray=0;for(const [editKey,editValue]of edits)edits=editKey-inArray,null===editValue?(node.splice(edits,1),inArray++):node[edits]=editValue}else{node=Object.defineProperties({},Object.getOwnPropertyDescriptors(node));for(const [editKey,editValue]of edits)node[editKey]=editValue}index=kind.index;keys=kind.keys;edits=kind.edits;inArray=kind.inArray;kind=kind.prev}else if(parent){key=inArray?index:
keys[index];node=parent[key];if(null===node||void 0===node)continue;path.push(key)}var result=void 0;if(!Array.isArray(node)){var _enterLeaveMap$get,_enterLeaveMap$get2;(0,_ast.isNode)(node)||(0,_devAssert.devAssert)(!1,`Invalid AST Node: ${(0,_inspect.inspect)(node)}.`);result=isLeaving?null===(_enterLeaveMap$get=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get?void 0:_enterLeaveMap$get.leave:null===(_enterLeaveMap$get2=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get2?void 0:
_enterLeaveMap$get2.enter;result=null===result||void 0===result?void 0:result.call(visitor,node,key,parent,path,ancestors);if(result===BREAK)break;if(!1===result){if(!isLeaving){path.pop();continue}}else if(void 0!==result&&(edits.push([key,result]),!isLeaving))if((0,_ast.isNode)(result))node=result;else{path.pop();continue}}void 0===result&&isEdited&&edits.push([key,node]);if(isLeaving)path.pop();else{var _node$kind;kind={inArray,index,keys,edits,prev:kind};keys=(inArray=Array.isArray(node))?node:
null!==(_node$kind=visitorKeys[node.kind])&&void 0!==_node$kind?_node$kind:[];index=-1;edits=[];parent&&ancestors.push(parent);parent=node}}while(void 0!==kind);return 0!==edits.length?edits[edits.length-1][1]:root};exports.visitInParallel=function(visitors){const skipping=Array(visitors.length).fill(null),mergedVisitor=Object.create(null);for(const kind of Object.values(_kinds.Kind)){let hasVisitor=!1;const enterList=Array(visitors.length).fill(void 0),leaveList=Array(visitors.length).fill(void 0);
for(let i=0;i<visitors.length;++i){const {enter,leave}=getEnterLeaveForKind(visitors[i],kind);hasVisitor||(hasVisitor=null!=enter||null!=leave);enterList[i]=enter;leaveList[i]=leave}hasVisitor&&(mergedVisitor[kind]={enter(...args){const node=args[0];for(let i=0;i<visitors.length;i++)if(null===skipping[i]){var _enterList$i;const result=null===(_enterList$i=enterList[i])||void 0===_enterList$i?void 0:_enterList$i.apply(visitors[i],args);if(!1===result)skipping[i]=node;else if(result===BREAK)skipping[i]=
BREAK;else if(void 0!==result)return result}},leave(...args){const node=args[0];for(let i=0;i<visitors.length;i++)if(null===skipping[i]){var _leaveList$i;const result=null===(_leaveList$i=leaveList[i])||void 0===_leaveList$i?void 0:_leaveList$i.apply(visitors[i],args);if(result===BREAK)skipping[i]=BREAK;else if(void 0!==result&&!1!==result)return result}else skipping[i]===node&&(skipping[i]=null)}})}return mergedVisitor};var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),_inspect=
require("module$node_modules$graphql$jsutils$inspect"),_ast=require("module$node_modules$graphql$language$ast"),_kinds=require("module$node_modules$graphql$language$kinds");const BREAK=Object.freeze({});exports.BREAK=BREAK}
//# sourceMappingURL=module$node_modules$graphql$language$visitor.js.map
