{"version":3,"sources":["dev/msw/mount.cljs"],"mappings":";;AAGA,gCAAA,wCAAAA,xEAAMI,iFAAgCE;AAAtC,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAA+BI;AAA/B,AAA4C,OAACE,8CAAMF,KAAKC;;AAExD,iCAAA,yCAAAE,SAAAC,nFAAMI;AAAN,AAAA,IAAAH,aAAAF;IAAAE,iBAAA,AAAAR,4BAAAQ;UAAA,AAAAP,4CAAAO,eAAA,jEAAgCI;mBAAhC,AAAAX,4CAAAO,eAAA,1EAAoCK;WAApC,AAAAZ,4CAAAO,eAAA,lEAAiDL;aAAjD,AAAAF,4CAAAO,eAAA,pEAAsDM;IAAtDL,aAAAF;WAAA,AAAAG,4CAAAD,WAAA,IAAA,lEAAgEM;UAAhE,AAAAL,4CAAAD,WAAA,IAAA,jEAAqEO;UAArE,AAAAN,4CAAAD,WAAA,IAAA,jEAAyEQ;AAAzE,AACE,IAAAC,WAAK,uBAAA,eAAA,pBAAMN,KAAI,AAAQK,UAAIL;IAA3BO,WACK,0BAAA,RAAML,QAAO,AAASG,WAAI,iBAAAI,mBAAIP;AAAJ,AAAA,oBAAAO;AAAAA;;AAAA;;MAA1B;IADLD,WAEK,wBAAA,mDAAA,zDAAMjB,MAAK,AAAO,CAAMc,IAAI,AAACK,eAAKT,qBAAeI,IAAId;AAF1D,AAAA,8EAAAe,SAAAC,SAAAC,0BAAAF,SAAAC,SAAAC,pIAACJ,oCAAAA,gEAAAA;;AAIH,6BAAA,7BAAMO,kEAAcC,QAAQpB;AAA5B,AACE,GAAI,AAACqB,oBAAID;AACP,OAACtB,8BAAgBsB,QAAQpB;;AACzB,OAACO,+BAAiBa,QAAQpB;;;AAE9B,sBAAA,tBAAMsB,oDACHC;AADH,AAEE,OAACC,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAnB,4CAAAoB,WAAA,IAAA,jEAAMC;iBAAN,AAAArB,4CAAAoB,WAAA,IAAA,xEAAUE;AAAV,AACE,IAAAC,aAAuB,AAAC5B,8CAAM8B,cAAIH;aAAlC,AAAAtB,4CAAAuB,WAAA,IAAA,pEAAOC;cAAP,AAAAxB,4CAAAuB,WAAA,IAAA,rEAAcT;IACRY,cAAY,CAAMC,uCAAS,AAACf,eAAKY;AADvC,AAEE,OAAOE,iBAAYC,uCAASN,IACrB;mCAAO3B;AAAP,AACE,OAACmB,2BAAaC,QAAQpB;;;IADjBA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;GAElBuB","names":["p__60416","map__60417","cljs.core/--destructure-map","cljs.core.get","dev.msw.mount/resolve-body-fn","body","args","cljs.core.apply","p__60418","p__60419","map__60420","vec__60421","cljs.core.nth","dev.msw.mount/resolve-body-map","lag","content-type","status","_req","res","ctx","G__60424","G__60425","G__60426","or__5045__auto__","cljs.core/name","dev.msw.mount/resolve-body","options","cljs.core/fn?","dev.msw.mount/mount","mock-map","cljs.core.map","p__60427","vec__60428","url","url-config","vec__60431","method","cljs.core/vec","rest-method","js/module$node_modules$msw$lib$index.rest"],"sourcesContent":["(ns dev.msw.mount\n  (:require [\"msw\" :as msw]))\n\n(defn resolve-body-fn [{:keys [body]} args] (apply body args))\n\n(defn resolve-body-map [{:keys [lag content-type body status]} [_req res ctx]]\n  (res (when lag (.delay ctx lag))\n       (when status (.status ctx (or status :200)))\n       (when body (.call (aget ctx (name content-type)) ctx body))))\n\n(defn resolve-body [options args]\n  (if (fn? options)\n    (resolve-body-fn options args)\n    (resolve-body-map options args)))\n\n(defn mount\n  [mock-map]\n  (map (fn [[url url-config]]\n         (let [[method options] (apply vec url-config)\n               rest-method (aget msw/rest (name method))]\n           (.call rest-method msw/rest url\n                  (fn [& args]\n                    (resolve-body options args)))))\n       mock-map))\n"]}