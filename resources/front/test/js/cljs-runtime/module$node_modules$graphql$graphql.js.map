{
"version":3,
"file":"module$node_modules$graphql$graphql.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0ChGC,QAASA,YAAW,CAACC,IAAD,CAAO,CAEN,CAAnB,CAAAC,SAAUC,CAAAA,MAAV,EACE,GAAIC,UAAWC,CAAAA,SAAf,EACE,CAAA,CADF,CAEE,qGAFF,CAIF,OAAM,CACJC,MADI,CAEJC,MAFI,CAGJC,SAHI,CAIJC,YAJI,CAKJC,cALI,CAMJC,aANI,CAOJC,aAPI,CAQJC,YARI,CAAA,CASFZ,IAEJ,KAAMa,uBAAyB,GAAIC,SAAUC,CAAAA,cAAd,EAA8BV,MAA9B,CAE/B,IAAoC,CAApC,CAAIQ,sBAAuBX,CAAAA,MAA3B,CACE,MAAO,CACLc,OAAQH,sBADH,CAKT;IAAII,QAEJ,IAAI,CACFA,QAAA,CAAW,GAAIC,OAAQC,CAAAA,KAAZ,EAAmBb,MAAnB,CADT,CAEF,MAAOc,WAAP,CAAoB,CACpB,MAAO,CACLJ,OAAQ,CAACI,WAAD,CADH,CADa,CAMhBC,sBAAAA,CAAmB,GAAIC,UAAWC,CAAAA,QAAf,EAAyBlB,MAAzB,CAAiCY,QAAjC,CAEzB,OAA8B,EAA9B,CAAII,sBAAiBnB,CAAAA,MAArB,CACS,CACLc,OAAQK,sBADH,CADT,CAMO,GAAIG,QAASC,CAAAA,OAAb,EAAsB,CAC3BpB,MAD2B,CAE3BY,QAF2B,CAG3BV,SAH2B,CAI3BC,YAJ2B,CAK3BC,cAL2B,CAM3BC,aAN2B,CAO3BC,aAP2B,CAQ3BC,YAR2B,CAAtB,CA5CkB,CAvC3Bc,MAAOC,CAAAA,cAAP,CAAsB7B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C8B,MAAO,CAAA,CADoC,CAA7C,CAGA9B,QAAQ+B,CAAAA,OAAR,CAeAA,QAAgB,CAAC7B,IAAD,CAAO,CAErB,MAAO,KAAI8B,OAAJ,CAAaC,OAAD,EAAaA,OAAA,CAAQhC,WAAA,CAAYC,IAAZ,CAAR,CAAzB,CAFc,CAdvBF,QAAQkC,CAAAA,WAAR;AAyBAA,QAAoB,CAAChC,IAAD,CAAO,CACnBiC,IAAAA,CAASlC,WAAA,CAAYC,IAAZ,CAEf,IAAI,GAAIkC,UAAWC,CAAAA,SAAf,EAA0BF,IAA1B,CAAJ,CACE,KAAUG,MAAJ,CAAU,qDAAV,CAAN,CAGF,MAAOH,KAPkB,CAvB3B,KAAI9B,WAAaP,OAAA,CAAQ,+CAAR,CAAjB,CAEIsC,WAAatC,OAAA,CAAQ,+CAAR,CAFjB,CAIIsB,QAAUtB,OAAA,CAAQ,6CAAR,CAJd,CAMIkB,UAAYlB,OAAA,CAAQ,2CAAR,CANhB,CAQI0B,WAAa1B,OAAA,CAAQ,iDAAR,CARjB,CAUI4B,SAAW5B,OAAA,CAAQ,+CAAR,CAnBiF;",
"sources":["node_modules/graphql/graphql.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$graphql\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.graphql = graphql;\nexports.graphqlSync = graphqlSync;\n\nvar _devAssert = require('./jsutils/devAssert.js');\n\nvar _isPromise = require('./jsutils/isPromise.js');\n\nvar _parser = require('./language/parser.js');\n\nvar _validate = require('./type/validate.js');\n\nvar _validate2 = require('./validation/validate.js');\n\nvar _execute = require('./execution/execute.js');\n\nfunction graphql(args) {\n  // Always return a Promise for a consistent API.\n  return new Promise((resolve) => resolve(graphqlImpl(args)));\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nfunction graphqlSync(args) {\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\n\n  if ((0, _isPromise.isPromise)(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  } = args; // Validate Schema\n\n  const schemaValidationErrors = (0, _validate.validateSchema)(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors,\n    };\n  } // Parse\n\n  let document;\n\n  try {\n    document = (0, _parser.parse)(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError],\n    };\n  } // Validate\n\n  const validationErrors = (0, _validate2.validate)(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors,\n    };\n  } // Execute\n\n  return (0, _execute.execute)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  });\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","graphqlImpl","args","arguments","length","_devAssert","devAssert","schema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","schemaValidationErrors","_validate","validateSchema","errors","document","_parser","parse","syntaxError","validationErrors","_validate2","validate","_execute","execute","Object","defineProperty","value","graphql","Promise","resolve","graphqlSync","result","_isPromise","isPromise","Error"]
}
