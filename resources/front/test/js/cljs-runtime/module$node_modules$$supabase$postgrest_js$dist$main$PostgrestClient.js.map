{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestClient.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE7HC,MAAAA,CAAmB,IAAnBA,EAA2B,IAAKA,CAAAA,eAAhCA,EAAoD,QAAS,CAACC,GAAD,CAAM,CACnE,MAAQA,IAAD,EAAQA,GAAIC,CAAAA,UAAZ,CAA0BD,GAA1B,CAAgC,CAAE,UAAWA,GAAb,CAD4B,CAGvEE,OAAOC,CAAAA,cAAP,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAAEM,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,wBAA0BN,MAAA,CAAgBH,OAAA,CAAQ,4EAAR,CAAhB,CAAhC,CACMU,yBAA2BP,MAAA,CAAgBH,OAAA,CAAQ,6EAAR,CAAhB,CADjC;AAEMW,YAAcX,OAAA,CAAQ,gEAAR,CAWpB,MAAMY,gBAAN,CAWIC,WAAW,CAACC,GAAD,CAAM,CAAEC,OAAA,CAAU,EAAZ,CAAgBC,MAAhB,CAAwBC,KAAxB,CAAA,CAAmC,EAAzC,CAA6C,CACpD,IAAKH,CAAAA,GAAL,CAAWA,GACX,KAAKC,CAAAA,OAAL,CAAeT,MAAOY,CAAAA,MAAP,CAAcZ,MAAOY,CAAAA,MAAP,CAAc,EAAd,CAAkBP,WAAYQ,CAAAA,eAA9B,CAAd,CAA8DJ,OAA9D,CACf,KAAKC,CAAAA,MAAL,CAAcA,MACd,KAAKC,CAAAA,KAAL,CAAaA,KAJuC,CAWxDG,IAAI,CAACC,QAAD,CAAW,CACLP,QAAAA,CAAM,IAAIQ,GAAJ,CAAS,GAAE,IAAKR,CAAAA,GAAP,IAAcO,QAAd,EAAT,CACZ,OAAO,KAAIZ,uBAAwBc,CAAAA,OAA5B,CAAoCT,QAApC,CAAyC,CAC5CC,QAAST,MAAOY,CAAAA,MAAP,CAAc,EAAd,CAAkB,IAAKH,CAAAA,OAAvB,CADmC,CAE5CC,OAAQ,IAAKA,CAAAA,MAF+B,CAG5CC,MAAO,IAAKA,CAAAA,KAHgC,CAAzC,CAFI,CA6BfO,GAAG,CAACC,EAAD,CAAKC,IAAA,CAAO,EAAZ,CAAgB,CAAEC,IAAA,CAAO,CAAA,CAAT,CAAgBC,KAAhB,CAAA;AAA2B,EAA3C,CAA+C,CAE9C,MAAMd,IAAM,IAAIQ,GAAJ,CAAS,GAAE,IAAKR,CAAAA,GAAP,QAAkBW,EAAlB,EAAT,CACZ,KAAII,IACAF,KAAJ,EACIG,EACA,CADS,MACT,CAAAxB,MAAOyB,CAAAA,OAAP,CAAeL,IAAf,CAAqBM,CAAAA,OAArB,CAA6B,CAAC,CAACC,IAAD,CAAOzB,KAAP,CAAD,CAAA,EAAmB,CAC5CM,GAAIoB,CAAAA,YAAaC,CAAAA,MAAjB,CAAwBF,IAAxB,CAA+B,GAAEzB,KAAF,EAA/B,CAD4C,CAAhD,CAFJ,GAOIsB,EACA,CADS,MACT,CAAAD,IAAA,CAAOH,IARX,CAUMX,KAAAA,CAAUT,MAAOY,CAAAA,MAAP,CAAc,EAAd,CAAkB,IAAKH,CAAAA,OAAvB,CACZa,MAAJ,GACIb,IAAA,CAAA,MADJ,CACyB,SAAQa,KAAR,EADzB,CAGA,OAAO,KAAIlB,wBAAyBa,CAAAA,OAA7B,CAAqC,CACxCO,OAAAA,EADwC,CAExChB,GAFwC,CAGxCC,QAAAA,IAHwC,CAIxCC,OAAQ,IAAKA,CAAAA,MAJ2B,CAKxCa,IALwC,CAMxCZ,MAAO,IAAKA,CAAAA,KAN4B,CAOxCmB,WAAY,CAAA,CAP4B,CAArC,CAlBuC,CAnDtD,CAgFAlC,OAAQqB,CAAAA,OAAR,CAAkBX,eAnG+G;",
"sources":["node_modules/@supabase/postgrest-js/dist/main/PostgrestClient.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestClient\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestQueryBuilder_1 = __importDefault(require(\"./PostgrestQueryBuilder\"));\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nconst constants_1 = require(\"./constants\");\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nclass PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder_1.default(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head) {\n            method = 'HEAD';\n            Object.entries(args).forEach(([name, value]) => {\n                url.searchParams.append(name, `${value}`);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url,\n            headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestClient;\n//# sourceMappingURL=PostgrestClient.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","PostgrestQueryBuilder_1","PostgrestFilterBuilder_1","constants_1","PostgrestClient","constructor","url","headers","schema","fetch","assign","DEFAULT_HEADERS","from","relation","URL","default","rpc","fn","args","head","count","body","method","entries","forEach","name","searchParams","append","allowEmpty"]
}
