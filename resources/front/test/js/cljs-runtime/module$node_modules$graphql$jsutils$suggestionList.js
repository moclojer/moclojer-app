shadow$provide.module$node_modules$graphql$jsutils$suggestionList=function(global,require,module,exports){function stringToArray(str){const strLength=str.length,array=Array(strLength);for(let i=0;i<strLength;++i)array[i]=str.charCodeAt(i);return array}Object.defineProperty(exports,"__esModule",{value:!0});exports.suggestionList=function(input,options){const optionsByDistance=Object.create(null),lexicalDistance=new LexicalDistance(input);input=Math.floor(.4*input.length)+1;for(const option of options)options=
lexicalDistance.measure(option,input),void 0!==options&&(optionsByDistance[option]=options);return Object.keys(optionsByDistance).sort((a,b)=>{const distanceDiff=optionsByDistance[a]-optionsByDistance[b];return 0!==distanceDiff?distanceDiff:(0,_naturalCompare.naturalCompare)(a,b)})};var _naturalCompare=require("module$node_modules$graphql$jsutils$naturalCompare");class LexicalDistance{constructor(input){this._input=input;this._inputLowerCase=input.toLowerCase();this._inputArray=stringToArray(this._inputLowerCase);
this._rows=[Array(input.length+1).fill(0),Array(input.length+1).fill(0),Array(input.length+1).fill(0)]}measure(option,threshold){if(this._input===option)return 0;option=option.toLowerCase();if(this._inputLowerCase===option)return 1;option=stringToArray(option);let b=this._inputArray;if(option.length<b.length){var tmp=option;option=b;b=tmp}tmp=option.length;const bLength=b.length;if(!(tmp-bLength>threshold)){var rows=this._rows;for(var j$jscomp$0=0;j$jscomp$0<=bLength;j$jscomp$0++)rows[0][j$jscomp$0]=
j$jscomp$0;for(j$jscomp$0=1;j$jscomp$0<=tmp;j$jscomp$0++){const upRow=rows[(j$jscomp$0-1)%3],currentRow=rows[j$jscomp$0%3];let smallestCell=currentRow[0]=j$jscomp$0;for(let j=1;j<=bLength;j++){let currentCell=Math.min(upRow[j]+1,currentRow[j-1]+1,upRow[j-1]+(option[j$jscomp$0-1]===b[j-1]?0:1));1<j$jscomp$0&&1<j&&option[j$jscomp$0-1]===b[j-2]&&option[j$jscomp$0-2]===b[j-1]&&(currentCell=Math.min(currentCell,rows[(j$jscomp$0-2)%3][j-2]+1));currentCell<smallestCell&&(smallestCell=currentCell);currentRow[j]=
currentCell}if(smallestCell>threshold)return}option=rows[tmp%3][bLength];return option<=threshold?option:void 0}}}}
//# sourceMappingURL=module$node_modules$graphql$jsutils$suggestionList.js.map
