shadow$provide.module$node_modules$graphql$validation$rules$UniqueFieldDefinitionNamesRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.UniqueFieldDefinitionNamesRule=function(context){function checkFieldUniqueness(node){var _node$fields;const typeName=node.name.value;knownFieldNames[typeName]||(knownFieldNames[typeName]=Object.create(null));node=null!==(_node$fields=node.fields)&&void 0!==_node$fields?_node$fields:[];_node$fields=knownFieldNames[typeName];
for(const fieldDef of node){node=fieldDef.name.value;var JSCompiler_inline_result=existingTypeMap[typeName];var fieldName=node;JSCompiler_inline_result=(0,_definition.isObjectType)(JSCompiler_inline_result)||(0,_definition.isInterfaceType)(JSCompiler_inline_result)||(0,_definition.isInputObjectType)(JSCompiler_inline_result)?null!=JSCompiler_inline_result.getFields()[fieldName]:!1;JSCompiler_inline_result?context.reportError(new _GraphQLError.GraphQLError(`Field "${typeName}.${node}" already exists in the schema. It cannot also be defined in this type extension.`,
{nodes:fieldDef.name})):_node$fields[node]?context.reportError(new _GraphQLError.GraphQLError(`Field "${typeName}.${node}" can only be defined once.`,{nodes:[_node$fields[node],fieldDef.name]})):_node$fields[node]=fieldDef.name}return!1}const schema=context.getSchema(),existingTypeMap=schema?schema.getTypeMap():Object.create(null),knownFieldNames=Object.create(null);return{InputObjectTypeDefinition:checkFieldUniqueness,InputObjectTypeExtension:checkFieldUniqueness,InterfaceTypeDefinition:checkFieldUniqueness,
InterfaceTypeExtension:checkFieldUniqueness,ObjectTypeDefinition:checkFieldUniqueness,ObjectTypeExtension:checkFieldUniqueness}};var _GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_definition=require("module$node_modules$graphql$type$definition")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$UniqueFieldDefinitionNamesRule.js.map
