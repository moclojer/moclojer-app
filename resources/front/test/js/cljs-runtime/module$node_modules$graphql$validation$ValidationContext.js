shadow$provide.module$node_modules$graphql$validation$ValidationContext=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.ValidationContext=exports.SDLValidationContext=exports.ASTValidationContext=void 0;var _kinds=require("module$node_modules$graphql$language$kinds"),_visitor=require("module$node_modules$graphql$language$visitor"),_TypeInfo=require("module$node_modules$graphql$utilities$TypeInfo");class ASTValidationContext{constructor(ast,onError){this._ast=
ast;this._fragments=void 0;this._fragmentSpreads=new Map;this._recursivelyReferencedFragments=new Map;this._onError=onError}get [Symbol.toStringTag](){return"ASTValidationContext"}reportError(error){this._onError(error)}getDocument(){return this._ast}getFragment(name){let fragments;if(this._fragments)fragments=this._fragments;else{fragments=Object.create(null);for(const defNode of this.getDocument().definitions)defNode.kind===_kinds.Kind.FRAGMENT_DEFINITION&&(fragments[defNode.name.value]=defNode);
this._fragments=fragments}return fragments[name]}getFragmentSpreads(node){let spreads=this._fragmentSpreads.get(node);if(!spreads){spreads=[];const setsToVisit=[node];let set;for(;set=setsToVisit.pop();)for(const selection of set.selections)selection.kind===_kinds.Kind.FRAGMENT_SPREAD?spreads.push(selection):selection.selectionSet&&setsToVisit.push(selection.selectionSet);this._fragmentSpreads.set(node,spreads)}return spreads}getRecursivelyReferencedFragments(operation){let fragments=this._recursivelyReferencedFragments.get(operation);
if(!fragments){fragments=[];const collectedNames=Object.create(null),nodesToVisit=[operation.selectionSet];for(var node;node=nodesToVisit.pop();)for(const spread of this.getFragmentSpreads(node))if(node=spread.name.value,!0!==collectedNames[node]&&(collectedNames[node]=!0,node=this.getFragment(node)))fragments.push(node),nodesToVisit.push(node.selectionSet);this._recursivelyReferencedFragments.set(operation,fragments)}return fragments}}exports.ASTValidationContext=ASTValidationContext;class SDLValidationContext extends ASTValidationContext{constructor(ast,
schema,onError){super(ast,onError);this._schema=schema}get [Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}}exports.SDLValidationContext=SDLValidationContext;class ValidationContext extends ASTValidationContext{constructor(schema,ast,typeInfo,onError){super(ast,onError);this._schema=schema;this._typeInfo=typeInfo;this._variableUsages=new Map;this._recursiveVariableUsages=new Map}get [Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(node){let usages=
this._variableUsages.get(node);if(!usages){const newUsages=[],typeInfo=new _TypeInfo.TypeInfo(this._schema);(0,_visitor.visit)(node,(0,_TypeInfo.visitWithTypeInfo)(typeInfo,{VariableDefinition:()=>!1,Variable(variable){newUsages.push({node:variable,type:typeInfo.getInputType(),defaultValue:typeInfo.getDefaultValue()})}}));usages=newUsages;this._variableUsages.set(node,usages)}return usages}getRecursiveVariableUsages(operation){let usages=this._recursiveVariableUsages.get(operation);if(!usages){usages=
this.getVariableUsages(operation);for(const frag of this.getRecursivelyReferencedFragments(operation))usages=usages.concat(this.getVariableUsages(frag));this._recursiveVariableUsages.set(operation,usages)}return usages}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}}
exports.ValidationContext=ValidationContext}
//# sourceMappingURL=module$node_modules$graphql$validation$ValidationContext.js.map
