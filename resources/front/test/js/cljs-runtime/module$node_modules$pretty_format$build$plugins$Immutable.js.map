{
"version":3,
"file":"module$node_modules$pretty_format$build$plugins$Immutable.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/pretty-format/build/plugins/Immutable.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pretty_format$build$plugins$Immutable\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _collections = require('../collections');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\n\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nconst getImmutableName = name => 'Immutable.' + name;\n\nconst printAsLeaf = name => '[' + name + ']';\n\nconst SPACE = ' ';\nconst LAZY = '\u2026'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '{' +\n      (0, _collections.printIteratorEntries)(\n        val.entries(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      '}'; // Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\n\nfunction getRecordEntries(val) {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n  };\n}\n\nconst printImmutableRecord = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer\n) => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth\n    ? printAsLeaf(name)\n    : name +\n        SPACE +\n        '{' +\n        (0, _collections.printIteratorEntries)(\n          getRecordEntries(val),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        ) +\n        '}';\n};\n\nconst printImmutableSeq = (val, config, indentation, depth, refs, printer) => {\n  const name = getImmutableName('Seq');\n\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n\n  if (val[IS_KEYED_SENTINEL]) {\n    return (\n      name +\n      SPACE +\n      '{' + // from Immutable collection of entries or from ECMAScript object\n      (val._iter || val._object\n        ? (0, _collections.printIteratorEntries)(\n            val.entries(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          )\n        : LAZY) +\n      '}'\n    );\n  }\n\n  return (\n    name +\n    SPACE +\n    '[' +\n    (val._iter || // from Immutable collection of values\n    val._array || // from ECMAScript array\n    val._collection || // from ECMAScript collection in immutable v4\n    val._iterable // from ECMAScript collection in immutable v3\n      ? (0, _collections.printIteratorValues)(\n          val.values(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        )\n      : LAZY) +\n    ']'\n  );\n};\n\nconst printImmutableValues = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '[' +\n      (0, _collections.printIteratorValues)(\n        val.values(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      ']';\n\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map'\n    );\n  }\n\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'List'\n    );\n  }\n\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set'\n    );\n  }\n\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'Stack'\n    );\n  }\n\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  } // For compatibility with immutable v3 and v4, let record be the default.\n\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n}; // Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\n\nexports.serialize = serialize;\n\nconst test = val =>\n  val &&\n  (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n\n};"],
"names":["shadow$provide","global","require","module","exports","getRecordEntries","val","i","next","_keys","length","key","done","value","get","undefined","Object","defineProperty","test","serialize","default","_collections","printImmutableValues","config","indentation","depth","refs","printer","type","maxDepth","SPACE","printIteratorValues","values","IS_MAP_SENTINEL","IS_ORDERED_SENTINEL","printIteratorEntries","entries","IS_LIST_SENTINEL","IS_SET_SENTINEL","IS_STACK_SENTINEL","IS_SEQ_SENTINEL","IS_KEYED_SENTINEL","_iter","_object","LAZY","_array","_collection","_iterable","name","_name","IS_ITERABLE_SENTINEL","IS_RECORD_SENTINEL","plugin"]
}
