shadow$provide.module$node_modules$graphql$utilities$extendSchema=function(global,require,module,exports){function extendSchemaImpl(schemaConfig,documentAST,options){function replaceType(type){return(0,_definition.isListType)(type)?new _definition.GraphQLList(replaceType(type.ofType)):(0,_definition.isNonNullType)(type)?new _definition.GraphQLNonNull(replaceType(type.ofType)):replaceNamedType(type)}function replaceNamedType(type){return typeMap[type.name]}function extendNamedType(type){if((0,_introspection.isIntrospectionType)(type)||
(0,_scalars.isSpecifiedScalarType)(type))return type;if((0,_definition.isScalarType)(type)){var _typeExtensionsMap$co2,config=type.toConfig();type=null!==(_typeExtensionsMap$co2=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co2?_typeExtensionsMap$co2:[];_typeExtensionsMap$co2=config.specifiedByURL;for(var extensionNode of type){var _getSpecifiedByURL;_typeExtensionsMap$co2=null!==(_getSpecifiedByURL=getSpecifiedByURL(extensionNode))&&void 0!==_getSpecifiedByURL?_getSpecifiedByURL:_typeExtensionsMap$co2}return new _definition.GraphQLScalarType({...config,
specifiedByURL:_typeExtensionsMap$co2,extensionASTNodes:config.extensionASTNodes.concat(type)})}if((0,_definition.isObjectType)(type))return extendObjectType(type);if((0,_definition.isInterfaceType)(type))return extendInterfaceType(type);if((0,_definition.isUnionType)(type))return extendUnionType(type);if((0,_definition.isEnumType)(type))return _getSpecifiedByURL=type.toConfig(),extensionNode=null!==(config=typeExtensionsMap[type.name])&&void 0!==config?config:[],new _definition.GraphQLEnumType({..._getSpecifiedByURL,
values:{..._getSpecifiedByURL.values,...buildEnumValueMap(extensionNode)},extensionASTNodes:_getSpecifiedByURL.extensionASTNodes.concat(extensionNode)});if((0,_definition.isInputObjectType)(type))return extendInputObjectType(type);(0,_invariant.invariant)(!1,"Unexpected type: "+(0,_inspect.inspect)(type))}function extendInputObjectType(type){var _typeExtensionsMap$co;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co?
_typeExtensionsMap$co:[];return new _definition.GraphQLInputObjectType({...config,fields:()=>({...(0,_mapValue.mapValue)(config.fields,field=>({...field,type:replaceType(field.type)})),...buildInputFieldMap(extensions)}),extensionASTNodes:config.extensionASTNodes.concat(extensions)})}function extendObjectType(type){var _typeExtensionsMap$co3;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co3=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co3?_typeExtensionsMap$co3:
[];return new _definition.GraphQLObjectType({...config,interfaces:()=>[...type.getInterfaces().map(replaceNamedType),...buildInterfaces(extensions)],fields:()=>({...(0,_mapValue.mapValue)(config.fields,extendField),...buildFieldMap(extensions)}),extensionASTNodes:config.extensionASTNodes.concat(extensions)})}function extendInterfaceType(type){var _typeExtensionsMap$co4;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co4=typeExtensionsMap[config.name])&&void 0!==_typeExtensionsMap$co4?
_typeExtensionsMap$co4:[];return new _definition.GraphQLInterfaceType({...config,interfaces:()=>[...type.getInterfaces().map(replaceNamedType),...buildInterfaces(extensions)],fields:()=>({...(0,_mapValue.mapValue)(config.fields,extendField),...buildFieldMap(extensions)}),extensionASTNodes:config.extensionASTNodes.concat(extensions)})}function extendUnionType(type){var _typeExtensionsMap$co5;const config=type.toConfig(),extensions=null!==(_typeExtensionsMap$co5=typeExtensionsMap[config.name])&&void 0!==
_typeExtensionsMap$co5?_typeExtensionsMap$co5:[];return new _definition.GraphQLUnionType({...config,types:()=>[...type.getTypes().map(replaceNamedType),...buildUnionTypes(extensions)],extensionASTNodes:config.extensionASTNodes.concat(extensions)})}function extendField(field){return{...field,type:replaceType(field.type),args:field.args&&(0,_mapValue.mapValue)(field.args,extendArg)}}function extendArg(arg){return{...arg,type:replaceType(arg.type)}}function getOperationTypes(nodes){const opTypes={};
for(const node of nodes){var _node$operationTypes;nodes=null!==(_node$operationTypes=node.operationTypes)&&void 0!==_node$operationTypes?_node$operationTypes:[];for(const operationType of nodes)opTypes[operationType.operation]=getNamedType(operationType.type)}return opTypes}function getNamedType(node){var _stdTypeMap$name2;node=node.name.value;const type=null!==(_stdTypeMap$name2=stdTypeMap[node])&&void 0!==_stdTypeMap$name2?_stdTypeMap$name2:typeMap[node];if(void 0===type)throw Error(`Unknown type: "${node}".`);
return type}function getWrappedType(node){return node.kind===_kinds.Kind.LIST_TYPE?new _definition.GraphQLList(getWrappedType(node.type)):node.kind===_kinds.Kind.NON_NULL_TYPE?new _definition.GraphQLNonNull(getWrappedType(node.type)):getNamedType(node)}function buildFieldMap(nodes){const fieldConfigMap=Object.create(null);for(const node of nodes){var _node$fields;nodes=null!==(_node$fields=node.fields)&&void 0!==_node$fields?_node$fields:[];for(const field of nodes){var _field$description;fieldConfigMap[field.name.value]=
{type:getWrappedType(field.type),description:null===(_field$description=field.description)||void 0===_field$description?void 0:_field$description.value,args:buildArgumentMap(field.arguments),deprecationReason:getDeprecationReason(field),astNode:field}}}return fieldConfigMap}function buildArgumentMap(args){var argsNodes=null!==args&&void 0!==args?args:[];args=Object.create(null);for(const arg of argsNodes){var _arg$description;argsNodes=getWrappedType(arg.type);args[arg.name.value]={type:argsNodes,
description:null===(_arg$description=arg.description)||void 0===_arg$description?void 0:_arg$description.value,defaultValue:(0,_valueFromAST.valueFromAST)(arg.defaultValue,argsNodes),deprecationReason:getDeprecationReason(arg),astNode:arg}}return args}function buildInputFieldMap(nodes){const inputFieldMap=Object.create(null);for(const node of nodes){var _node$fields2;nodes=null!==(_node$fields2=node.fields)&&void 0!==_node$fields2?_node$fields2:[];for(const field of nodes){var _field$description2;
nodes=getWrappedType(field.type);inputFieldMap[field.name.value]={type:nodes,description:null===(_field$description2=field.description)||void 0===_field$description2?void 0:_field$description2.value,defaultValue:(0,_valueFromAST.valueFromAST)(field.defaultValue,nodes),deprecationReason:getDeprecationReason(field),astNode:field}}}return inputFieldMap}function buildEnumValueMap(nodes){const enumValueMap=Object.create(null);for(const node of nodes){var _node$values;nodes=null!==(_node$values=node.values)&&
void 0!==_node$values?_node$values:[];for(const value of nodes){var _value$description;enumValueMap[value.name.value]={description:null===(_value$description=value.description)||void 0===_value$description?void 0:_value$description.value,deprecationReason:getDeprecationReason(value),astNode:value}}}return enumValueMap}function buildInterfaces(nodes){return nodes.flatMap(node=>{var _node$interfaces$map,_node$interfaces;return null!==(_node$interfaces$map=null===(_node$interfaces=node.interfaces)||
void 0===_node$interfaces?void 0:_node$interfaces.map(getNamedType))&&void 0!==_node$interfaces$map?_node$interfaces$map:[]})}function buildUnionTypes(nodes){return nodes.flatMap(node=>{var _node$types$map,_node$types;return null!==(_node$types$map=null===(_node$types=node.types)||void 0===_node$types?void 0:_node$types.map(getNamedType))&&void 0!==_node$types$map?_node$types$map:[]})}function buildType(astNode){var _typeExtensionsMap$na;const name=astNode.name.value,extensionASTNodes=null!==(_typeExtensionsMap$na=
typeExtensionsMap[name])&&void 0!==_typeExtensionsMap$na?_typeExtensionsMap$na:[];switch(astNode.kind){case _kinds.Kind.OBJECT_TYPE_DEFINITION:var _astNode$description;const allNodes=[astNode,...extensionASTNodes];return new _definition.GraphQLObjectType({name,description:null===(_astNode$description=astNode.description)||void 0===_astNode$description?void 0:_astNode$description.value,interfaces:()=>buildInterfaces(allNodes),fields:()=>buildFieldMap(allNodes),astNode,extensionASTNodes});case _kinds.Kind.INTERFACE_TYPE_DEFINITION:var _astNode$description2;
const allNodes$jscomp$0=[astNode,...extensionASTNodes];return new _definition.GraphQLInterfaceType({name,description:null===(_astNode$description2=astNode.description)||void 0===_astNode$description2?void 0:_astNode$description2.value,interfaces:()=>buildInterfaces(allNodes$jscomp$0),fields:()=>buildFieldMap(allNodes$jscomp$0),astNode,extensionASTNodes});case _kinds.Kind.ENUM_TYPE_DEFINITION:var _astNode$description3;_typeExtensionsMap$na=[astNode,...extensionASTNodes];return new _definition.GraphQLEnumType({name,
description:null===(_astNode$description3=astNode.description)||void 0===_astNode$description3?void 0:_astNode$description3.value,values:buildEnumValueMap(_typeExtensionsMap$na),astNode,extensionASTNodes});case _kinds.Kind.UNION_TYPE_DEFINITION:var _astNode$description4;const allNodes$jscomp$1=[astNode,...extensionASTNodes];return new _definition.GraphQLUnionType({name,description:null===(_astNode$description4=astNode.description)||void 0===_astNode$description4?void 0:_astNode$description4.value,
types:()=>buildUnionTypes(allNodes$jscomp$1),astNode,extensionASTNodes});case _kinds.Kind.SCALAR_TYPE_DEFINITION:var _astNode$description5;return new _definition.GraphQLScalarType({name,description:null===(_astNode$description5=astNode.description)||void 0===_astNode$description5?void 0:_astNode$description5.value,specifiedByURL:getSpecifiedByURL(astNode),astNode,extensionASTNodes});case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:var _astNode$description6;const allNodes$jscomp$2=[astNode,...extensionASTNodes];
return new _definition.GraphQLInputObjectType({name,description:null===(_astNode$description6=astNode.description)||void 0===_astNode$description6?void 0:_astNode$description6.value,fields:()=>buildInputFieldMap(allNodes$jscomp$2),astNode,extensionASTNodes})}}var _schemaDef,_schemaDef$descriptio,_schemaDef2,_options$assumeValid,typeDefs=[];const typeExtensionsMap=Object.create(null),directiveDefs=[];let schemaDef;const schemaExtensions=[];for(const def of documentAST.definitions)if(def.kind===_kinds.Kind.SCHEMA_DEFINITION)schemaDef=
def;else if(def.kind===_kinds.Kind.SCHEMA_EXTENSION)schemaExtensions.push(def);else if((0,_predicates.isTypeDefinitionNode)(def))typeDefs.push(def);else if((0,_predicates.isTypeExtensionNode)(def)){documentAST=def.name.value;const existingTypeExtensions=typeExtensionsMap[documentAST];typeExtensionsMap[documentAST]=existingTypeExtensions?existingTypeExtensions.concat([def]):[def]}else def.kind===_kinds.Kind.DIRECTIVE_DEFINITION&&directiveDefs.push(def);if(0===Object.keys(typeExtensionsMap).length&&
0===typeDefs.length&&0===directiveDefs.length&&0===schemaExtensions.length&&null==schemaDef)return schemaConfig;const typeMap=Object.create(null);for(const existingType of schemaConfig.types)typeMap[existingType.name]=extendNamedType(existingType);for(const typeNode of typeDefs){var _stdTypeMap$name;typeDefs=typeNode.name.value;typeMap[typeDefs]=null!==(_stdTypeMap$name=stdTypeMap[typeDefs])&&void 0!==_stdTypeMap$name?_stdTypeMap$name:buildType(typeNode)}_stdTypeMap$name={query:schemaConfig.query&&
replaceNamedType(schemaConfig.query),mutation:schemaConfig.mutation&&replaceNamedType(schemaConfig.mutation),subscription:schemaConfig.subscription&&replaceNamedType(schemaConfig.subscription),...(schemaDef&&getOperationTypes([schemaDef])),...getOperationTypes(schemaExtensions)};return{description:null===(_schemaDef=schemaDef)||void 0===_schemaDef?void 0:null===(_schemaDef$descriptio=_schemaDef.description)||void 0===_schemaDef$descriptio?void 0:_schemaDef$descriptio.value,..._stdTypeMap$name,types:Object.values(typeMap),
directives:[...schemaConfig.directives.map(function(directive){directive=directive.toConfig();return new _directives.GraphQLDirective({...directive,args:(0,_mapValue.mapValue)(directive.args,extendArg)})}),...directiveDefs.map(function(node){var _node$description;return new _directives.GraphQLDirective({name:node.name.value,description:null===(_node$description=node.description)||void 0===_node$description?void 0:_node$description.value,locations:node.locations.map(({value})=>value),isRepeatable:node.repeatable,
args:buildArgumentMap(node.arguments),astNode:node})})],extensions:Object.create(null),astNode:null!==(_schemaDef2=schemaDef)&&void 0!==_schemaDef2?_schemaDef2:schemaConfig.astNode,extensionASTNodes:schemaConfig.extensionASTNodes.concat(schemaExtensions),assumeValid:null!==(_options$assumeValid=null===options||void 0===options?void 0:options.assumeValid)&&void 0!==_options$assumeValid?_options$assumeValid:!1}}function getDeprecationReason(node){node=(0,_values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective,
node);return null===node||void 0===node?void 0:node.reason}function getSpecifiedByURL(node){node=(0,_values.getDirectiveValues)(_directives.GraphQLSpecifiedByDirective,node);return null===node||void 0===node?void 0:node.url}Object.defineProperty(exports,"__esModule",{value:!0});exports.extendSchema=function(schema,documentAST,options){(0,_schema.assertSchema)(schema);null!=documentAST&&documentAST.kind===_kinds.Kind.DOCUMENT||(0,_devAssert.devAssert)(!1,"Must provide valid Document AST.");!0!==(null===
options||void 0===options?void 0:options.assumeValid)&&!0!==(null===options||void 0===options?void 0:options.assumeValidSDL)&&(0,_validate.assertValidSDLExtension)(documentAST,schema);const schemaConfig=schema.toConfig();documentAST=extendSchemaImpl(schemaConfig,documentAST,options);return schemaConfig===documentAST?schema:new _schema.GraphQLSchema(documentAST)};exports.extendSchemaImpl=extendSchemaImpl;var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),_inspect=require("module$node_modules$graphql$jsutils$inspect"),
_invariant=require("module$node_modules$graphql$jsutils$invariant");global=require("module$node_modules$graphql$jsutils$keyMap");var _mapValue=require("module$node_modules$graphql$jsutils$mapValue"),_kinds=require("module$node_modules$graphql$language$kinds"),_predicates=require("module$node_modules$graphql$language$predicates"),_definition=require("module$node_modules$graphql$type$definition"),_directives=require("module$node_modules$graphql$type$directives"),_introspection=require("module$node_modules$graphql$type$introspection"),
_scalars=require("module$node_modules$graphql$type$scalars"),_schema=require("module$node_modules$graphql$type$schema"),_validate=require("module$node_modules$graphql$validation$validate"),_values=require("module$node_modules$graphql$execution$values"),_valueFromAST=require("module$node_modules$graphql$utilities$valueFromAST");const stdTypeMap=(0,global.keyMap)([..._scalars.specifiedScalarTypes,..._introspection.introspectionTypes],type=>type.name)}
//# sourceMappingURL=module$node_modules$graphql$utilities$extendSchema.js.map
