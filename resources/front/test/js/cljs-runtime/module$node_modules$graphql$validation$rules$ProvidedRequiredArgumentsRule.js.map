{
"version":3,
"file":"module$node_modules$graphql$validation$rules$ProvidedRequiredArgumentsRule.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAA,0EAAA,CAA+F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6EvIC,QAASA,0CAAyC,CAACC,OAAD,CAAU,CAC1D,IAAIC,qBAEJ,OAAMC,gBAAkBC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CACxB,KAAMC,OAASL,OAAQM,CAAAA,SAAR,EACTC,OAAAA,CAI8B,IAHlC,IAACN,qBAAD,CACa,IAAX,GAAAI,MAAA,EAA8B,IAAK,EAAnC,GAAmBA,MAAnB,CACI,IAAK,EADT,CAEIA,MAAOG,CAAAA,aAAP,EAHN,GAGoE,IAAK,EAHzE,GAG0CP,qBAH1C,CAIIA,qBAJJ,CAKIQ,WAAYC,CAAAA,mBAElB,KAAK,MAAMC,SAAX,GAAwBJ,OAAxB,CACEL,eAAA,CAAgBS,SAAUC,CAAAA,IAA1B,CAAA;AAAkC,GAAIC,OAAQC,CAAAA,MAAZ,EAChCH,SAAUI,CAAAA,IAAKC,CAAAA,MAAf,CAAsBC,WAAYC,CAAAA,kBAAlC,CADgC,CAE/BC,GAAD,EAASA,GAAIP,CAAAA,IAFmB,CAM9BQ,sBAAAA,CAAiBpB,OAAQqB,CAAAA,WAAR,EAAsBC,CAAAA,WAE7C,KAAK,MAAMC,GAAX,GAAkBH,sBAAlB,CACE,GAAIG,GAAIC,CAAAA,IAAR,GAAiBC,MAAOC,CAAAA,IAAKC,CAAAA,oBAA7B,CAAmD,CACjD,IAAIC,cAKEC,sBAAAA,CACiC,IAArC,IAACD,cAAD,CAAkBL,GAAIO,CAAAA,SAAtB,GAAgE,IAAK,EAArE,GAA6CF,cAA7C,CACIA,cADJ,CAEI,EACN1B,gBAAA,CAAgBqB,GAAIX,CAAAA,IAAKmB,CAAAA,KAAzB,CAAA,CAAkC,GAAIlB,OAAQC,CAAAA,MAAZ,EAChCe,qBAASb,CAAAA,MAAT,CAAgBgB,sBAAhB,CADgC,CAE/Bb,GAAD,EAASA,GAAIP,CAAAA,IAAKmB,CAAAA,KAFc,CAVe,CAiBrD,MAAO,CACLE,UAAW,CAETC,KAAK,CAACC,aAAD,CAAgB,CACnB,MAAMC;AAAgBD,aAAcvB,CAAAA,IAAKmB,CAAAA,KACzC,KAAMM,aAAenC,eAAA,CAAgBkC,aAAhB,CAErB,IAAIC,YAAJ,CAAkB,CAChB,IAAIC,qBAKJ,OAAMT,SACkD,IAAtD,IAACS,qBAAD,CAAyBH,aAAcL,CAAAA,SAAvC,GAC0B,IAAK,EAD/B,GACAQ,qBADA,CAEIA,qBAFJ,CAGI,EACAC,sBAAAA,CAAa,IAAIC,GAAJ,CAAQX,QAASY,CAAAA,GAAT,CAActB,GAAD,EAASA,GAAIP,CAAAA,IAAKmB,CAAAA,KAA/B,CAAR,CAEnB,KAAK,MAAM,CAACW,OAAD,CAAUC,MAAV,CAAX,EAAgCxC,OAAOyC,CAAAA,OAAP,CAAeP,YAAf,CAAhC,CACOE,qBAAWM,CAAAA,GAAX,CAAeH,OAAf,CAAL,GACQI,YAGN,CAHgB,GAAI7B,WAAY8B,CAAAA,MAAhB,EAAwBJ,MAAOK,CAAAA,IAA/B,CAAA,CACZ,GAAIC,QAASC,CAAAA,OAAb,EAAsBP,MAAOK,CAAAA,IAA7B,CADY,CAEZ,GAAIG,QAASC,CAAAA,KAAb,EAAoBT,MAAOK,CAAAA,IAA3B,CACJ;AAAAhD,OAAQqD,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,eAAcnB,aAAd,eAA0CM,OAA1C,cAA+DI,YAA/D,yCADH,CAEE,CACEU,MAAOrB,aADT,CAFF,CADF,CAJF,CAdc,CAJC,CAFZ,CADN,CAxCmD,CAiF5DH,QAASA,uBAAsB,CAACb,GAAD,CAAM,CACnC,MACEA,IAAI6B,CAAAA,IAAKxB,CAAAA,IADX,GACoBC,MAAOC,CAAAA,IAAK+B,CAAAA,aADhC,EACqE,IADrE,EACiDtC,GAAIuC,CAAAA,YAFlB,CA3JrCvD,MAAOwD,CAAAA,cAAP,CAAsB7D,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CiC,MAAO,CAAA,CADoC,CAA7C,CAGAjC,QAAQC,CAAAA,yCAAR,CACEA,yCACFD,QAAQ8D,CAAAA,6BAAR,CAsBAA,QAAsC,CAAC5D,OAAD,CAAU,CAC9C,MAAO,CAEL,GAAGD,yCAAA,CAA0CC,OAA1C,CAFE;AAGL6D,MAAO,CAEL3B,KAAK,CAAC4B,SAAD,CAAY,CACf,IAAIC,oBAEJ,OAAMC,SAAWhE,OAAQiE,CAAAA,WAAR,EAEjB,IAAI,CAACD,QAAL,CACE,MAAO,CAAA,CAGT,OAAME,aAAe,IAAI1B,GAAJ,CAE8B,IAAjD,IAACuB,oBAAD,CAAwBD,SAAUhC,CAAAA,SAAlC,GACyB,IAAK,EAD9B,GACAiC,oBADA,CAEI,IAAK,EAFT,CAGIA,oBAAqBtB,CAAAA,GAArB,CAA0BtB,GAAD,EAASA,GAAIP,CAAAA,IAAKmB,CAAAA,KAA3C,CALe,CAQrB,KAAK,MAAMY,MAAX,GAAqBqB,SAASjD,CAAAA,IAA9B,CAEI,CAACmD,YAAarB,CAAAA,GAAb,CAAiBF,MAAO/B,CAAAA,IAAxB,CADH,EAEE,GAAIK,WAAYC,CAAAA,kBAAhB,EAAoCyB,MAApC,CAFF,GAIQwB,oBACN,CADmB,GAAIlB,QAASC,CAAAA,OAAb,EAAsBP,MAAOK,CAAAA,IAA7B,CACnB,CAAAhD,OAAQqD,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,UAASS,QAASpD,CAAAA,IAAlB,eAAqC+B,MAAO/B,CAAAA,IAA5C,cAA8DuD,oBAA9D,yCADH;AAEE,CACEX,MAAOM,SADT,CAFF,CADF,CALF,CAlBa,CAFZ,CAHF,CADuC,CApBhD,KAAIb,SAAWrD,OAAA,CAAQ,6CAAR,CAAf,CAEIiB,QAAUjB,OAAA,CAAQ,4CAAR,CAFd,CAII0D,cAAgB1D,OAAA,CAAQ,gDAAR,CAJpB,CAMI6B,OAAS7B,OAAA,CAAQ,4CAAR,CANb,CAQIuD,SAAWvD,OAAA,CAAQ,8CAAR,CARf,CAUIqB,YAAcrB,OAAA,CAAQ,6CAAR,CAVlB,CAYIa,YAAcb,OAAA,CAAQ,6CAAR,CAtBqH;",
"sources":["node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$ProvidedRequiredArgumentsRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.ProvidedRequiredArgumentsOnDirectivesRule =\n  ProvidedRequiredArgumentsOnDirectivesRule;\nexports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _keyMap = require('../../jsutils/keyMap.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _directives = require('../../type/directives.js');\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nfunction ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (\n            !providedArgs.has(argDef.name) &&\n            (0, _definition.isRequiredArgument)(argDef)\n          ) {\n            const argTypeStr = (0, _inspect.inspect)(argDef.type);\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nfunction ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = (0, _keyMap.keyMap)(\n      directive.args.filter(_definition.isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = (0, _keyMap.keyMap)(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = (0, _definition.isType)(argDef.type)\n                ? (0, _inspect.inspect)(argDef.type)\n                : (0, _printer.print)(argDef.type);\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return (\n    arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null\n  );\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","ProvidedRequiredArgumentsOnDirectivesRule","context","_schema$getDirectives","requiredArgsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","_directives","specifiedDirectives","directive","name","_keyMap","keyMap","args","filter","_definition","isRequiredArgument","arg","astDefinitions","getDocument","definitions","def","kind","_kinds","Kind","DIRECTIVE_DEFINITION","_def$arguments","argNodes","arguments","value","isRequiredArgumentNode","Directive","leave","directiveNode","directiveName","requiredArgs","_directiveNode$argume","argNodeMap","Set","map","argName","argDef","entries","has","argType","isType","type","_inspect","inspect","_printer","print","reportError","_GraphQLError","GraphQLError","nodes","NON_NULL_TYPE","defaultValue","defineProperty","ProvidedRequiredArgumentsRule","Field","fieldNode","_fieldNode$arguments","fieldDef","getFieldDef","providedArgs","argTypeStr"]
}
