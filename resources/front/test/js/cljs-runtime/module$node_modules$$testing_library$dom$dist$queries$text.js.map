{
"version":3,
"file":"module$node_modules$$testing_library$dom$dist$queries$text.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@testing-library/dom/dist/queries/text.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$testing_library$dom$dist$queries$text\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;\nvar _queryHelpers = require(\"../query-helpers\");\nvar _helpers = require(\"../helpers\");\nvar _allUtils = require(\"./all-utils\");\nconst queryAllByText = (container, text, {\n  selector = '*',\n  exact = true,\n  collapseWhitespace,\n  trim,\n  ignore = (0, _allUtils.getConfig)().defaultIgnore,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  let baseArray = [];\n  if (typeof container.matches === 'function' && container.matches(selector)) {\n    baseArray = [container];\n  }\n  return [...baseArray, ...Array.from(container.querySelectorAll(selector))]\n  // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)\n  .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));\n};\nconst getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;\nconst getMissingError = (c, text, options = {}) => {\n  const {\n    collapseWhitespace,\n    trim,\n    normalizer,\n    selector\n  } = options;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const normalizedText = matchNormalizer(text.toString());\n  const isNormalizedDifferent = normalizedText !== text.toString();\n  const isCustomSelector = (selector ?? '*') !== '*';\n  return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;\n};\nconst queryAllByTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');\nexports.queryAllByText = queryAllByTextWithSuggestions;\nconst [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);\nexports.findByText = findByText;\nexports.findAllByText = findAllByText;\nexports.getByText = getByText;\nexports.getAllByText = getAllByText;\nexports.queryByText = queryByText;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","queryByText","queryAllByText","getByText","getAllByText","findByText","findAllByText","_queryHelpers","_helpers","_allUtils","container","text","selector","exact","collapseWhitespace","trim","ignore","getConfig","defaultIgnore","normalizer","checkContainerType","matcher","matches","fuzzyMatches","matchNormalizer","makeNormalizer","baseArray","Array","from","querySelectorAll","filter","node","getNodeText","queryAllByTextWithSuggestions","wrapAllByQueryWithSuggestion","name","buildQueries","c","getMultipleError","options","getMissingError","normalizedText","toString"]
}
