{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestBuilder.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@supabase/postgrest-js/dist/main/PostgrestBuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestBuilder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nclass PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.allowEmpty = builder.allowEmpty;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = cross_fetch_1.default;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => ({\n                error: {\n                    message: `FetchError: ${fetchError.message}`,\n                    details: '',\n                    hint: '',\n                    code: fetchError.code || '',\n                },\n                data: null,\n                count: null,\n                status: 0,\n                statusText: '',\n            }));\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\nexports.default = PostgrestBuilder;\n//# sourceMappingURL=PostgrestBuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","cross_fetch_1","PostgrestBuilder","constructor","builder","shouldThrowOnError","method","url","headers","schema","body","signal","allowEmpty","fetch","default","throwOnError","then","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","_a","_b","error","data","count","status","statusText","ok","text","parse","countHeader","match","contentRange","get","split","length","parseInt","Array","isArray","_d","message","_c","details","postgrestResponse","catch","fetchError","hint","code"]
}
