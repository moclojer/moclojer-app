shadow$provide.module$node_modules$graphql$validation$rules$UniqueArgumentDefinitionNamesRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.UniqueArgumentDefinitionNamesRule=function(context){function checkArgUniquenessPerField(typeNode){var _typeNode$fields;const typeName=typeNode.name.value;typeNode=null!==(_typeNode$fields=typeNode.fields)&&void 0!==_typeNode$fields?_typeNode$fields:[];for(const fieldDef of typeNode){var _fieldDef$arguments;
_typeNode$fields=fieldDef.name.value;typeNode=null!==(_fieldDef$arguments=fieldDef.arguments)&&void 0!==_fieldDef$arguments?_fieldDef$arguments:[];checkArgUniqueness(`${typeName}.${_typeNode$fields}`,typeNode)}return!1}function checkArgUniqueness(parentName,argumentNodes){argumentNodes=(0,_groupBy.groupBy)(argumentNodes,arg=>arg.name.value);for(const [argName,argNodes]of argumentNodes)1<argNodes.length&&context.reportError(new _GraphQLError.GraphQLError(`Argument "${parentName}(${argName}:)" can only be defined once.`,
{nodes:argNodes.map(node=>node.name)}));return!1}return{DirectiveDefinition(directiveNode){var _directiveNode$argume;const argumentNodes=null!==(_directiveNode$argume=directiveNode.arguments)&&void 0!==_directiveNode$argume?_directiveNode$argume:[];return checkArgUniqueness(`@${directiveNode.name.value}`,argumentNodes)},InterfaceTypeDefinition:checkArgUniquenessPerField,InterfaceTypeExtension:checkArgUniquenessPerField,ObjectTypeDefinition:checkArgUniquenessPerField,ObjectTypeExtension:checkArgUniquenessPerField}};
var _groupBy=require("module$node_modules$graphql$jsutils$groupBy"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$UniqueArgumentDefinitionNamesRule.js.map
