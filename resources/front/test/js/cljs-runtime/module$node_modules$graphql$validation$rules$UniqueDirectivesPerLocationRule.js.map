{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueDirectivesPerLocationRule.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,4EAAA,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,+BAAR,CAkBAA,QAAwC,CAACC,OAAD,CAAU,CAChD,MAAMC,mBAAqBL,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAC3B,KAAMC,OAASH,OAAQI,CAAAA,SAAR,EACTC,OAAAA,CAAoBF,MAAA,CACtBA,MAAOG,CAAAA,aAAP,EADsB,CAEtBC,WAAYC,CAAAA,mBAEhB,KAAK,IAAMC,kBAAX,GAAwBJ,OAAxB,CACEJ,kBAAA,CAAmBQ,kBAAUC,CAAAA,IAA7B,CAAA,CAAqC,CAACD,kBAAUE,CAAAA,YAG5CC;kBAAAA,CAAiBZ,OAAQa,CAAAA,WAAR,EAAsBC,CAAAA,WAE7C,KAAK,MAAMC,GAAX,GAAkBH,mBAAlB,CACMG,GAAIC,CAAAA,IAAR,GAAiBC,MAAOC,CAAAA,IAAKC,CAAAA,oBAA7B,GACElB,kBAAA,CAAmBc,GAAIL,CAAAA,IAAKZ,CAAAA,KAA5B,CADF,CACuC,CAACiB,GAAIK,CAAAA,UAD5C,CAKF,OAAMC,iBAAmBzB,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAAzB,CACMoB,kBAAoB1B,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAC1B,OAAO,CAILqB,KAAK,CAACC,IAAD,CAAO,CACV,GAAM,YAAN,EAAsBA,KAAtB,EAAgCA,IAAKC,CAAAA,UAArC,CAAA,CAMA,GACED,IAAKR,CAAAA,IADP,GACgBC,MAAOC,CAAAA,IAAKQ,CAAAA,iBAD5B,EAEEF,IAAKR,CAAAA,IAFP,GAEgBC,MAAOC,CAAAA,IAAKS,CAAAA,gBAF5B,CAIE,IAAAC,eAAiBP,gBAJnB,KAKO,IACL,GAAIQ,WAAYC,CAAAA,oBAAhB,EAAsCN,IAAtC,CADK;AAEL,GAAIK,WAAYE,CAAAA,mBAAhB,EAAqCP,IAArC,CAFK,CAGL,CACA,MAAMQ,SAAWR,IAAKd,CAAAA,IAAKZ,CAAAA,KAC3B8B,eAAA,CAAiBN,iBAAA,CAAkBU,QAAlB,CAEMC,KAAAA,EAAvB,GAAIL,cAAJ,GACEN,iBAAA,CAAkBU,QAAlB,CADF,CACgCJ,cADhC,CACiDhC,MAAOM,CAAAA,MAAP,CAAc,IAAd,CADjD,CAJA,CAHK,IAWL0B,eAAA,CAAiBhC,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAGnB,KAAK,MAAMO,SAAX,GAAwBe,KAAKC,CAAAA,UAA7B,CACQS,IAEN,CAFsBzB,SAAUC,CAAAA,IAAKZ,CAAAA,KAErC,CAAIG,kBAAA,CAAmBiC,IAAnB,CAAJ,GACMN,cAAA,CAAeM,IAAf,CAAJ,CACElC,OAAQmC,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,mBAAkBH,IAAlB,2CADH,CAEE,CACEI,MAAO,CAACV,cAAA,CAAeM,IAAf,CAAD;AAAgCzB,SAAhC,CADT,CAFF,CADF,CADF,CAUEmB,cAAA,CAAeM,IAAf,CAVF,CAUkCzB,SAXpC,CA5BF,CADU,CAJP,CArByC,CAhBlD,KAAI2B,cAAgB3C,OAAA,CAAQ,gDAAR,CAApB,CAEIwB,OAASxB,OAAA,CAAQ,4CAAR,CAFb,CAIIoC,YAAcpC,OAAA,CAAQ,iDAAR,CAJlB,CAMIc,YAAcd,OAAA,CAAQ,6CAAR,CAduH;",
"sources":["node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueDirectivesPerLocationRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _predicates = require('../../language/predicates.js');\n\nvar _directives = require('../../type/directives.js');\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nfunction UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === _kinds.Kind.SCHEMA_DEFINITION ||\n        node.kind === _kinds.Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (\n        (0, _predicates.isTypeDefinitionNode)(node) ||\n        (0, _predicates.isTypeExtensionNode)(node)\n      ) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","UniqueDirectivesPerLocationRule","context","uniqueDirectiveMap","create","schema","getSchema","definedDirectives","getDirectives","_directives","specifiedDirectives","directive","name","isRepeatable","astDefinitions","getDocument","definitions","def","kind","_kinds","Kind","DIRECTIVE_DEFINITION","repeatable","schemaDirectives","typeDirectivesMap","enter","node","directives","SCHEMA_DEFINITION","SCHEMA_EXTENSION","seenDirectives","_predicates","isTypeDefinitionNode","isTypeExtensionNode","typeName","undefined","directiveName","reportError","_GraphQLError","GraphQLError","nodes"]
}
