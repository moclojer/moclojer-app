{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueOperationTypesRule.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,wBAAR,CASAA,QAAiC,CAACC,OAAD,CAAU,CAezCC,QAASA,oBAAmB,CAACC,IAAD,CAAO,CACjC,IAAIC,oBAKEC,KAAAA,CAC6C,IAAjD,IAACD,oBAAD,CAAwBD,IAAKG,CAAAA,cAA7B,GACyB,IAAK,EAD9B,GACAF,oBADA,CAEIA,oBAFJ,CAGI,EAEN,KAAK,MAAMG,aAAX,GAA4BF,KAA5B,CACQG,oBAGN,CAHkBD,aAAcC,CAAAA,SAGhC,CAFMC,IAEN,CAFoCC,qBAAA,CAAsBF,oBAAtB,CAEpC;AAAIG,sBAAA,CAAuBH,oBAAvB,CAAJ,CACEP,OAAQW,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,YAAWN,oBAAX,yDADH,CAEE,CACEO,MAAOR,aADT,CAFF,CADF,CADF,CASWE,IAAJ,CACLR,OAAQW,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,yBAAwBN,oBAAxB,kBADH,CAEE,CACEO,MAAO,CAACN,IAAD,CAA8BF,aAA9B,CADT,CAFF,CADF,CADK,CAULG,qBAAA,CAAsBF,oBAAtB,CAVK,CAU8BD,aAIvC,OAAO,CAAA,CAvC0B,CAdnC,MAAMS,OAASf,OAAQgB,CAAAA,SAAR,EAAf,CACMP,sBAAwBb,MAAOqB,CAAAA,MAAP,CAAc,IAAd,CAD9B;AAEMP,uBAAyBK,MAAA,CAC3B,CACEG,MAAOH,MAAOI,CAAAA,YAAP,EADT,CAEEC,SAAUL,MAAOM,CAAAA,eAAP,EAFZ,CAGEC,aAAcP,MAAOQ,CAAAA,mBAAP,EAHhB,CAD2B,CAM3B,EACJ,OAAO,CACLC,iBAAkBvB,mBADb,CAELwB,gBAAiBxB,mBAFZ,CAVkC,CAP3C,KAAIW,cAAgBnB,OAAA,CAAQ,gDAAR,CAR8G;",
"sources":["node_modules/graphql/validation/rules/UniqueOperationTypesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueOperationTypesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueOperationTypesRule = UniqueOperationTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nfunction UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","UniqueOperationTypesRule","context","checkOperationTypes","node","_node$operationTypes","operationTypesNodes","operationTypes","operationType","operation","alreadyDefinedOperationType","definedOperationTypes","existingOperationTypes","reportError","_GraphQLError","GraphQLError","nodes","schema","getSchema","create","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","SchemaExtension"]
}
