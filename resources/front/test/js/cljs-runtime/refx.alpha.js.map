{"version":3,"sources":["refx/alpha.cljc"],"mappings":"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","names":["refx.alpha/dispatch","event","refx.dispatch/dispatch","refx.alpha/dispatch-sync","refx.dispatch/dispatch-sync","refx.alpha/base-interceptors","refx.cofx/inject-db","refx.effects/do-fx","refx.interceptors/inject-global-interceptors","refx.alpha/-reg-event","id","interceptors","handler-interceptor","refx.events/register","cljs.core.conj","var_args","G__52904","refx.alpha/reg-event-db","js/Error","handler","refx.alpha.reg_event_db","refx.events/db-handler->interceptor","G__52906","refx.alpha/reg-event-fx","refx.alpha.reg_event_fx","refx.events/fx-handler->interceptor","G__52908","refx.alpha/reg-event-ctx","refx.alpha.reg_event_ctx","refx.events/ctx-handler->interceptor","G__52914","refx.alpha/clear-event","refx.registry/clear!","refx.events/kind","refx.registry/remove!","refx.alpha/sub","query-v","refx.subs/sub","G__52928","refx.alpha/<-","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq52926","G__52927","cljs.core/first","cljs.core/next","self__5754__auto__","_","qs","cljs.core/cons","cljs.core.mapv","refx.alpha/parse-reg-sub-sugar","args","vec__52967","cljs.core.nth","f","cljs.core.reduce","p__52974","p__52975","vec__52976","vec__52979","op","arg","G__52986","cljs.core/Keyword","v","p__52995","vec__53000","seq__53001","cljs.core/seq","first__53002","vs","cljs.core.apply","cljs.core.partition_all","G__53010","refx.alpha/reg-sub","seq53005","G__53006","G__53007","G__53008","G__53009","query-id","compute-fn","refx.alpha.reg_sub","cljs.core/constantly","refx.db/app-db","input-fn","refx.subs/register","x","y","z","vec__53013","cljs.core.list_STAR_","refx.alpha/use-sub","refx.hooks/use-sub","G__53017","refx.alpha/clear-sub","refx.subs/kind","refx.alpha/clear-subscription-cache!","refx.subs/clear-subscription-cache!","refx.alpha/reg-fx","refx.effects/register","G__53019","refx.alpha/clear-fx","refx.effects/kind","refx.alpha/reg-cofx","refx.cofx/register","G__53021","refx.alpha/clear-cofx","refx.cofx/kind","G__53023","refx.alpha/inject-cofx","refx.cofx.inject_cofx","value","args__5775__auto__","argseq__5776__auto__","refx.alpha/->interceptor","p__53028","map__53029","cljs.core/--destructure-map","seq53027","self__5755__auto__","m","refx.utils.apply_kw","refx.interceptor/->interceptor"],"sourcesContent":["(ns refx.alpha\n  (:require #?(:cljs [refx.hooks :as hooks])\n            [refx.cofx :as cofx]\n            [refx.dispatch :as dispatch]\n            [refx.effects :as effects]\n            [refx.events :as events]\n            [refx.interceptor :as interceptor]\n            [refx.interceptors :as interceptors]\n            [refx.registry :as registry]\n            [refx.db :refer [app-db]]\n            [refx.subs :as subs]\n            [refx.utils :as utils]))\n\n;; --- dispatch ---------------------------------------------------------------\n\n(defn dispatch\n  [event]\n  (dispatch/dispatch event))\n\n(defn dispatch-sync\n  [event]\n  (dispatch/dispatch-sync event))\n\n;; --- events -----------------------------------------------------------------\n\n;; TODO: Provide a registry of interceptors as well, so they can be referenced by ID.\n\n(def base-interceptors\n  [cofx/inject-db effects/do-fx interceptors/inject-global-interceptors])\n\n(defn- -reg-event [id interceptors handler-interceptor]\n  (events/register id (conj base-interceptors interceptors handler-interceptor)))\n\n(defn reg-event-db\n  ([id handler]\n   (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (-reg-event id interceptors (events/db-handler->interceptor handler))))\n\n(defn reg-event-fx\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (-reg-event id interceptors (events/fx-handler->interceptor handler))))\n\n(defn reg-event-ctx\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (-reg-event id interceptors (events/ctx-handler->interceptor handler))))\n\n(defn clear-event\n  ([]\n   (registry/clear! events/kind))\n  ([id]\n   (registry/remove! events/kind id)))\n\n;; --- subscriptions ----------------------------------------------------------\n\n(defn sub\n  \"Return a subscription signal to be used as an input in `reg-sub`.\"\n  [query-v]\n  (subs/sub query-v))\n\n(defn <-\n  \"Like re-frame's `:<-` sugar, returns an `input-fn` for `reg-sub` that\n   subscribes to one or more query vectors.\"\n  ([query-v]\n   (fn [_] (subs/sub query-v)))\n  ([query-v & qs]\n   (let [qs (cons query-v qs)]\n     (fn [_] (mapv subs/sub qs)))))\n\n(defn- parse-reg-sub-sugar [args]\n  (let [[qs f] (reduce (fn [[qs f] [op arg]]\n                         (case op\n                           :<- [(conj qs arg) f]\n                           :-> [qs (fn [v] (arg v))]\n                           :=> [qs (fn [v [_ & vs]] (apply arg v vs))]\n                           [qs op]))\n                       [[] nil]\n                       (partition-all 2 args))]\n    [(when (seq qs) (apply <- qs)) f]))\n\n(defn reg-sub\n  ([query-id compute-fn]\n   (reg-sub query-id (constantly app-db) compute-fn))\n  ([query-id input-fn compute-fn]\n   (subs/register query-id input-fn compute-fn))\n  ;; re-frame compat\n  ([query-id x y z & args]\n   (let [[input-fn compute-fn] (parse-reg-sub-sugar (list* x y z args))]\n     (if input-fn\n       (reg-sub query-id input-fn compute-fn)\n       (reg-sub query-id compute-fn)))))\n\n#?(:cljs\n   (defn use-sub [query-v]\n     (hooks/use-sub query-v)))\n\n(defn clear-sub\n  ([]\n   (registry/clear! subs/kind))\n  ([id]\n   (registry/remove! subs/kind id)))\n\n(defn clear-subscription-cache! []\n  (subs/clear-subscription-cache!))\n\n;; --- effects ----------------------------------------------------------------\n\n(defn reg-fx\n  [id handler]\n  (effects/register id handler))\n\n(defn clear-fx\n  ([]\n   (registry/clear! effects/kind))\n  ([id]\n   (registry/remove! effects/kind id)))\n\n;; --- coeffects --------------------------------------------------------------\n\n(defn reg-cofx\n  [id handler]\n  (cofx/register id handler))\n\n(defn clear-cofx\n  ([]\n   (registry/clear! cofx/kind))\n  ([id]\n   (registry/remove! cofx/kind id)))\n\n(defn inject-cofx\n  ([id]\n   (cofx/inject-cofx id))\n  ([id value]\n   (cofx/inject-cofx id value)))\n\n(defn ->interceptor\n  [& {:as m}]\n  (utils/apply-kw interceptor/->interceptor m))\n"]}