{
"version":3,
"file":"module$node_modules$$mswjs$interceptors$lib$interceptors$XMLHttpRequest$utils$bufferFrom.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wFAAA,CAA6G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAgB1BJ,QAAQI,CAAAA,UAAR,CAXAA,QAAmB,CAACC,IAAD,CAAO,CAElBC,IAAAA,CADgBC,kBAAAC,CAAmBH,IAAnBG,CACaC,CAAAA,OAAd,CAAsB,iBAAtB,CAAyC,QAAS,CAACC,CAAD,CAAIC,IAAJ,CAAU,CAC3E,MAAOC,OAAOC,CAAAA,YAAP,CAAqB,IAArB,CAA4BF,IAA5B,CADoE,CAA5D,CAGnB,KAAIG,OAAS,IAAIC,UAAJ,CAAeT,IAAaU,CAAAA,MAA5B,CACbC,MAAMC,CAAAA,SAAUC,CAAAA,OAAQC,CAAAA,IAAxB,CAA6Bd,IAA7B,CAA2C,QAAS,CAACK,IAAD,CAAOU,KAAP,CAAc,CAC9DP,MAAA,CAAOO,KAAP,CAAA,CAAgBV,IAAKW,CAAAA,UAAL,CAAgB,CAAhB,CAD8C,CAAlE,CAGA;MAAOR,OATe,CAR2H;",
"sources":["node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/utils/bufferFrom.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mswjs$interceptors$lib$interceptors$XMLHttpRequest$utils$bufferFrom\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferFrom = void 0;\n/**\n * Convert a given string into a `Uint8Array`.\n * We don't use `TextEncoder` because it's unavailable in some environments.\n */\nfunction bufferFrom(init) {\n    var encodedString = encodeURIComponent(init);\n    var binaryString = encodedString.replace(/%([0-9A-F]{2})/g, function (_, char) {\n        return String.fromCharCode(('0x' + char));\n    });\n    var buffer = new Uint8Array(binaryString.length);\n    Array.prototype.forEach.call(binaryString, function (char, index) {\n        buffer[index] = char.charCodeAt(0);\n    });\n    return buffer;\n}\nexports.bufferFrom = bufferFrom;\n//# sourceMappingURL=bufferFrom.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","bufferFrom","init","binaryString","encodeURIComponent","encodedString","replace","_","char","String","fromCharCode","buffer","Uint8Array","length","Array","prototype","forEach","call","index","charCodeAt"]
}
