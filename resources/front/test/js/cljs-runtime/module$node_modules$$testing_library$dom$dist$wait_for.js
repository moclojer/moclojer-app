shadow$provide.module$node_modules$$testing_library$dom$dist$wait_for=function(global,require,module,exports){function copyStackTrace(target,source){target.stack=source.stack.replace(source.message,target.message)}function waitFor(callback,{container=(0,_helpers.getDocument)(),timeout=(0,_config.getConfig)().asyncUtilTimeout,showOriginalStackTrace=(0,_config.getConfig)().showOriginalStackTrace,stackTraceError,interval=50,onTimeout=error=>{error.message=(0,_config.getConfig)().getElementError(error.message,
container).message;return error},mutationObserverOptions={subtree:!0,childList:!0,attributes:!0,characterData:!0}}){if("function"!==typeof callback)throw new TypeError("Received `callback` arg must be a function");return new Promise(async(resolve,reject)=>{function onDone(error,result){finished=!0;clearTimeout(overallTimeoutTimer);usingJestFakeTimers||(clearInterval(intervalId),observer.disconnect());error?reject(error):resolve(result)}function checkRealTimersCallback(){if((0,_helpers.jestFakeTimersAreEnabled)()){const error=
Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");showOriginalStackTrace||copyStackTrace(error,stackTraceError);return reject(error)}return checkCallback()}function checkCallback(){if("pending"!==promiseStatus)try{const result=
(0,_config.runWithExpensiveErrorDiagnosticsDisabled)(callback);"function"===typeof(null==result?void 0:result.then)?(promiseStatus="pending",result.then(resolvedValue=>{promiseStatus="resolved";onDone(null,resolvedValue)},rejectedValue=>{promiseStatus="rejected";lastError=rejectedValue})):onDone(null,result)}catch(error){lastError=error}}let lastError,intervalId,observer,finished=!1,promiseStatus="idle";const overallTimeoutTimer=setTimeout(function(){let error;lastError?(error=lastError,showOriginalStackTrace||
"TestingLibraryElementError"!==error.name||copyStackTrace(error,stackTraceError)):(error=Error("Timed out in waitFor."),showOriginalStackTrace||copyStackTrace(error,stackTraceError));onDone(onTimeout(error),null)},timeout),usingJestFakeTimers=(0,_helpers.jestFakeTimersAreEnabled)();if(usingJestFakeTimers){var {unstable_advanceTimersWrapper:advanceTimersWrapper}=(0,_config.getConfig)();for(checkCallback();!finished;){if(!(0,_helpers.jestFakeTimersAreEnabled)()){advanceTimersWrapper=Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
showOriginalStackTrace||copyStackTrace(advanceTimersWrapper,stackTraceError);reject(advanceTimersWrapper);break}advanceTimersWrapper(()=>{jest.advanceTimersByTime(interval)});checkCallback();if(finished)break;await advanceTimersWrapper(async()=>{await new Promise(r=>{setTimeout(r,0);jest.advanceTimersByTime(0)})})}}else{try{(0,_helpers.checkContainerType)(container)}catch(e){reject(e);return}intervalId=setInterval(checkRealTimersCallback,interval);({MutationObserver:advanceTimersWrapper}=(0,_helpers.getWindowFromNode)(container));
observer=new advanceTimersWrapper(checkRealTimersCallback);observer.observe(container,mutationObserverOptions);checkCallback()}})}Object.defineProperty(exports,"__esModule",{value:!0});exports.waitFor=function(callback,options){const stackTraceError=Error("STACK_TRACE_MESSAGE");return(0,_config.getConfig)().asyncWrapper(()=>waitFor(callback,{stackTraceError,...options}))};var _helpers=require("module$node_modules$$testing_library$dom$dist$helpers"),_config=require("module$node_modules$$testing_library$dom$dist$config")}
//# sourceMappingURL=module$node_modules$$testing_library$dom$dist$wait_for.js.map
