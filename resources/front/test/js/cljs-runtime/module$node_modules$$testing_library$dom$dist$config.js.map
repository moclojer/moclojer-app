{
"version":3,
"file":"module$node_modules$$testing_library$dom$dist$config.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CA8CAA,QAAkB,CAACC,SAAD,CAAY,CACH,UAAzB,GAAI,MAAOA,UAAX,GAGEA,SAHF,CAGcA,SAAA,CAAUC,MAAV,CAHd,CAOAA,OAAA,CAAS,CACP,GAAGA,MADI,CAEP,GAAGD,SAFI,CARmB,CA7C9BL,QAAQO,CAAAA,SAAR,CA0DAA,QAAkB,EAAG,CACnB,MAAOD,OADY,CAzDrBN,QAAQQ,CAAAA,wCAAR,CAoCAA,QAAiD,CAACC,QAAD,CAAW,CAC1D,GAAI,CAEF,MADAH,OAAOI,CAAAA,iCACA,CADoC,CAAA,CACpC,CAAAD,QAAA,EAFL,CAAJ,OAGU,CACRH,MAAOI,CAAAA,iCAAP;AAA2C,CAAA,CADnC,CAJgD,CAnC5D,KAAIC,WAAab,OAAA,CAAQ,0DAAR,CAIjB,KAAIQ,OAAS,CACXM,gBAAiB,aADN,CAEXC,iBAAkB,GAFP,CAUXC,aAAcC,EAAAD,EAAMC,EAAA,EAVT,CAWXC,8BAA+BD,EAAAC,EAAMD,EAAA,EAX1B,CAYXE,aAAcF,EAAAE,EAAMF,EAAA,EAZT,CAcXG,cAAe,CAAA,CAdJ,CAgBXC,cAAe,eAhBJ,CAkBXC,uBAAwB,CAAA,CAlBb,CAoBXC,iBAAkB,CAAA,CApBP,CAsBXC,eAAe,CAACC,OAAD,CAAUC,SAAV,CAAqB,CAC5BC,SAAAA,CAAgB,GAAId,UAAWe,CAAAA,SAAf,EAA0BF,SAA1B,CAChBG,QAAAA,CAAYC,KAAJ,CAAU,CAACL,OAAD,CAAW,4BAA2BjB,MAAOa,CAAAA,aAAlC,KAAoDM,SAApD,EAAX,CAAgFI,CAAAA,MAAhF,CAAuFC,OAAvF,CAAgGC,CAAAA,IAAhG,CAAqG,MAArG,CAAV,CACdJ;OAAMK,CAAAA,IAAN,CAAa,4BACb,OAAOL,QAJ2B,CAtBzB,CA4BXjB,kCAAmC,CAAA,CA5BxB,CA6BXuB,oCAAqC,CAAA,CA7B1B,CAboG;",
"sources":["node_modules/@testing-library/dom/dist/config.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$testing_library$dom$dist$config\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configure = configure;\nexports.getConfig = getConfig;\nexports.runWithExpensiveErrorDiagnosticsDisabled = runWithExpensiveErrorDiagnosticsDisabled;\nvar _prettyDom = require(\"./pretty-dom\");\n// It would be cleaner for this to live inside './queries', but\n// other parts of the code assume that all exports from\n// './queries' are query functions.\nlet config = {\n  testIdAttribute: 'data-testid',\n  asyncUtilTimeout: 1000,\n  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.\n  // forcing react-testing-library to wrap all async functions would've been\n  // a total nightmare (consider wrapping every findBy* query and then also\n  // updating `within` so those would be wrapped too. Total nightmare).\n  // so we have this config option that's really only intended for\n  // react-testing-library to use. For that reason, this feature will remain\n  // undocumented.\n  asyncWrapper: cb => cb(),\n  unstable_advanceTimersWrapper: cb => cb(),\n  eventWrapper: cb => cb(),\n  // default value for the `hidden` option in `ByRole` queries\n  defaultHidden: false,\n  // default value for the `ignore` option in `ByText` queries\n  defaultIgnore: 'script, style',\n  // showOriginalStackTrace flag to show the full error stack traces for async errors\n  showOriginalStackTrace: false,\n  // throw errors w/ suggestions for better queries. Opt in so off by default.\n  throwSuggestions: false,\n  // called when getBy* queries fail. (message, container) => Error\n  getElementError(message, container) {\n    const prettifiedDOM = (0, _prettyDom.prettyDOM)(container);\n    const error = new Error([message, `Ignored nodes: comments, ${config.defaultIgnore}\\n${prettifiedDOM}`].filter(Boolean).join('\\n\\n'));\n    error.name = 'TestingLibraryElementError';\n    return error;\n  },\n  _disableExpensiveErrorDiagnostics: false,\n  computedStyleSupportsPseudoElements: false\n};\nfunction runWithExpensiveErrorDiagnosticsDisabled(callback) {\n  try {\n    config._disableExpensiveErrorDiagnostics = true;\n    return callback();\n  } finally {\n    config._disableExpensiveErrorDiagnostics = false;\n  }\n}\nfunction configure(newConfig) {\n  if (typeof newConfig === 'function') {\n    // Pass the existing config out to the provided function\n    // and accept a delta in return\n    newConfig = newConfig(config);\n  }\n\n  // Merge the incoming config delta\n  config = {\n    ...config,\n    ...newConfig\n  };\n}\nfunction getConfig() {\n  return config;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","configure","newConfig","config","getConfig","runWithExpensiveErrorDiagnosticsDisabled","callback","_disableExpensiveErrorDiagnostics","_prettyDom","testIdAttribute","asyncUtilTimeout","asyncWrapper","cb","unstable_advanceTimersWrapper","eventWrapper","defaultHidden","defaultIgnore","showOriginalStackTrace","throwSuggestions","getElementError","message","container","prettifiedDOM","prettyDOM","error","Error","filter","Boolean","join","name","computedStyleSupportsPseudoElements"]
}
