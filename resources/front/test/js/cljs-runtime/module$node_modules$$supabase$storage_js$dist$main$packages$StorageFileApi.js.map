{
"version":3,
"file":"module$node_modules$$supabase$storage_js$dist$main$packages$StorageFileApi.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,CAAA,0EAAA,CAA+F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEvI,IAAIC,UAAa,IAAbA,EAAqB,IAAKA,CAAAA,SAA1BA,EAAwC,QAAS,CAACC,OAAD,CAAUC,UAAV,CAAsBC,CAAtB,CAAyBC,SAAzB,CAAoC,CACrFC,QAASA,MAAK,CAACC,KAAD,CAAQ,CAAE,MAAOA,MAAA,WAAiBH,EAAjB,CAAqBG,KAArB,CAA6B,IAAIH,CAAJ,CAAM,QAAS,CAACI,OAAD,CAAU,CAAEA,OAAA,CAAQD,KAAR,CAAF,CAAzB,CAAtC,CACtB,MAAO,MAAKH,CAAL,GAAWA,CAAX,CAAeK,OAAf,GAAyB,QAAS,CAACD,OAAD,CAAUE,MAAV,CAAkB,CACvDC,QAASA,UAAS,CAACJ,KAAD,CAAQ,CAAE,GAAI,CAAEK,IAAA,CAAKP,SAAUQ,CAAAA,IAAV,CAAeN,KAAf,CAAL,CAAF,CAAiC,MAAOO,CAAP,CAAU,CAAEJ,MAAA,CAAOI,CAAP,CAAF,CAAjD,CAC1BC,QAASA,SAAQ,CAACR,KAAD,CAAQ,CAAE,GAAI,CAAEK,IAAA,CAAKP,SAAA,CAAU,OAAV,CAAA,CAAmBE,KAAnB,CAAL,CAAF,CAAqC,MAAOO,CAAP,CAAU,CAAEJ,MAAA,CAAOI,CAAP,CAAF,CAArD;AACzBF,QAASA,KAAI,CAACI,MAAD,CAAS,CAAEA,MAAOC,CAAAA,IAAP,CAAcT,OAAA,CAAQQ,MAAOT,CAAAA,KAAf,CAAd,CAAsCD,KAAA,CAAMU,MAAOT,CAAAA,KAAb,CAAoBW,CAAAA,IAApB,CAAyBP,SAAzB,CAAoCI,QAApC,CAAxC,CACtBH,IAAA,CAA8DC,CAAxDR,SAAwDQ,CAA5CR,SAAUc,CAAAA,KAAV,CAAgBjB,OAAhB,CAAyBC,UAAzB,EAAuC,EAAvC,CAA4CU,EAAAA,IAAzD,EAAL,CAJuD,CAApD,CAF8E,CASzFO,OAAOC,CAAAA,cAAP,CAAsBrB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEO,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMe,SAAWxB,OAAA,CAAQ,+DAAR,CAAjB,CACMyB,QAAUzB,OAAA,CAAQ,8DAAR,CADhB,CAEM0B,UAAY1B,OAAA,CAAQ,gEAAR,CAFlB,CAGM2B,uBAAyB,CAC3BC,MAAO,GADoB;AAE3BC,OAAQ,CAFmB,CAG3BC,OAAQ,CACJC,OAAQ,MADJ,CAEJC,MAAO,KAFH,CAHmB,CAH/B,CAWMC,qBAAuB,CACzBC,aAAc,MADW,CAEzBC,YAAa,6BAFY,CAGzBC,OAAQ,CAAA,CAHiB,CAK7B,MAAMC,eAAN,CACIC,WAAW,CAACC,GAAD,CAAMC,OAAA,CAAU,EAAhB,CAAoBC,QAApB,CAA8BC,KAA9B,CAAqC,CAC5C,IAAKH,CAAAA,GAAL,CAAWA,GACX,KAAKC,CAAAA,OAAL,CAAeA,OACf,KAAKC,CAAAA,QAAL,CAAgBA,QAChB,KAAKC,CAAAA,KAAL,CAAa,GAAIhB,SAAUiB,CAAAA,YAAd,EAA4BD,KAA5B,CAJ+B,CAahDE,cAAc,CAACC,MAAD,CAASC,IAAT,CAAeC,QAAf,CAAyBC,WAAzB,CAAsC,CAChD,MAAO7C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CACA,IAAI8C,IACJ,OAAMC,QAAU5B,MAAO6B,CAAAA,MAAP,CAAc7B,MAAO6B,CAAAA,MAAP,CAAc,EAAd,CAAkBlB,oBAAlB,CAAd,CAAuDe,WAAvD,CAAhB,CACMR;AAAUlB,MAAO6B,CAAAA,MAAP,CAAc7B,MAAO6B,CAAAA,MAAP,CAAc,EAAd,CAAkB,IAAKX,CAAAA,OAAvB,CAAd,CAA2D,MAA3D,GAAgDK,MAAhD,EAAqE,CAAE,WAAYO,MAAA,CAAOF,OAAQd,CAAAA,MAAf,CAAd,CAArE,CACI,YAApB,GAAI,MAAOiB,KAAX,EAAmCN,QAAnC,WAAuDM,KAAvD,EACIJ,IAEA,CAFO,IAAIK,QAEX,CADAL,IAAKM,CAAAA,MAAL,CAAY,cAAZ,CAA4BL,OAAQhB,CAAAA,YAApC,CACA,CAAAe,IAAKM,CAAAA,MAAL,CAAY,EAAZ,CAAgBR,QAAhB,CAHJ,EAK6B,WAAxB,GAAI,MAAOO,SAAX,EAAuCP,QAAvC,WAA2DO,SAA3D,EACDL,IACA,CADOF,QACP,CAAAE,IAAKM,CAAAA,MAAL,CAAY,cAAZ,CAA4BL,OAAQhB,CAAAA,YAApC,CAFC,GAKDe,IAEA,CAFOF,QAEP,CADAP,OAAA,CAAQ,eAAR,CACA,CAD4B,WAAUU,OAAQhB,CAAAA,YAAlB,EAC5B,CAAAM,OAAA,CAAQ,cAAR,CAAA,CAA0BU,OAAQf,CAAAA,WAPjC,CASL,OAAMqB;AAAY,IAAKC,CAAAA,mBAAL,CAAyBX,IAAzB,CAAlB,CACMY,MAAQ,IAAKC,CAAAA,aAAL,CAAmBH,SAAnB,CADd,CAEMI,IAAM,KAAM,KAAKlB,CAAAA,KAAL,CAAY,GAAE,IAAKH,CAAAA,GAAP,WAAqBmB,KAArB,EAAZ,CAA0CpC,MAAO6B,CAAAA,MAAP,CAAc,CAAEN,MAAF,CAAgBI,IAAhB,CAAsBT,OAAtB,CAAd,CAAgD,CAAa,IAAZ,GAAAU,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,CAAzC,CAAkDA,OAAQW,CAAAA,MAA3D,EAAqE,CAAEA,OAAQX,OAAQW,CAAAA,MAAlB,CAArE,CAAkG,EAAlJ,CAA1C,CAClB,OAAID,IAAIE,CAAAA,EAAR,CACW,CACHC,KAAM,CAAEjB,KAAMU,SAAR,CADH,CAEHQ,MAAO,IAFJ,CADX,CAQW,CAAED,KAAM,IAAR,CAAcC,MADPA,KAAMJ,IAAIK,CAAAA,IAAJ,EACb,CA7BX,CAgCJ,MAAOD,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR,CAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CAjCkC,CAA7C,CADyC,CAgDpDG,MAAM,CAACrB,IAAD,CAAOC,QAAP,CAAiBC,WAAjB,CAA8B,CAChC,MAAO7C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,MAAO,KAAKyC,CAAAA,cAAL,CAAoB,MAApB;AAA4BE,IAA5B,CAAkCC,QAAlC,CAA4CC,WAA5C,CADyC,CAA7C,CADyB,CAWpCoB,iBAAiB,CAACtB,IAAD,CAAOuB,KAAP,CAActB,QAAd,CAAwBC,WAAxB,CAAqC,CAClD,MAAO7C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,MAAMqD,UAAY,IAAKC,CAAAA,mBAAL,CAAyBX,IAAzB,CAClB,KAAMY,MAAQ,IAAKC,CAAAA,aAAL,CAAmBH,SAAnB,CACRjB,MAAAA,CAAM,IAAI+B,GAAJ,CAAQ,IAAK/B,CAAAA,GAAb,CAAoB,uBAAsBmB,KAAtB,EAApB,CACZnB,MAAIgC,CAAAA,YAAaC,CAAAA,GAAjB,CAAqB,OAArB,CAA8BH,KAA9B,CACA,IAAI,CACA,IAAIpB,IACJ,OAAMC,QAAU5B,MAAO6B,CAAAA,MAAP,CAAc,CAAEf,OAAQH,oBAAqBG,CAAAA,MAA/B,CAAd,CAAuDY,WAAvD,CAAhB,CACMR,QAAUlB,MAAO6B,CAAAA,MAAP,CAAc7B,MAAO6B,CAAAA,MAAP,CAAc,EAAd,CAAkB,IAAKX,CAAAA,OAAvB,CAAd,CAA+C,CAAE,WAAYY,MAAA,CAAOF,OAAQd,CAAAA,MAAf,CAAd,CAA/C,CACI,YAApB;AAAI,MAAOiB,KAAX,EAAmCN,QAAnC,WAAuDM,KAAvD,EACIJ,IAEA,CAFO,IAAIK,QAEX,CADAL,IAAKM,CAAAA,MAAL,CAAY,cAAZ,CAA4BL,OAAQhB,CAAAA,YAApC,CACA,CAAAe,IAAKM,CAAAA,MAAL,CAAY,EAAZ,CAAgBR,QAAhB,CAHJ,EAK6B,WAAxB,GAAI,MAAOO,SAAX,EAAuCP,QAAvC,WAA2DO,SAA3D,EACDL,IACA,CADOF,QACP,CAAAE,IAAKM,CAAAA,MAAL,CAAY,cAAZ,CAA4BL,OAAQhB,CAAAA,YAApC,CAFC,GAKDe,IAEA,CAFOF,QAEP,CADAP,OAAA,CAAQ,eAAR,CACA,CAD4B,WAAUU,OAAQhB,CAAAA,YAAlB,EAC5B,CAAAM,OAAA,CAAQ,cAAR,CAAA,CAA0BU,OAAQf,CAAAA,WAPjC,CASL,OAAMyB,IAAM,KAAM,KAAKlB,CAAAA,KAAL,CAAWH,KAAIkC,CAAAA,QAAJ,EAAX,CAA2B,CACzC5B,OAAQ,KADiC,CAEnCI,IAFmC,CAGzCT,OAHyC,CAA3B,CAKlB,OAAIoB,IAAIE,CAAAA,EAAR,CACW,CACHC,KAAM,CAAEjB,KAAMU,SAAR,CADH,CAEHQ,MAAO,IAFJ,CADX,CAQW,CAAED,KAAM,IAAR;AAAcC,MADPA,KAAMJ,IAAIK,CAAAA,IAAJ,EACb,CA/BX,CAkCJ,MAAOD,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR,CAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CAvCkC,CAA7C,CAD2C,CAsDtDU,qBAAqB,CAAC5B,IAAD,CAAO,CACxB,MAAO3C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CACA,IAAIuD,MAAQ,IAAKC,CAAAA,aAAL,CAAmBb,IAAnB,CACZ,OAAMiB,KAAO,KAAM,GAAItC,OAAQkD,CAAAA,IAAZ,EAAkB,IAAKjC,CAAAA,KAAvB,CAA+B,GAAE,IAAKH,CAAAA,GAAP,uBAAiCmB,KAAjC,EAA/B,CAAyE,EAAzE,CAA6E,CAAElB,QAAS,IAAKA,CAAAA,OAAhB,CAA7E,CAAnB,CACMD,IAAM,IAAI+B,GAAJ,CAAQ,IAAK/B,CAAAA,GAAb,CAAmBwB,IAAKxB,CAAAA,GAAxB,CADZ,CAEM8B,MAAQ9B,GAAIgC,CAAAA,YAAaK,CAAAA,GAAjB,CAAqB,OAArB,CACd,IAAI,CAACP,KAAL,CACI,KAAM,KAAI7C,QAASqD,CAAAA,YAAb,CAA0B,0BAA1B,CAAN,CAEJ,MAAO,CAAEd,KAAM,CAAEe,UAAWvC,GAAIkC,CAAAA,QAAJ,EAAb;AAA6B3B,IAA7B,CAAmCuB,KAAnC,CAAR,CAAoDL,MAAO,IAA3D,CARP,CAUJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR,CAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CAXkC,CAA7C,CADiB,CA0B5Be,MAAM,CAACjC,IAAD,CAAOC,QAAP,CAAiBC,WAAjB,CAA8B,CAChC,MAAO7C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,MAAO,KAAKyC,CAAAA,cAAL,CAAoB,KAApB,CAA2BE,IAA3B,CAAiCC,QAAjC,CAA2CC,WAA3C,CADyC,CAA7C,CADyB,CAWpCgC,IAAI,CAACC,QAAD,CAAWC,MAAX,CAAmB,CACnB,MAAO/E,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CAEA,MAAO,CAAE4D,KADIA,KAAM,GAAItC,OAAQkD,CAAAA,IAAZ,EAAkB,IAAKjC,CAAAA,KAAvB,CAA+B,GAAE,IAAKH,CAAAA,GAAP,cAA/B,CAAyD,CAAEE,SAAU,IAAKA,CAAAA,QAAjB,CAA2B0C,UAAWF,QAAtC,CAAgDG,eAAgBF,MAAhE,CAAzD,CAAmI,CAAE1C,QAAS,IAAKA,CAAAA,OAAhB,CAAnI,CACZ,CAAQwB,MAAO,IAAf,CAFP,CAIJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR;AAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CALkC,CAA7C,CADY,CAoBvBqB,IAAI,CAACJ,QAAD,CAAWC,MAAX,CAAmB,CACnB,MAAO/E,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CAEA,MAAO,CAAE4D,KAAM,CAAEjB,KAAWwC,CADfvB,KAAM,GAAItC,OAAQkD,CAAAA,IAAZ,EAAkB,IAAKjC,CAAAA,KAAvB,CAA+B,GAAE,IAAKH,CAAAA,GAAP,cAA/B,CAAyD,CAAEE,SAAU,IAAKA,CAAAA,QAAjB,CAA2B0C,UAAWF,QAAtC,CAAgDG,eAAgBF,MAAhE,CAAzD,CAAmI,CAAE1C,QAAS,IAAKA,CAAAA,OAAhB,CAAnI,CACS8C,EAAAA,GAAb,CAAR,CAA4BtB,MAAO,IAAnC,CAFP,CAIJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR,CAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CALkC,CAA7C,CADY,CAsBvBuB,eAAe,CAACzC,IAAD,CAAO0C,SAAP,CAAkBtC,OAAlB,CAA2B,CACtC,MAAO/C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CACA,IAAIuD,MAAQ,IAAKC,CAAAA,aAAL,CAAmBb,IAAnB,CAAZ;AACIiB,KAAO,KAAM,GAAItC,OAAQkD,CAAAA,IAAZ,EAAkB,IAAKjC,CAAAA,KAAvB,CAA+B,GAAE,IAAKH,CAAAA,GAAP,gBAA0BmB,KAA1B,EAA/B,CAAkEpC,MAAO6B,CAAAA,MAAP,CAAc,CAAEqC,SAAF,CAAd,CAA8B,CAAa,IAAZ,GAAAtC,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,CAAzC,CAAkDA,OAAQuC,CAAAA,SAA3D,EAAwE,CAAEA,UAAWvC,OAAQuC,CAAAA,SAArB,CAAxE,CAA2G,EAAzI,CAAlE,CAAiN,CAAEjD,QAAS,IAAKA,CAAAA,OAAhB,CAAjN,CAKjBuB,KAAA,CAAO,CAAEe,UADSY,SAAAZ,CAAW,GAAE,IAAKvC,CAAAA,GAAP,GAAawB,IAAK4B,CAAAA,SAAlB,GAHFC,CAAa,IAAZ,GAAA1C,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,CAAzC,CAAkDA,OAAQ2C,CAAAA,QAA3DD,EACpB,aAAiC,CAAA,CAArB,GAAA1C,OAAQ2C,CAAAA,QAAR,CAA4B,EAA5B,CAAiC3C,OAAQ2C,CAAAA,QAArD,EADoBD,CAErB,EACuB,EAAXd,CACX,CACP,OAAO,CAAEf,IAAF,CAAQC,MAAO,IAAf,CARP,CAUJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR,CAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CAXkC,CAA7C,CAD+B,CA2B1C8B,gBAAgB,CAACC,KAAD;AAAQP,SAAR,CAAmBtC,OAAnB,CAA4B,CACxC,MAAO/C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CACA,MAAM4D,KAAO,KAAM,GAAItC,OAAQkD,CAAAA,IAAZ,EAAkB,IAAKjC,CAAAA,KAAvB,CAA+B,GAAE,IAAKH,CAAAA,GAAP,gBAA0B,IAAKE,CAAAA,QAA/B,EAA/B,CAA0E,CAAE+C,SAAF,CAAaO,KAAb,CAA1E,CAAgG,CAAEvD,QAAS,IAAKA,CAAAA,OAAhB,CAAhG,CAAnB,CACMoD,mBAAqB,CAAa,IAAZ,GAAA1C,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,CAAzC,CAAkDA,OAAQ2C,CAAAA,QAA3D,EACpB,aAAiC,CAAA,CAArB,GAAA3C,OAAQ2C,CAAAA,QAAR,CAA4B,EAA5B,CAAiC3C,OAAQ2C,CAAAA,QAArD,EADoB,CAErB,EACN,OAAO,CACH9B,KAAMA,IAAKiC,CAAAA,GAAL,CAAUC,KAAD,EAAY3E,MAAO6B,CAAAA,MAAP,CAAc7B,MAAO6B,CAAAA,MAAP,CAAc,EAAd,CAAkB8C,KAAlB,CAAd,CAAwC,CAAEnB,UAAWmB,KAAMN,CAAAA,SAAN,CACtED,SAAA,CAAW,GAAE,IAAKnD,CAAAA,GAAP,GAAa0D,KAAMN,CAAAA,SAAnB,GAA+BC,kBAA/B,EAAX,CADsE,CAEtE,IAFyD,CAAxC,CAArB,CADH,CAIH5B,MAAO,IAJJ,CALP,CAYJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR;AAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CAbkC,CAA7C,CADiC,CA4B5C6B,QAAQ,CAAC/C,IAAD,CAAOI,OAAP,CAAgB,CACpB,MAAO/C,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAEhD,MAAM+F,WADuG,WAC1F,GADS,OAAoB,IAAZ,GAAAhD,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQuC,CAAAA,SAAlE,CACT,CAAsB,4BAAtB,CAAqD,QACxE,KAAMU,oBAAsB,IAAKC,CAAAA,0BAAL,EAA6C,IAAZ,GAAAlD,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQuC,CAAAA,SAA3F,GAAyG,EAAzG,CACtBY,oBAAAA,CAAcF,mBAAA,CAAuB,IAAGA,mBAAH,EAAvB,CAAkD,EACtE,IAAI,CACA,MAAMzC,MAAQ,IAAKC,CAAAA,aAAL,CAAmBb,IAAnB,CAMd,OAAO,CAAEiB,KADIA,KAAUuC,CAJX1C,KAAM,GAAInC,OAAQmD,CAAAA,GAAZ,EAAiB,IAAKlC,CAAAA,KAAtB;AAA8B,GAAE,IAAKH,CAAAA,GAAP,IAAc2D,UAAd,IAA4BxC,KAA5B,GAAoC2C,mBAApC,EAA9B,CAAiF,CAC/F7D,QAAS,IAAKA,CAAAA,OADiF,CAE/F+D,cAAe,CAAA,CAFgF,CAAjF,CAIKD,EAAAA,IAAJ,EACZ,CAAQtC,MAAO,IAAf,CAPP,CASJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR,CAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CAdkC,CAA7C,CADa,CA+BxBwC,YAAY,CAAC1D,IAAD,CAAOI,OAAP,CAAgB,CAClBQ,IAAAA,CAAQ,IAAKC,CAAAA,aAAL,CAAmBb,IAAnB,CACd,OAAM2D,aAAe,EACrB,KAAMb,mBAAqB,CAAa,IAAZ,GAAA1C,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,CAAzC,CAAkDA,OAAQ2C,CAAAA,QAA3D,EACpB,YAAgC,CAAA,CAArB,GAAA3C,OAAQ2C,CAAAA,QAAR,CAA4B,EAA5B,CAAiC3C,OAAQ2C,CAAAA,QAApD,EADoB,CAErB,EACqB,GAA3B,GAAID,kBAAJ,EACIa,YAAaC,CAAAA,IAAb,CAAkBd,kBAAlB,CAGEM,mBAAAA;AADuG,WAC1F,GADS,OAAoB,IAAZ,GAAAhD,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQuC,CAAAA,SAAlE,CACT,CAAsB,cAAtB,CAAuC,QACpDU,QAAAA,CAAsB,IAAKC,CAAAA,0BAAL,EAA6C,IAAZ,GAAAlD,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQuC,CAAAA,SAA3F,GAAyG,EAAzG,CACA,GAA5B,GAAIU,OAAJ,EACIM,YAAaC,CAAAA,IAAb,CAAkBP,OAAlB,CAEAE,QAAAA,CAAcI,YAAaE,CAAAA,IAAb,CAAkB,MAAlB,CACE,GAApB,GAAIN,OAAJ,GACIA,OADJ,CACmB,IAAGA,OAAH,EADnB,CAGA,OAAO,CACHtC,KAAM,CAAE6C,UAAWlB,SAAA,CAAW,GAAE,IAAKnD,CAAAA,GAAP,IAAc2D,kBAAd,WAAmCxC,IAAnC,GAA2C2C,OAA3C,EAAX,CAAb,CADH,CAnBiB,CA4B5BQ,MAAM,CAACd,KAAD,CAAQ,CACV,MAAO5F,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CAEA,MAAO,CAAE4D,KADIA,KAAM,GAAItC,OAAQoF,CAAAA,MAAZ,EAAoB,IAAKnE,CAAAA,KAAzB;AAAiC,GAAE,IAAKH,CAAAA,GAAP,WAAqB,IAAKE,CAAAA,QAA1B,EAAjC,CAAuE,CAAEqE,SAAUf,KAAZ,CAAvE,CAA4F,CAAEvD,QAAS,IAAKA,CAAAA,OAAhB,CAA5F,CACZ,CAAQwB,MAAO,IAAf,CAFP,CAIJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR,CAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CALkC,CAA7C,CADG,CA6Ed+C,IAAI,CAACjE,IAAD,CAAOI,OAAP,CAAgB8D,UAAhB,CAA4B,CAC5B,MAAO7G,UAAA,CAAU,IAAV,CAAgB,IAAK,EAArB,CAAwB,IAAK,EAA7B,CAAgC,SAAU,EAAG,CAChD,GAAI,CACA,MAAM8C,KAAO3B,MAAO6B,CAAAA,MAAP,CAAc7B,MAAO6B,CAAAA,MAAP,CAAc7B,MAAO6B,CAAAA,MAAP,CAAc,EAAd,CAAkBxB,sBAAlB,CAAd,CAAyDuB,OAAzD,CAAd,CAAiF,CAAE+D,OAAQnE,IAARmE,EAAgB,EAAlB,CAAjF,CAEb,OAAO,CAAElD,KADIA,KAAM,GAAItC,OAAQkD,CAAAA,IAAZ,EAAkB,IAAKjC,CAAAA,KAAvB,CAA+B,GAAE,IAAKH,CAAAA,GAAP,gBAA0B,IAAKE,CAAAA,QAA/B,EAA/B,CAA0EQ,IAA1E,CAAgF,CAAET,QAAS,IAAKA,CAAAA,OAAhB,CAAhF,CAA2GwE,UAA3G,CACZ,CAAQhD,MAAO,IAAf,CAHP,CAKJ,MAAOA,KAAP,CAAc,CACV,GAAI,GAAIxC,QAAS0C,CAAAA,cAAb,EAA6BF,KAA7B,CAAJ,CACI,MAAO,CAAED,KAAM,IAAR;AAAcC,KAAd,CAEX,MAAMA,MAAN,CAJU,CANkC,CAA7C,CADqB,CAehCL,aAAa,CAACb,IAAD,CAAO,CAChB,MAAQ,GAAE,IAAKL,CAAAA,QAAP,IAAmBK,IAAnB,EADQ,CAGpBW,mBAAmB,CAACX,IAAD,CAAO,CACtB,MAAOA,KAAKoE,CAAAA,OAAL,CAAa,UAAb,CAAyB,EAAzB,CAA6BA,CAAAA,OAA7B,CAAqC,MAArC,CAA6C,GAA7C,CADe,CAG1Bd,0BAA0B,CAACX,SAAD,CAAY,CAClC,MAAM0B,OAAS,EACX1B,UAAU2B,CAAAA,KAAd,EACID,MAAOT,CAAAA,IAAP,CAAa,SAAQjB,SAAU2B,CAAAA,KAAlB,EAAb,CAEA3B,UAAU4B,CAAAA,MAAd,EACIF,MAAOT,CAAAA,IAAP,CAAa,UAASjB,SAAU4B,CAAAA,MAAnB,EAAb,CAEA5B,UAAU6B,CAAAA,MAAd,EACIH,MAAOT,CAAAA,IAAP,CAAa,UAASjB,SAAU6B,CAAAA,MAAnB,EAAb,CAEA7B,UAAU8B,CAAAA,MAAd,EACIJ,MAAOT,CAAAA,IAAP,CAAa,UAASjB,SAAU8B,CAAAA,MAAnB,EAAb,CAEA9B,UAAU+B,CAAAA,OAAd,EACIL,MAAOT,CAAAA,IAAP,CAAa,WAAUjB,SAAU+B,CAAAA,OAApB,EAAb,CAEJ;MAAOL,OAAOR,CAAAA,IAAP,CAAY,MAAZ,CAjB2B,CAla1C,CAsbAzG,OAAQuH,CAAAA,OAAR,CAAkBpF,cAldqH;",
"sources":["node_modules/@supabase/storage-js/dist/main/packages/StorageFileApi.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$storage_js$dist$main$packages$StorageFileApi\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../lib/errors\");\nconst fetch_1 = require(\"../lib/fetch\");\nconst helpers_1 = require(\"../lib/helpers\");\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nclass StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const res = yield this.fetch(url.toString(), {\n                    method: 'PUT',\n                    body: body,\n                    headers,\n                });\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for one minute.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     */\n    createSignedUploadUrl(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers: this.headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new errors_1.StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n    move(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n    copy(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield (0, fetch_1.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\nexports.default = StorageFileApi;\n//# sourceMappingURL=StorageFileApi.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","errors_1","fetch_1","helpers_1","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","resolveFetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","assign","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","duplex","ok","data","error","json","isStorageError","upload","uploadToSignedUrl","token","URL","searchParams","set","toString","createSignedUploadUrl","post","get","StorageError","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","copy","Key","createSignedUrl","expiresIn","transform","encodeURI","signedURL","downloadQueryParam","download","createSignedUrls","paths","map","datum","renderPath","transformationQuery","transformOptsToQueryString","queryString","blob","noResolveJson","getPublicUrl","_queryString","push","join","publicUrl","remove","prefixes","list","parameters","prefix","replace","params","width","height","resize","format","quality","default"]
}
