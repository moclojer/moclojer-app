shadow$provide.module$node_modules$graphql$language$printer=function(global,require,module,exports){function join(maybeArray,separator=""){var _maybeArray$filter$jo;return null!==(_maybeArray$filter$jo=null===maybeArray||void 0===maybeArray?void 0:maybeArray.filter(x=>x).join(separator))&&void 0!==_maybeArray$filter$jo?_maybeArray$filter$jo:""}function block(array){return wrap("{\n",indent(join(array,"\n")),"\n}")}function wrap(start,maybeString,end=""){return null!=maybeString&&""!==maybeString?
start+maybeString+end:""}function indent(str){return wrap("  ",str.replace(/\n/g,"\n  "))}function hasMultilineItems(maybeArray){var _maybeArray$some;return null!==(_maybeArray$some=null===maybeArray||void 0===maybeArray?void 0:maybeArray.some(str=>str.includes("\n")))&&void 0!==_maybeArray$some?_maybeArray$some:!1}Object.defineProperty(exports,"__esModule",{value:!0});exports.print=function(ast){return(0,_visitor.visit)(ast,printDocASTReducer)};var _blockString=require("module$node_modules$graphql$language$blockString"),
_printString=require("module$node_modules$graphql$language$printString"),_visitor=require("module$node_modules$graphql$language$visitor");const printDocASTReducer={Name:{leave:node=>node.value},Variable:{leave:node=>"$"+node.name},Document:{leave:node=>join(node.definitions,"\n\n")},OperationDefinition:{leave(node){var varDefs=wrap("(",join(node.variableDefinitions,", "),")");varDefs=join([node.operation,join([node.name,varDefs]),join(node.directives," ")]," ");return("query"===varDefs?"":varDefs+
" ")+node.selectionSet}},VariableDefinition:{leave:({variable,type,defaultValue,directives})=>variable+": "+type+wrap(" \x3d ",defaultValue)+wrap(" ",join(directives," "))},SelectionSet:{leave:({selections})=>block(selections)},Field:{leave({alias,name,arguments:args,directives,selectionSet}){alias=wrap("",alias,": ")+name;name=alias+wrap("(",join(args,", "),")");80<name.length&&(name=alias+wrap("(\n",indent(join(args,"\n")),"\n)"));return join([name,join(directives," "),selectionSet]," ")}},Argument:{leave:({name,
value})=>name+": "+value},FragmentSpread:{leave:({name,directives})=>"..."+name+wrap(" ",join(directives," "))},InlineFragment:{leave:({typeCondition,directives,selectionSet})=>join(["...",wrap("on ",typeCondition),join(directives," "),selectionSet]," ")},FragmentDefinition:{leave:({name,typeCondition,variableDefinitions,directives,selectionSet})=>`fragment ${name}${wrap("(",join(variableDefinitions,", "),")")} `+`on ${typeCondition} ${wrap("",join(directives," ")," ")}`+selectionSet},IntValue:{leave:({value})=>
value},FloatValue:{leave:({value})=>value},StringValue:{leave:({value,block:isBlockString})=>isBlockString?(0,_blockString.printBlockString)(value):(0,_printString.printString)(value)},BooleanValue:{leave:({value})=>value?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value})=>value},ListValue:{leave:({values})=>"["+join(values,", ")+"]"},ObjectValue:{leave:({fields})=>"{"+join(fields,", ")+"}"},ObjectField:{leave:({name,value})=>name+": "+value},Directive:{leave:({name,arguments:args})=>
"@"+name+wrap("(",join(args,", "),")")},NamedType:{leave:({name})=>name},ListType:{leave:({type})=>"["+type+"]"},NonNullType:{leave:({type})=>type+"!"},SchemaDefinition:{leave:({description,directives,operationTypes})=>wrap("",description,"\n")+join(["schema",join(directives," "),block(operationTypes)]," ")},OperationTypeDefinition:{leave:({operation,type})=>operation+": "+type},ScalarTypeDefinition:{leave:({description,name,directives})=>wrap("",description,"\n")+join(["scalar",name,join(directives,
" ")]," ")},ObjectTypeDefinition:{leave:({description,name,interfaces,directives,fields})=>wrap("",description,"\n")+join(["type",name,wrap("implements ",join(interfaces," \x26 ")),join(directives," "),block(fields)]," ")},FieldDefinition:{leave:({description,name,arguments:args,type,directives})=>wrap("",description,"\n")+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+": "+type+wrap(" ",join(directives," "))},InputValueDefinition:{leave:({description,
name,type,defaultValue,directives})=>wrap("",description,"\n")+join([name+": "+type,wrap("\x3d ",defaultValue),join(directives," ")]," ")},InterfaceTypeDefinition:{leave:({description,name,interfaces,directives,fields})=>wrap("",description,"\n")+join(["interface",name,wrap("implements ",join(interfaces," \x26 ")),join(directives," "),block(fields)]," ")},UnionTypeDefinition:{leave:({description,name,directives,types})=>wrap("",description,"\n")+join(["union",name,join(directives," "),wrap("\x3d ",
join(types," | "))]," ")},EnumTypeDefinition:{leave:({description,name,directives,values})=>wrap("",description,"\n")+join(["enum",name,join(directives," "),block(values)]," ")},EnumValueDefinition:{leave:({description,name,directives})=>wrap("",description,"\n")+join([name,join(directives," ")]," ")},InputObjectTypeDefinition:{leave:({description,name,directives,fields})=>wrap("",description,"\n")+join(["input",name,join(directives," "),block(fields)]," ")},DirectiveDefinition:{leave:({description,
name,arguments:args,repeatable,locations})=>wrap("",description,"\n")+"directive @"+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+(repeatable?" repeatable":"")+" on "+join(locations," | ")},SchemaExtension:{leave:({directives,operationTypes})=>join(["extend schema",join(directives," "),block(operationTypes)]," ")},ScalarTypeExtension:{leave:({name,directives})=>join(["extend scalar",name,join(directives," ")]," ")},ObjectTypeExtension:{leave:({name,
interfaces,directives,fields})=>join(["extend type",name,wrap("implements ",join(interfaces," \x26 ")),join(directives," "),block(fields)]," ")},InterfaceTypeExtension:{leave:({name,interfaces,directives,fields})=>join(["extend interface",name,wrap("implements ",join(interfaces," \x26 ")),join(directives," "),block(fields)]," ")},UnionTypeExtension:{leave:({name,directives,types})=>join(["extend union",name,join(directives," "),wrap("\x3d ",join(types," | "))]," ")},EnumTypeExtension:{leave:({name,
directives,values})=>join(["extend enum",name,join(directives," "),block(values)]," ")},InputObjectTypeExtension:{leave:({name,directives,fields})=>join(["extend input",name,join(directives," "),block(fields)]," ")}}}
//# sourceMappingURL=module$node_modules$graphql$language$printer.js.map
