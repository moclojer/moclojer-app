shadow$provide.module$node_modules$$supabase$supabase_js$dist$main$SupabaseClient=function(global,require,module,exports){var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P(function(resolve){resolve(value)})}return new (P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}
function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const functions_js_1=require("module$node_modules$$supabase$functions_js$dist$main$index"),postgrest_js_1=require("module$node_modules$$supabase$postgrest_js$dist$main$index"),realtime_js_1=require("module$node_modules$$supabase$realtime_js$dist$main$index"),storage_js_1=require("module$node_modules$$supabase$storage_js$dist$main$index");
global=require("module$node_modules$$supabase$supabase_js$dist$main$lib$constants");const fetch_1=require("module$node_modules$$supabase$supabase_js$dist$main$lib$fetch"),helpers_1=require("module$node_modules$$supabase$supabase_js$dist$main$lib$helpers"),SupabaseAuthClient_1=require("module$node_modules$$supabase$supabase_js$dist$main$lib$SupabaseAuthClient"),DEFAULT_GLOBAL_OPTIONS={headers:global.DEFAULT_HEADERS},DEFAULT_DB_OPTIONS={schema:"public"},DEFAULT_AUTH_OPTIONS={autoRefreshToken:!0,persistSession:!0,
detectSessionInUrl:!0,flowType:"implicit"},DEFAULT_REALTIME_OPTIONS={};class SupabaseClient{constructor(supabaseUrl,supabaseKey,options){var _a,_b,_c,_d,_e,_f,_g,_h;this.supabaseUrl=supabaseUrl;this.supabaseKey=supabaseKey;if(!supabaseUrl)throw Error("supabaseUrl is required.");if(!supabaseKey)throw Error("supabaseKey is required.");supabaseUrl=(0,helpers_1.stripTrailingSlash)(supabaseUrl);this.realtimeUrl=`${supabaseUrl}/realtime/v1`.replace(/^http/i,"ws");this.authUrl=`${supabaseUrl}/auth/v1`;this.storageUrl=
`${supabaseUrl}/storage/v1`;if(supabaseUrl.match(/(supabase\.co)|(supabase\.in)/)){var urlParts=supabaseUrl.split(".");this.functionsUrl=`${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`}else this.functionsUrl=`${supabaseUrl}/functions/v1`;urlParts=`sb-${(new URL(this.authUrl)).hostname.split(".")[0]}-auth-token`;urlParts={db:DEFAULT_DB_OPTIONS,realtime:DEFAULT_REALTIME_OPTIONS,auth:Object.assign(Object.assign({},DEFAULT_AUTH_OPTIONS),{storageKey:urlParts}),global:DEFAULT_GLOBAL_OPTIONS};options=
(0,helpers_1.applySettingDefaults)(null!==options&&void 0!==options?options:{},urlParts);this.storageKey=null!==(_b=null===(_a=options.auth)||void 0===_a?void 0:_a.storageKey)&&void 0!==_b?_b:"";this.headers=null!==(_d=null===(_c=options.global)||void 0===_c?void 0:_c.headers)&&void 0!==_d?_d:{};this.auth=this._initSupabaseAuthClient(null!==(_e=options.auth)&&void 0!==_e?_e:{},this.headers,null===(_f=options.global)||void 0===_f?void 0:_f.fetch);this.fetch=(0,fetch_1.fetchWithAuth)(supabaseKey,this._getAccessToken.bind(this),
null===(_g=options.global)||void 0===_g?void 0:_g.fetch);this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers},options.realtime));this.rest=new postgrest_js_1.PostgrestClient(`${supabaseUrl}/rest/v1`,{headers:this.headers,schema:null===(_h=options.db)||void 0===_h?void 0:_h.schema,fetch:this.fetch});this._listenForAuthEvents()}get functions(){return new functions_js_1.FunctionsClient(this.functionsUrl,{headers:this.headers,customFetch:this.fetch})}get storage(){return new storage_js_1.StorageClient(this.storageUrl,
this.headers,this.fetch)}from(relation){return this.rest.from(relation)}rpc(fn,args={},options){return this.rest.rpc(fn,args,options)}channel(name,opts={config:{}}){return this.realtime.channel(name,opts)}getChannels(){return this.realtime.getChannels()}removeChannel(channel){return this.realtime.removeChannel(channel)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var _a,_b;return __awaiter(this,void 0,void 0,function*(){const {data}=yield this.auth.getSession();return null!==
(_b=null===(_a=data.session)||void 0===_a?void 0:_a.access_token)&&void 0!==_b?_b:null})}_initSupabaseAuthClient({autoRefreshToken,persistSession,detectSessionInUrl,storage,storageKey,flowType},headers,fetch){return new SupabaseAuthClient_1.SupabaseAuthClient({url:this.authUrl,headers:Object.assign(Object.assign({},{Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`}),headers),storageKey,autoRefreshToken,persistSession,detectSessionInUrl,storage,flowType,fetch})}_initRealtimeClient(options){return new realtime_js_1.RealtimeClient(this.realtimeUrl,
Object.assign(Object.assign({},options),{params:Object.assign({apikey:this.supabaseKey},null===options||void 0===options?void 0:options.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((event,session)=>{this._handleTokenChanged(event,null===session||void 0===session?void 0:session.access_token,"CLIENT")})}_handleTokenChanged(event,token,source){"TOKEN_REFRESHED"!==event&&"SIGNED_IN"!==event||this.changedAccessToken===token?"SIGNED_OUT"===event&&(this.realtime.setAuth(this.supabaseKey),
"STORAGE"==source&&this.auth.signOut(),this.changedAccessToken=void 0):(this.realtime.setAuth(null!==token&&void 0!==token?token:null),this.changedAccessToken=token)}}exports.default=SupabaseClient}
//# sourceMappingURL=module$node_modules$$supabase$supabase_js$dist$main$SupabaseClient.js.map
