shadow$provide.module$node_modules$$testing_library$dom$dist$matches=function(global,require,module,exports){function assertNotNullOrUndefined(matcher){if(null===matcher||void 0===matcher)throw Error(`It looks like ${matcher} was passed instead of a matcher. Did you do something like getByText(${matcher})?`);}function getDefaultNormalizer({trim=!0,collapseWhitespace=!0}={}){return text=>{text=trim?text.trim():text;return text=collapseWhitespace?text.replace(/\s+/g," "):text}}function matchRegExp(matcher,
text){text=matcher.test(text);matcher.global&&0!==matcher.lastIndex&&(console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp."),matcher.lastIndex=0);return text}Object.defineProperty(exports,"__esModule",{value:!0});exports.fuzzyMatches=function(textToMatch,node,matcher,normalizer){if("string"!==typeof textToMatch)return!1;assertNotNullOrUndefined(matcher);textToMatch=normalizer(textToMatch);
return"string"===typeof matcher||"number"===typeof matcher?textToMatch.toLowerCase().includes(matcher.toString().toLowerCase()):"function"===typeof matcher?matcher(textToMatch,node):matchRegExp(matcher,textToMatch)};exports.getDefaultNormalizer=getDefaultNormalizer;exports.makeNormalizer=function({trim,collapseWhitespace,normalizer}){if(!normalizer)return getDefaultNormalizer({trim,collapseWhitespace});if("undefined"!==typeof trim||"undefined"!==typeof collapseWhitespace)throw Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
return normalizer};exports.matches=function(textToMatch,node,matcher,normalizer){if("string"!==typeof textToMatch)return!1;assertNotNullOrUndefined(matcher);textToMatch=normalizer(textToMatch);return matcher instanceof Function?matcher(textToMatch,node):matcher instanceof RegExp?matchRegExp(matcher,textToMatch):textToMatch===String(matcher)}}
//# sourceMappingURL=module$node_modules$$testing_library$dom$dist$matches.js.map
