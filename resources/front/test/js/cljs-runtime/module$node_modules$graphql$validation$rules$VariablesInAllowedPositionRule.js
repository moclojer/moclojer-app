shadow$provide.module$node_modules$graphql$validation$rules$VariablesInAllowedPositionRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.VariablesInAllowedPositionRule=function(context){let varDefMap=Object.create(null);return{OperationDefinition:{enter(){varDefMap=Object.create(null)},leave(operation){operation=context.getRecursiveVariableUsages(operation);for(const {node,type,defaultValue}of operation){operation=node.name.value;const varDef=
varDefMap[operation];if(varDef&&type){var schema=context.getSchema(),varType=(0,_typeFromAST.typeFromAST)(schema,varDef.type),JSCompiler_temp;if(JSCompiler_temp=varType){JSCompiler_temp=schema;schema=varType;var varDefaultValue=varDef.defaultValue,locationType=type,locationDefaultValue=defaultValue;(0,_definition.isNonNullType)(locationType)&&!(0,_definition.isNonNullType)(schema)?(locationDefaultValue=void 0!==locationDefaultValue,JSCompiler_temp=null!=varDefaultValue&&varDefaultValue.kind!==_kinds.Kind.NULL||
locationDefaultValue?(0,_typeComparators.isTypeSubTypeOf)(JSCompiler_temp,schema,locationType.ofType):!1):JSCompiler_temp=(0,_typeComparators.isTypeSubTypeOf)(JSCompiler_temp,schema,locationType);JSCompiler_temp=!JSCompiler_temp}JSCompiler_temp&&(varType=(0,_inspect.inspect)(varType),JSCompiler_temp=(0,_inspect.inspect)(type),context.reportError(new _GraphQLError.GraphQLError(`Variable "$${operation}" of type "${varType}" used in position expecting type "${JSCompiler_temp}".`,{nodes:[varDef,node]})))}}}},
VariableDefinition(node){varDefMap[node.variable.name.value]=node}}};var _inspect=require("module$node_modules$graphql$jsutils$inspect"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_kinds=require("module$node_modules$graphql$language$kinds"),_definition=require("module$node_modules$graphql$type$definition"),_typeComparators=require("module$node_modules$graphql$utilities$typeComparators"),_typeFromAST=require("module$node_modules$graphql$utilities$typeFromAST")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$VariablesInAllowedPositionRule.js.map
