{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueFieldDefinitionNamesRule.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,2EAAA,CAAgG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,8BAAR,CAWAA,QAAuC,CAACC,OAAD,CAAU,CAa/CC,QAASA,qBAAoB,CAACC,IAAD,CAAO,CAClC,IAAIC,YAEJ,OAAMC,SAAWF,IAAKG,CAAAA,IAAKP,CAAAA,KAEtBQ,gBAAA,CAAgBF,QAAhB,CAAL,GACEE,eAAA,CAAgBF,QAAhB,CADF,CAC8BR,MAAOW,CAAAA,MAAP,CAAc,IAAd,CAD9B,CAMMC,KAAAA,CAC6B,IAAjC,IAACL,YAAD,CAAgBD,IAAKO,CAAAA,MAArB,GAA0D,IAAK,EAA/D,GAAyCN,YAAzC,CACIA,YADJ,CAEI,EACAO,aAAAA,CAAaJ,eAAA,CAAgBF,QAAhB,CAEnB;IAAK,MAAMO,QAAX,GAAuBH,KAAvB,CAAmC,CAC3BI,IAAAA,CAAYD,QAASN,CAAAA,IAAKP,CAAAA,KAEnB,KAAA,yBAAAe,eAAA,CAAgBT,QAAhB,CAA2BQ,KAAAA,UAAAA,IAiC1C,yBAAA,CAJA,GAAIE,WAAYC,CAAAA,YAAhB,EAA8BC,wBAA9B,CADF,EAEE,GAAIF,WAAYG,CAAAA,eAAhB,EAAiCD,wBAAjC,CAFF,EAGE,GAAIF,WAAYI,CAAAA,iBAAhB,EAAmCF,wBAAnC,CAHF,CAKwC,IALxC,EAKSA,wBAAKG,CAAAA,SAAL,EAAA,CAAiBP,SAAjB,CALT,CAQO,CAAA,CApCC,yBAAJ,CACEZ,OAAQoB,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,UAASlB,QAAT,IAAqBQ,IAArB,mFADH;AAEE,CACEW,MAAOZ,QAASN,CAAAA,IADlB,CAFF,CADF,CADF,CASWK,YAAA,CAAWE,IAAX,CAAJ,CACLZ,OAAQoB,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,UAASlB,QAAT,IAAqBQ,IAArB,6BADH,CAEE,CACEW,MAAO,CAACb,YAAA,CAAWE,IAAX,CAAD,CAAwBD,QAASN,CAAAA,IAAjC,CADT,CAFF,CADF,CADK,CAULK,YAAA,CAAWE,IAAX,CAVK,CAUmBD,QAASN,CAAAA,IAtBF,CA0BnC,MAAO,CAAA,CA3C2B,CAZpC,MAAMmB,OAASxB,OAAQyB,CAAAA,SAAR,EAAf,CACMZ,gBAAkBW,MAAA,CAASA,MAAOE,CAAAA,UAAP,EAAT,CAA+B9B,MAAOW,CAAAA,MAAP,CAAc,IAAd,CADvD,CAEMD,gBAAkBV,MAAOW,CAAAA,MAAP,CAAc,IAAd,CACxB,OAAO,CACLoB,0BAA2B1B,oBADtB,CAEL2B,yBAA0B3B,oBAFrB,CAGL4B,wBAAyB5B,oBAHpB;AAIL6B,uBAAwB7B,oBAJnB,CAKL8B,qBAAsB9B,oBALjB,CAML+B,oBAAqB/B,oBANhB,CAJwC,CATjD,KAAIoB,cAAgB5B,OAAA,CAAQ,gDAAR,CAApB,CAEIqB,YAAcrB,OAAA,CAAQ,6CAAR,CAVsH;",
"sources":["node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueFieldDefinitionNamesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nfunction UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (\n    (0, _definition.isObjectType)(type) ||\n    (0, _definition.isInterfaceType)(type) ||\n    (0, _definition.isInputObjectType)(type)\n  ) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","UniqueFieldDefinitionNamesRule","context","checkFieldUniqueness","node","_node$fields","typeName","name","knownFieldNames","create","fieldNodes","fields","fieldNames","fieldDef","fieldName","existingTypeMap","_definition","isObjectType","type","isInterfaceType","isInputObjectType","getFields","reportError","_GraphQLError","GraphQLError","nodes","schema","getSchema","getTypeMap","InputObjectTypeDefinition","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension"]
}
