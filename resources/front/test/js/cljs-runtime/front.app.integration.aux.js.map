{"version":3,"sources":["front/app/integration/aux.cljs"],"mappings":";AAKA,sDAAA,tDAACA,mIAEA,WAAKC,EAAEA;AAAP,AAAA,kDAAA,uEAAA,KAAA,qEAAA,KAAA,0EAAA,MAAA,oEAAA,KAAA,6EAAA;;AAOD,sCAAA,tCAAMC;AAAN,AACE,AAAA,GAAA,QAAAC,kCAAAC,sCAAAC,kDAAAC,sDAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,8GAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,2DAAAE;;;AAAA,CAAA,AAAA,AAAAF,qGAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,6FAAAG;;AAAA,CAAA,AAAA,AAAAH,4EAAA,WAAAI;;AAAA,AAAA,IAAAC,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD,qCAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,AAAAP,6EAAA,WAAAK,OAAAG;;AAAA,AAAA,IAAAH,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,AAAAR,qGAAA,WAAOgB;;AAAP,AAAA,IAAAN,mBAAA;AAAA,AACO,AAACO;;AACD,yBAAA,mFAAA,5GAACC;;AACD,AAACC;;AACD,QAACH,qCAAAA,uCAAAA;;;AAJR,CAAA,AAAAhB,sEAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,4EAAA;;AAAA,CAAA,AAAAA,+EAAA;;AAAA,CAAA,AAAAA,oFAAA,WAAAW,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAAG,kEAAA,sFAAAb;AAAA,AAAA,YAAAF,2DAAAE;;;AAAAF;;AAAA,YAAAA,2DAAA;;AAMF,qCAAA,rCAAMoB;AAAN,AACE,OAACD","names":["refx.alpha.reg_event_db","_","front.app.integration.aux/before-fn","js/front","js/front.app","js/front.app.integration","js/front.app.integration.aux","js/front.app.integration.aux.t_front$app$integration$aux53927","front.app.integration.aux/t_front$app$integration$aux53927","_53929","meta53928","cljs.core/PROTOCOL_SENTINEL","unused__11783__auto__","self__","G__53950","js/Error","args53934","cljs.core/aclone","___11442__auto__","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","front.app.integration.aux/->t_front$app$integration$aux53927","done","refx.alpha/clear-subscription-cache!","refx.alpha/dispatch-sync","front.app.aux.cleanup","front.app.integration.aux/after-fn"],"sourcesContent":["(ns front.app.integration.aux\n  (:require [front.app.aux :as aux]\n            [cljs.test :refer [async]]\n            [refx.alpha :as refx]))\n\n(refx/reg-event-db\n :test/initialize-db\n (fn [_ _]\n   {:current-route nil\n    :current-user nil\n    :login-loading? false\n    :login-error nil\n    :login-email-sent nil}))\n\n(defn before-fn []\n  (async done\n         (refx/clear-subscription-cache!)\n         (refx/dispatch-sync [:test/initialize-db])\n         (aux/cleanup)\n         (done)))\n\n(defn after-fn []\n  (aux/cleanup))\n"]}