shadow$provide.module$node_modules$$testing_library$dom$dist$suggestions=function(global,require,module,exports){function escapeRegExp(string){return string.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$\x26")}function makeSuggestion(queryName,element,content,{variant,name}){let warning="";const queryOptions={},queryArgs=[["Role","TestId"].includes(queryName)?content:new RegExp(escapeRegExp(content.toLowerCase()),"i")];name&&(queryOptions.name=new RegExp(escapeRegExp(name.toLowerCase()),"i"));"Role"===queryName&&
(0,_roleHelpers.isInaccessible)(element)&&(queryOptions.hidden=!0,warning="Element is inaccessible. This means that the element and all its children are invisible to screen readers.\n    If you are using the aria-hidden prop, make sure this is the right choice for your case.\n    ");0<Object.keys(queryOptions).length&&queryArgs.push(queryOptions);const queryMethod=`${variant}By${queryName}`;return{queryName,queryMethod,queryArgs,variant,warning,toString(){warning&&console.warn(warning);let [text,
options]=queryArgs;text="string"===typeof text?`'${text}'`:text;options=options?`, { ${Object.entries(options).map(([k,v])=>`${k}: ${v}`).join(", ")} }`:"";return`${queryMethod}(${text}${options})`}}}function canSuggest(currentMethod,requestedMethod,data){return data&&(!requestedMethod||requestedMethod.toLowerCase()===currentMethod.toLowerCase())}Object.defineProperty(exports,"__esModule",{value:!0});exports.getSuggestedQuery=function(element,variant="get",method){var _getImplicitAriaRoles;if(!element.matches((0,_config.getConfig)().defaultIgnore)){var role=
element.getAttribute("role")??(null==(_getImplicitAriaRoles=(0,_roleHelpers.getImplicitAriaRoles)(element))?void 0:_getImplicitAriaRoles[0]);if("generic"!==role&&canSuggest("Role",method,role))return makeSuggestion("Role",element,role,{variant,name:(0,_domAccessibilityApi.computeAccessibleName)(element,{computedStyleSupportsPseudoElements:(0,_config.getConfig)().computedStyleSupportsPseudoElements})});_getImplicitAriaRoles=(0,_labelHelpers.getLabels)(document,element).map(label=>label.content).join(" ");
if(canSuggest("LabelText",method,_getImplicitAriaRoles))return makeSuggestion("LabelText",element,_getImplicitAriaRoles,{variant});_getImplicitAriaRoles=element.getAttribute("placeholder");if(canSuggest("PlaceholderText",method,_getImplicitAriaRoles))return makeSuggestion("PlaceholderText",element,_getImplicitAriaRoles,{variant});_getImplicitAriaRoles=normalize((0,_getNodeText.getNodeText)(element));if(canSuggest("Text",method,_getImplicitAriaRoles))return makeSuggestion("Text",element,_getImplicitAriaRoles,
{variant});if(canSuggest("DisplayValue",method,element.value))return makeSuggestion("DisplayValue",element,normalize(element.value),{variant});_getImplicitAriaRoles=element.getAttribute("alt");if(canSuggest("AltText",method,_getImplicitAriaRoles))return makeSuggestion("AltText",element,_getImplicitAriaRoles,{variant});_getImplicitAriaRoles=element.getAttribute("title");if(canSuggest("Title",method,_getImplicitAriaRoles))return makeSuggestion("Title",element,_getImplicitAriaRoles,{variant});_getImplicitAriaRoles=
element.getAttribute((0,_config.getConfig)().testIdAttribute);if(canSuggest("TestId",method,_getImplicitAriaRoles))return makeSuggestion("TestId",element,_getImplicitAriaRoles,{variant})}};var _domAccessibilityApi=require("module$node_modules$dom_accessibility_api$dist$index");global=require("module$node_modules$$testing_library$dom$dist$matches");var _getNodeText=require("module$node_modules$$testing_library$dom$dist$get_node_text"),_config=require("module$node_modules$$testing_library$dom$dist$config"),
_roleHelpers=require("module$node_modules$$testing_library$dom$dist$role_helpers"),_labelHelpers=require("module$node_modules$$testing_library$dom$dist$label_helpers");const normalize=(0,global.getDefaultNormalizer)()}
//# sourceMappingURL=module$node_modules$$testing_library$dom$dist$suggestions.js.map
