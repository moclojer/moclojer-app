shadow$provide.module$node_modules$graphql$validation$rules$UniqueEnumValueNamesRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.UniqueEnumValueNamesRule=function(context){function checkValueUniqueness(node){var _node$values;const typeName=node.name.value;knownValueNames[typeName]||(knownValueNames[typeName]=Object.create(null));node=null!==(_node$values=node.values)&&void 0!==_node$values?_node$values:[];_node$values=knownValueNames[typeName];
for(const valueDef of node){node=valueDef.name.value;const existingType=existingTypeMap[typeName];(0,_definition.isEnumType)(existingType)&&existingType.getValue(node)?context.reportError(new _GraphQLError.GraphQLError(`Enum value "${typeName}.${node}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:valueDef.name})):_node$values[node]?context.reportError(new _GraphQLError.GraphQLError(`Enum value "${typeName}.${node}" can only be defined once.`,{nodes:[_node$values[node],
valueDef.name]})):_node$values[node]=valueDef.name}return!1}const schema=context.getSchema(),existingTypeMap=schema?schema.getTypeMap():Object.create(null),knownValueNames=Object.create(null);return{EnumTypeDefinition:checkValueUniqueness,EnumTypeExtension:checkValueUniqueness}};var _GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_definition=require("module$node_modules$graphql$type$definition")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$UniqueEnumValueNamesRule.js.map
