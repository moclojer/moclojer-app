{
"version":3,
"file":"module$node_modules$graphql$utilities$valueFromAST.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/graphql/utilities/valueFromAST.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$valueFromAST\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.valueFromAST = valueFromAST;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _keyMap = require('../jsutils/keyMap.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _definition = require('../type/definition.js');\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\nfunction valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === _kinds.Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && (0, _definition.isNonNullType)(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if ((0, _definition.isNonNullType)(type)) {\n    if (valueNode.kind === _kinds.Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === _kinds.Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === _kinds.Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if ((0, _definition.isNonNullType)(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = (0, _keyMap.keyMap)(\n      valueNode.fields,\n      (field) => field.name.value,\n    );\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === _kinds.Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","valueFromAST","valueNode","type","variables","kind","_kinds","Kind","VARIABLE","variableName","name","value","undefined","variableValue","_definition","isNonNullType","NULL","ofType","isListType","itemType","LIST","coercedValues","itemNode","values","isMissingVariable","push","itemValue","coercedValue","isInputObjectType","OBJECT","coercedObj","Object","create","fieldNodes","_keyMap","keyMap","fields","field","getFields","fieldNode","defaultValue","fieldValue","isLeafType","result","parseLiteral","_error","_invariant","invariant","_inspect","inspect","defineProperty"]
}
