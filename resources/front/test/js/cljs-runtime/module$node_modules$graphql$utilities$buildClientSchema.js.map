{
"version":3,
"file":"module$node_modules$graphql$utilities$buildClientSchema.js",
"lineCount":17,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAoCAA,QAA0B,CAACC,aAAD,CAAgBC,OAAhB,CAAyB,CAqDjDC,QAASA,QAAO,CAACC,OAAD,CAAU,CACxB,GAAIA,OAAQC,CAAAA,IAAZ,GAAqBC,cAAeC,CAAAA,QAASC,CAAAA,IAA7C,CAAmD,CAC3CC,OAAAA,CAAUL,OAAQM,CAAAA,MAExB,IAAI,CAACD,OAAL,CACE,KAAUE,MAAJ,CAAU,iDAAV,CAAN,CAGF,MAAO,KAAIC,WAAYC,CAAAA,WAAhB,CAA4BV,OAAA,CAAQM,OAAR,CAA5B,CAP0C,CAUnD,GAAIL,OAAQC,CAAAA,IAAZ,GAAqBC,cAAeC,CAAAA,QAASO,CAAAA,QAA7C,CAAuD,CAC/CC,OAAAA;AAAcX,OAAQM,CAAAA,MAE5B,IAAI,CAACK,OAAL,CACE,KAAUJ,MAAJ,CAAU,iDAAV,CAAN,CAGIK,OAAAA,CAAeb,OAAA,CAAQY,OAAR,CACrB,OAAO,KAAIH,WAAYK,CAAAA,cAAhB,CACL,GAAIL,WAAYM,CAAAA,kBAAhB,EAAoCF,OAApC,CADK,CAR8C,CAavD,MAAOG,aAAA,CAAaf,OAAb,CAxBiB,CA2B1Be,QAASA,aAAY,CAACf,OAAD,CAAU,CAC7B,MAAMgB,SAAWhB,OAAQiB,CAAAA,IAEzB,IAAI,CAACD,QAAL,CACE,KAAUT,MAAJ,CACH,2BAA0B,GAAIW,QAASC,CAAAA,OAAb,EAAsBnB,OAAtB,CAA1B,GADG,CAAN,CAKIoB,OAAAA,CAAOC,OAAA,CAAQL,QAAR,CAEb,IAAI,CAACI,OAAL,CACE,KAAUb,MAAJ,CACH,+CAA8CS,QAA9C,qFADG,CAAN;AAKF,MAAOI,QAjBsB,CAoB/BE,QAASA,cAAa,CAACtB,OAAD,CAAU,CAC9B,MAAO,GAAIQ,WAAYe,CAAAA,gBAAhB,EAAkCR,YAAA,CAAaf,OAAb,CAAlC,CADuB,CAIhCwB,QAASA,iBAAgB,CAACxB,OAAD,CAAU,CACjC,MAAO,GAAIQ,WAAYiB,CAAAA,mBAAhB,EAAqCV,YAAA,CAAaf,OAAb,CAArC,CAD0B,CAKnC0B,QAASA,UAAS,CAACN,IAAD,CAAO,CAEvB,GAAY,IAAZ,EAAIA,IAAJ,EAAiC,IAAjC,EAAoBA,IAAKH,CAAAA,IAAzB,EAAsD,IAAtD,EAAyCG,IAAKnB,CAAAA,IAA9C,CAGE,OAAQmB,IAAKnB,CAAAA,IAAb,EACE,KAAKC,cAAeC,CAAAA,QAASwB,CAAAA,MAA7B,CACE,MA0BC,KAAInB,WAAYoB,CAAAA,iBAAhB,CAAkC,CACvCX,KA3B0BG,IA2BAH,CAAAA,IADa,CAEvCY,YA5B0BT,IA4BOS,CAAAA,WAFM,CAGvCC,eA7B0BV,IA6BUU,CAAAA,cAHG,CAAlC,CAxBH,MAAK5B,cAAeC,CAAAA,QAAS4B,CAAAA,MAA7B,CACE,MAAOC,eAAA,CAAeZ,IAAf,CAET;KAAKlB,cAAeC,CAAAA,QAAS8B,CAAAA,SAA7B,CACE,MAAOC,kBAAA,CAAkBd,IAAlB,CAET,MAAKlB,cAAeC,CAAAA,QAASgC,CAAAA,KAA7B,CACE,MAAOC,cAAA,CAAchB,IAAd,CAET,MAAKlB,cAAeC,CAAAA,QAASkC,CAAAA,IAA7B,CACE,MAAOC,aAAA,CAAalB,IAAb,CAET,MAAKlB,cAAeC,CAAAA,QAASoC,CAAAA,YAA7B,CACE,MAAOC,oBAAA,CAAoBpB,IAApB,CAjBX,CAqBIqB,IAAAA,CAAU,GAAIvB,QAASC,CAAAA,OAAb,EAAsBC,IAAtB,CAChB,MAAUb,MAAJ,CACH,iIAAgIkC,IAAhI,GADG,CAAN,CA3BuB,CAwCzBC,QAASA,yBAAwB,CAACC,yBAAD,CAA4B,CAG3D,GAC2C,IAD3C;AACEA,yBAA0BC,CAAAA,UAD5B,EAEED,yBAA0B1C,CAAAA,IAF5B,GAEqCC,cAAeC,CAAAA,QAAS8B,CAAAA,SAF7D,CAIE,MAAO,EAGT,IAAI,CAACU,yBAA0BC,CAAAA,UAA/B,CAIE,KAHMC,0BAGA,CAH+B,GAAI3B,QAASC,CAAAA,OAAb,EACnCwB,yBADmC,CAG/B,CAAIpC,KAAJ,CACH,4CAA2CsC,yBAA3C,GADG,CAAN,CAKF,MAAOF,0BAA0BC,CAAAA,UAAWE,CAAAA,GAArC,CAAyCtB,gBAAzC,CAnBoD,CAsB7DQ,QAASA,eAAc,CAACe,mBAAD,CAAsB,CAC3C,MAAO,KAAIvC,WAAYwC,CAAAA,iBAAhB,CAAkC,CACvC/B,KAAM8B,mBAAoB9B,CAAAA,IADa,CAEvCY,YAAakB,mBAAoBlB,CAAAA,WAFM;AAGvCe,WAAY,EAAAA,EAAMF,wBAAA,CAAyBK,mBAAzB,CAHqB,CAIvCE,OAAQ,EAAAA,EAAMC,gBAAA,CAAiBH,mBAAjB,CAJyB,CAAlC,CADoC,CAS7Cb,QAASA,kBAAiB,CAACiB,sBAAD,CAAyB,CACjD,MAAO,KAAI3C,WAAY4C,CAAAA,oBAAhB,CAAqC,CAC1CnC,KAAMkC,sBAAuBlC,CAAAA,IADa,CAE1CY,YAAasB,sBAAuBtB,CAAAA,WAFM,CAG1Ce,WAAY,EAAAA,EAAMF,wBAAA,CAAyBS,sBAAzB,CAHwB,CAI1CF,OAAQ,EAAAA,EAAMC,gBAAA,CAAiBC,sBAAjB,CAJ4B,CAArC,CAD0C,CASnDf,QAASA,cAAa,CAACiB,kBAAD,CAAqB,CACzC,GAAI,CAACA,kBAAmBC,CAAAA,aAAxB,CAAuC,CACrC,MAAMC;AAAwB,GAAIrC,QAASC,CAAAA,OAAb,EAAsBkC,kBAAtB,CAC9B,MAAU9C,MAAJ,CACH,+CAA8CgD,qBAA9C,GADG,CAAN,CAFqC,CAOvC,MAAO,KAAI/C,WAAYgD,CAAAA,gBAAhB,CAAiC,CACtCvC,KAAMoC,kBAAmBpC,CAAAA,IADa,CAEtCY,YAAawB,kBAAmBxB,CAAAA,WAFM,CAGtC4B,MAAO,EAAAA,EAAMJ,kBAAmBC,CAAAA,aAAcR,CAAAA,GAAjC,CAAqCxB,aAArC,CAHyB,CAAjC,CARkC,CAe3CgB,QAASA,aAAY,CAACoB,iBAAD,CAAoB,CACvC,GAAI,CAACA,iBAAkBC,CAAAA,UAAvB,CAEE,KADMC,kBACA,CADuB,GAAI1C,QAASC,CAAAA,OAAb,EAAsBuC,iBAAtB,CACvB,CAAInD,KAAJ,CACH,4CAA2CqD,iBAA3C,GADG,CAAN;AAKF,MAAO,KAAIpD,WAAYqD,CAAAA,eAAhB,CAAgC,CACrC5C,KAAMyC,iBAAkBzC,CAAAA,IADa,CAErCY,YAAa6B,iBAAkB7B,CAAAA,WAFM,CAGrCiC,OAAQ,GAAIC,UAAWC,CAAAA,SAAf,EACNN,iBAAkBC,CAAAA,UADZ,CAELM,kBAAD,EAAwBA,kBAAmBhD,CAAAA,IAFrC,CAGLgD,kBAAD,EAAyB,EACvBpC,YAAaoC,kBAAmBpC,CAAAA,WADT,CAEvBqC,kBAAmBD,kBAAmBC,CAAAA,iBAFf,EAHnB,CAH6B,CAAhC,CARgC,CAsBzC1B,QAASA,oBAAmB,CAAC2B,wBAAD,CAA2B,CACrD,GAAI,CAACA,wBAAyBC,CAAAA,WAA9B,CAA2C,CACzC,MAAMC,4BAA8B,GAAInD,QAASC,CAAAA,OAAb,EAClCgD,wBADkC,CAGpC;KAAU5D,MAAJ,CACH,6CAA4C8D,2BAA5C,GADG,CAAN,CAJyC,CAS3C,MAAO,KAAI7D,WAAY8D,CAAAA,sBAAhB,CAAuC,CAC5CrD,KAAMkD,wBAAyBlD,CAAAA,IADa,CAE5CY,YAAasC,wBAAyBtC,CAAAA,WAFM,CAG5CoB,OAAQ,EAAAA,EAAMsB,qBAAA,CAAsBJ,wBAAyBC,CAAAA,WAA/C,CAH8B,CAAvC,CAV8C,CAiBvDlB,QAASA,iBAAgB,CAACsB,iBAAD,CAAoB,CAC3C,GAAI,CAACA,iBAAkBvB,CAAAA,MAAvB,CACE,KAAU1C,MAAJ,CACH,wCAAuC,GAAIW,QAASC,CAAAA,OAAb,EACtCqD,iBADsC,CAAvC,GADG,CAAN,CAOF,MAAO,GAAIT,UAAWC,CAAAA,SAAf,EACLQ,iBAAkBvB,CAAAA,MADb;AAEJwB,kBAAD,EAAwBA,kBAAmBxD,CAAAA,IAFtC,CAGLyD,UAHK,CAToC,CAgB7CA,QAASA,WAAU,CAACD,kBAAD,CAAqB,CACtC,MAAMrD,KAAOrB,OAAA,CAAQ0E,kBAAmBrD,CAAAA,IAA3B,CAEb,IAAI,CAAC,GAAIZ,WAAYmE,CAAAA,YAAhB,EAA8BvD,IAA9B,CAAL,CAEE,KADMqB,mBACA,CADU,GAAIvB,QAASC,CAAAA,OAAb,EAAsBC,IAAtB,CACV,CAAIb,KAAJ,CACH,oEAAmEkC,kBAAnE,GADG,CAAN,CAKF,GAAI,CAACgC,kBAAmBG,CAAAA,IAAxB,CAEE,KADMC,mBACA,CADwB,GAAI3D,QAASC,CAAAA,OAAb,EAAsBsD,kBAAtB,CACxB,CAAIlE,KAAJ,CACH,4CAA2CsE,kBAA3C,GADG,CAAN,CAKF,MAAO,CACLhD,YAAa4C,kBAAmB5C,CAAAA,WAD3B;AAELqC,kBAAmBO,kBAAmBP,CAAAA,iBAFjC,CAGL9C,IAHK,CAILwD,KAAML,qBAAA,CAAsBE,kBAAmBG,CAAAA,IAAzC,CAJD,CAjB+B,CAyBxCL,QAASA,sBAAqB,CAACO,wBAAD,CAA2B,CACvD,MAAO,GAAIf,UAAWC,CAAAA,SAAf,EACLc,wBADK,CAEJC,UAAD,EAAgBA,UAAW9D,CAAAA,IAFtB,CAGL+D,eAHK,CADgD,CAQzDA,QAASA,gBAAe,CAACC,uBAAD,CAA0B,CAChD,MAAM7D,KAAOrB,OAAA,CAAQkF,uBAAwB7D,CAAAA,IAAhC,CAEb,IAAI,CAAC,GAAIZ,WAAY0E,CAAAA,WAAhB,EAA6B9D,IAA7B,CAAL,CAEE,KADMqB,wBACA,CADU,GAAIvB,QAASC,CAAAA,OAAb,EAAsBC,IAAtB,CACV,CAAIb,KAAJ,CACH,sEAAqEkC,uBAArE,GADG,CAAN;AAKF,MAAM0C,aACoC,IAAxC,EAAAF,uBAAwBE,CAAAA,YAAxB,CACI,GAAIC,aAAcC,CAAAA,YAAlB,EACE,GAAIC,OAAQC,CAAAA,UAAZ,EAAwBN,uBAAwBE,CAAAA,YAAhD,CADF,CAEE/D,IAFF,CADJ,CAKIoE,IAAAA,EACN,OAAO,CACL3D,YAAaoD,uBAAwBpD,CAAAA,WADhC,CAELT,IAFK,CAGL+D,YAHK,CAILjB,kBAAmBe,uBAAwBf,CAAAA,iBAJtC,CAjByC,CAyBlDuB,QAASA,eAAc,CAACC,sBAAD,CAAyB,CAC9C,GAAI,CAACA,sBAAuBd,CAAAA,IAA5B,CAIE,KAHMe,uBAGA,CAH4B,GAAIzE,QAASC,CAAAA,OAAb,EAChCuE,sBADgC,CAG5B,CAAInF,KAAJ,CACH,gDAA+CoF,sBAA/C,GADG,CAAN;AAKF,GAAI,CAACD,sBAAuBE,CAAAA,SAA5B,CAIE,KAHMD,uBAGA,CAH4B,GAAIzE,QAASC,CAAAA,OAAb,EAChCuE,sBADgC,CAG5B,CAAInF,KAAJ,CACH,qDAAoDoF,sBAApD,GADG,CAAN,CAKF,MAAO,KAAIE,WAAYC,CAAAA,gBAAhB,CAAiC,CACtC7E,KAAMyE,sBAAuBzE,CAAAA,IADS,CAEtCY,YAAa6D,sBAAuB7D,CAAAA,WAFE,CAGtCkE,aAAcL,sBAAuBK,CAAAA,YAHC,CAItCH,UAAWF,sBAAuBE,CAAAA,SAAUI,CAAAA,KAAjC,EAJ2B,CAKtCpB,KAAML,qBAAA,CAAsBmB,sBAAuBd,CAAAA,IAA7C,CALgC,CAAjC,CAnBuC,CA5T/C,GAAIqB,aAAcC,CAAAA,YAAlB,EAAgCrG,aAAhC,CAAD;AACE,GAAIoG,aAAcC,CAAAA,YAAlB,EAAgCrG,aAAcsG,CAAAA,QAA9C,CADF,EAEE,GAAIC,UAAWC,CAAAA,SAAf,EACE,CAAA,CADF,CAEG,6JAA4J,GAC7JnF,QAASC,CAAAA,OADoJ,EAC3ItB,aAD2I,CAA5J,GAFH,CAMIyG,cAAAA,CAAsBzG,aAAcsG,CAAAA,QAE1C,OAAM9E,QAAU,GAAI0C,UAAWC,CAAAA,SAAf,EACdsC,aAAoB7C,CAAAA,KADN,CAEbe,iBAAD,EAAuBA,iBAAkBvD,CAAAA,IAF3B,CAGbuD,iBAAD,EAAuB9C,SAAA,CAAU8C,iBAAV,CAHT,CAMhB,KAAK,IAAM+B,OAAX,GAAsB,CACpB,GAAGC,QAASC,CAAAA,oBADQ;AAEpB,GAAGvG,cAAewG,CAAAA,kBAFE,CAAtB,CAIMrF,OAAA,CAAQkF,OAAQtF,CAAAA,IAAhB,CAAJ,GACEI,OAAA,CAAQkF,OAAQtF,CAAAA,IAAhB,CADF,CAC0BsF,OAD1B,CAKII,QAAAA,CAAYL,aAAoBK,CAAAA,SAApB,CACdrF,aAAA,CAAcgF,aAAoBK,CAAAA,SAAlC,CADc,CAEd,IACJ,OAAMC,aAAeN,aAAoBM,CAAAA,YAApB,CACjBtF,aAAA,CAAcgF,aAAoBM,CAAAA,YAAlC,CADiB,CAEjB,IAFJ,CAGMC,iBAAmBP,aAAoBO,CAAAA,gBAApB,CACrBvF,aAAA,CAAcgF,aAAoBO,CAAAA,gBAAlC,CADqB,CAErB,IALJ,CAQMC,WAAaR,aAAoBQ,CAAAA,UAApB,CACfR,aAAoBQ,CAAAA,UAAWhE,CAAAA,GAA/B,CAAmC2C,cAAnC,CADe,CAEf,EAEJ,OAAO,KAAIsB,OAAQC,CAAAA,aAAZ,CAA0B,CAC/BnF,YAAayE,aAAoBzE,CAAAA,WADF;AAE/BoF,MAAON,OAFwB,CAG/BO,SAAUN,YAHqB,CAI/BO,aAAcN,gBAJiB,CAK/BpD,MAAOhE,MAAOqE,CAAAA,MAAP,CAAczC,OAAd,CALwB,CAM/ByF,UAN+B,CAO/BM,YACc,IAAZ,GAAAtH,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQsH,CAAAA,WAR7B,CAA1B,CAzC0C,CAlCnD,KAAIhB,WAAa9G,OAAA,CAAQ,+CAAR,CAAjB,CAEI4B,SAAW5B,OAAA,CAAQ,6CAAR,CAFf,CAII2G,cAAgB3G,OAAA,CAAQ,kDAAR,CAJpB,CAMIyE,WAAazE,OAAA,CAAQ,+CAAR,CANjB,CAQIgG,QAAUhG,OAAA,CAAQ,6CAAR,CARd;AAUIkB,YAAclB,OAAA,CAAQ,6CAAR,CAVlB,CAYIuG,YAAcvG,OAAA,CAAQ,6CAAR,CAZlB,CAcIY,eAAiBZ,OAAA,CAAQ,gDAAR,CAdrB,CAgBIkH,SAAWlH,OAAA,CAAQ,0CAAR,CAhBf,CAkBIyH,QAAUzH,OAAA,CAAQ,yCAAR,CAlBd,CAoBI8F,cAAgB9F,OAAA,CAAQ,oDAAR,CA5BgG;",
"sources":["node_modules/graphql/utilities/buildClientSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$buildClientSchema\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.buildClientSchema = buildClientSchema;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _parser = require('../language/parser.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _scalars = require('../type/scalars.js');\n\nvar _schema = require('../type/schema.js');\n\nvar _valueFromAST = require('./valueFromAST.js');\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nfunction buildClientSchema(introspection, options) {\n  ((0, _isObjectLike.isObjectLike)(introspection) &&\n    (0, _isObjectLike.isObjectLike)(introspection.__schema)) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ${(0,\n      _inspect.inspect)(introspection)}.`,\n    ); // Get the schema from the introspection result.\n\n  const schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  const typeMap = (0, _keyValMap.keyValMap)(\n    schemaIntrospection.types,\n    (typeIntrospection) => typeIntrospection.name,\n    (typeIntrospection) => buildType(typeIntrospection),\n  ); // Include standard types only if they are used.\n\n  for (const stdType of [\n    ..._scalars.specifiedScalarTypes,\n    ..._introspection.introspectionTypes,\n  ]) {\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n  const queryType = schemaIntrospection.queryType\n    ? getObjectType(schemaIntrospection.queryType)\n    : null;\n  const mutationType = schemaIntrospection.mutationType\n    ? getObjectType(schemaIntrospection.mutationType)\n    : null;\n  const subscriptionType = schemaIntrospection.subscriptionType\n    ? getObjectType(schemaIntrospection.subscriptionType)\n    : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  const directives = schemaIntrospection.directives\n    ? schemaIntrospection.directives.map(buildDirective)\n    : []; // Then produce and return a Schema with these types.\n\n  return new _schema.GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: Object.values(typeMap),\n    directives,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === _introspection.TypeKind.LIST) {\n      const itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new _definition.GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {\n      const nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      const nullableType = getType(nullableRef);\n      return new _definition.GraphQLNonNull(\n        (0, _definition.assertNullableType)(nullableType),\n      );\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    const typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(\n        `Unknown type reference: ${(0, _inspect.inspect)(typeRef)}.`,\n      );\n    }\n\n    const type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\n        `Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`,\n      );\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return (0, _definition.assertObjectType)(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return (0, _definition.assertInterfaceType)(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n  function buildType(type) {\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (type != null && type.name != null && type.kind != null) {\n      // FIXME: Properly type IntrospectionType, it's a breaking change so fix in v17\n      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n      switch (type.kind) {\n        case _introspection.TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case _introspection.TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case _introspection.TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case _introspection.TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case _introspection.TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case _introspection.TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    const typeStr = (0, _inspect.inspect)(type);\n    throw new Error(\n      `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`,\n    );\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new _definition.GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByURL: scalarIntrospection.specifiedByURL,\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (\n      implementingIntrospection.interfaces === null &&\n      implementingIntrospection.kind === _introspection.TypeKind.INTERFACE\n    ) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      const implementingIntrospectionStr = (0, _inspect.inspect)(\n        implementingIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing interfaces: ${implementingIntrospectionStr}.`,\n      );\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new _definition.GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: () => buildImplementationsList(objectIntrospection),\n      fields: () => buildFieldDefMap(objectIntrospection),\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new _definition.GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: () => buildImplementationsList(interfaceIntrospection),\n      fields: () => buildFieldDefMap(interfaceIntrospection),\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      const unionIntrospectionStr = (0, _inspect.inspect)(unionIntrospection);\n      throw new Error(\n        `Introspection result missing possibleTypes: ${unionIntrospectionStr}.`,\n      );\n    }\n\n    return new _definition.GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: () => unionIntrospection.possibleTypes.map(getObjectType),\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      const enumIntrospectionStr = (0, _inspect.inspect)(enumIntrospection);\n      throw new Error(\n        `Introspection result missing enumValues: ${enumIntrospectionStr}.`,\n      );\n    }\n\n    return new _definition.GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: (0, _keyValMap.keyValMap)(\n        enumIntrospection.enumValues,\n        (valueIntrospection) => valueIntrospection.name,\n        (valueIntrospection) => ({\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason,\n        }),\n      ),\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      const inputObjectIntrospectionStr = (0, _inspect.inspect)(\n        inputObjectIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`,\n      );\n    }\n\n    return new _definition.GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(\n        `Introspection result missing fields: ${(0, _inspect.inspect)(\n          typeIntrospection,\n        )}.`,\n      );\n    }\n\n    return (0, _keyValMap.keyValMap)(\n      typeIntrospection.fields,\n      (fieldIntrospection) => fieldIntrospection.name,\n      buildField,\n    );\n  }\n\n  function buildField(fieldIntrospection) {\n    const type = getType(fieldIntrospection.type);\n\n    if (!(0, _definition.isOutputType)(type)) {\n      const typeStr = (0, _inspect.inspect)(type);\n      throw new Error(\n        `Introspection must provide output type for fields, but received: ${typeStr}.`,\n      );\n    }\n\n    if (!fieldIntrospection.args) {\n      const fieldIntrospectionStr = (0, _inspect.inspect)(fieldIntrospection);\n      throw new Error(\n        `Introspection result missing field args: ${fieldIntrospectionStr}.`,\n      );\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type,\n      args: buildInputValueDefMap(fieldIntrospection.args),\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return (0, _keyValMap.keyValMap)(\n      inputValueIntrospections,\n      (inputValue) => inputValue.name,\n      buildInputValue,\n    );\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    const type = getType(inputValueIntrospection.type);\n\n    if (!(0, _definition.isInputType)(type)) {\n      const typeStr = (0, _inspect.inspect)(type);\n      throw new Error(\n        `Introspection must provide input type for arguments, but received: ${typeStr}.`,\n      );\n    }\n\n    const defaultValue =\n      inputValueIntrospection.defaultValue != null\n        ? (0, _valueFromAST.valueFromAST)(\n            (0, _parser.parseValue)(inputValueIntrospection.defaultValue),\n            type,\n          )\n        : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type,\n      defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason,\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      const directiveIntrospectionStr = (0, _inspect.inspect)(\n        directiveIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing directive args: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    if (!directiveIntrospection.locations) {\n      const directiveIntrospectionStr = (0, _inspect.inspect)(\n        directiveIntrospection,\n      );\n      throw new Error(\n        `Introspection result missing directive locations: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    return new _directives.GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args),\n    });\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","buildClientSchema","introspection","options","getType","typeRef","kind","_introspection","TypeKind","LIST","itemRef","ofType","Error","_definition","GraphQLList","NON_NULL","nullableRef","nullableType","GraphQLNonNull","assertNullableType","getNamedType","typeName","name","_inspect","inspect","type","typeMap","getObjectType","assertObjectType","getInterfaceType","assertInterfaceType","buildType","SCALAR","GraphQLScalarType","description","specifiedByURL","OBJECT","buildObjectDef","INTERFACE","buildInterfaceDef","UNION","buildUnionDef","ENUM","buildEnumDef","INPUT_OBJECT","buildInputObjectDef","typeStr","buildImplementationsList","implementingIntrospection","interfaces","implementingIntrospectionStr","map","objectIntrospection","GraphQLObjectType","fields","buildFieldDefMap","interfaceIntrospection","GraphQLInterfaceType","unionIntrospection","possibleTypes","unionIntrospectionStr","GraphQLUnionType","types","enumIntrospection","enumValues","enumIntrospectionStr","GraphQLEnumType","values","_keyValMap","keyValMap","valueIntrospection","deprecationReason","inputObjectIntrospection","inputFields","inputObjectIntrospectionStr","GraphQLInputObjectType","buildInputValueDefMap","typeIntrospection","fieldIntrospection","buildField","isOutputType","args","fieldIntrospectionStr","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","isInputType","defaultValue","_valueFromAST","valueFromAST","_parser","parseValue","undefined","buildDirective","directiveIntrospection","directiveIntrospectionStr","locations","_directives","GraphQLDirective","isRepeatable","slice","_isObjectLike","isObjectLike","__schema","_devAssert","devAssert","schemaIntrospection","stdType","_scalars","specifiedScalarTypes","introspectionTypes","queryType","mutationType","subscriptionType","directives","_schema","GraphQLSchema","query","mutation","subscription","assumeValid"]
}
