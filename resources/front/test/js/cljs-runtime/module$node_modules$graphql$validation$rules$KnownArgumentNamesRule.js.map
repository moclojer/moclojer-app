{
"version":3,
"file":"module$node_modules$graphql$validation$rules$KnownArgumentNamesRule.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/graphql/validation/rules/KnownArgumentNamesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$KnownArgumentNamesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;\nexports.KnownArgumentNamesRule = KnownArgumentNamesRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _directives = require('../../type/directives.js');\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nfunction KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = (0, _suggestionList.suggestionList)(\n          argName,\n          knownArgsNames,\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nfunction KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = (0, _suggestionList.suggestionList)(\n              argName,\n              knownArgs,\n            );\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  (0, _didYouMean.didYouMean)(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","KnownArgumentNamesOnDirectivesRule","context","directiveArgs","Object","create","schema","getSchema","definedDirectives","getDirectives","_directives","specifiedDirectives","directive","name","args","map","arg","astDefinitions","getDocument","definitions","def","kind","_kinds","Kind","DIRECTIVE_DEFINITION","_def$arguments","argsNodes","arguments","value","Directive","directiveNode","directiveName","knownArgs","argNode","argName","includes","suggestions","_suggestionList","suggestionList","reportError","_GraphQLError","GraphQLError","_didYouMean","didYouMean","nodes","defineProperty","KnownArgumentNamesRule","Argument","argDef","getArgument","fieldDef","getFieldDef","parentType","getParentType","knownArgsNames"]
}
