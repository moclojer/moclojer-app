{
"version":3,
"file":"module$node_modules$graphql$validation$rules$VariablesInAllowedPositionRule.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$VariablesInAllowedPositionRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeComparators = require('../../utilities/typeComparators.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nfunction VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = (0, _inspect.inspect)(varType);\n              const typeStr = (0, _inspect.inspect)(type);\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (\n    (0, _definition.isNonNullType)(locationType) &&\n    !(0, _definition.isNonNullType)(varType)\n  ) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return (0, _typeComparators.isTypeSubTypeOf)(\n      schema,\n      varType,\n      nullableLocationType,\n    );\n  }\n\n  return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","VariablesInAllowedPositionRule","context","varDefMap","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","type","defaultValue","varName","name","varDef","schema","getSchema","varType","_typeFromAST","typeFromAST","_definition","isNonNullType","locationType","hasLocationDefaultValue","undefined","locationDefaultValue","varDefaultValue","kind","_kinds","Kind","NULL","_typeComparators","isTypeSubTypeOf","ofType","varTypeStr","_inspect","inspect","typeStr","reportError","_GraphQLError","GraphQLError","nodes","VariableDefinition","variable"]
}
