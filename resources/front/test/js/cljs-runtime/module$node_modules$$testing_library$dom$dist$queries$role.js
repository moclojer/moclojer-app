shadow$provide.module$node_modules$$testing_library$dom$dist$queries$role=function(global,require,module,exports){function makeRoleSelector(role){const explicitRoleSelector=`*[role~="${role}"]`;role=_ariaQuery.roleElements.get(role)??new Set;role=new Set(Array.from(role).map(({name})=>name));return[explicitRoleSelector].concat(Array.from(role)).join(",")}Object.defineProperty(exports,"__esModule",{value:!0});exports.queryByRole=exports.queryAllByRole=exports.getByRole=exports.getAllByRole=exports.findByRole=
exports.findAllByRole=void 0;var _domAccessibilityApi=require("module$node_modules$dom_accessibility_api$dist$index"),_ariaQuery=require("module$node_modules$aria_query$lib$index"),_roleHelpers=require("module$node_modules$$testing_library$dom$dist$role_helpers");global=require("module$node_modules$$testing_library$dom$dist$query_helpers");var _helpers=require("module$node_modules$$testing_library$dom$dist$helpers"),_allUtils=require("module$node_modules$$testing_library$dom$dist$queries$all_utils");
require=(container,role,{hidden=(0,_allUtils.getConfig)().defaultHidden,name,description,queryFallbacks=!1,selected,busy,checked,pressed,current,level,expanded,value:{now:valueNow,min:valueMin,max:valueMax,text:valueText}={}}={})=>{function cachedIsSubtreeInaccessible(element){subtreeIsInaccessibleCache.has(element)||subtreeIsInaccessibleCache.set(element,(0,_roleHelpers.isSubtreeInaccessible)(element));return subtreeIsInaccessibleCache.get(element)}(0,_helpers.checkContainerType)(container);if(void 0!==
selected){var _allRoles$get;if(void 0===(null==(_allRoles$get=_ariaQuery.roles.get(role))?void 0:_allRoles$get.props["aria-selected"]))throw Error(`"aria-selected" is not supported on role "${role}".`);}if(void 0!==busy){var _allRoles$get2;if(void 0===(null==(_allRoles$get2=_ariaQuery.roles.get(role))?void 0:_allRoles$get2.props["aria-busy"]))throw Error(`"aria-busy" is not supported on role "${role}".`);}if(void 0!==checked){var _allRoles$get3;if(void 0===(null==(_allRoles$get3=_ariaQuery.roles.get(role))?
void 0:_allRoles$get3.props["aria-checked"]))throw Error(`"aria-checked" is not supported on role "${role}".`);}if(void 0!==pressed){var _allRoles$get4;if(void 0===(null==(_allRoles$get4=_ariaQuery.roles.get(role))?void 0:_allRoles$get4.props["aria-pressed"]))throw Error(`"aria-pressed" is not supported on role "${role}".`);}if(void 0!==current){var _allRoles$get5;if(void 0===(null==(_allRoles$get5=_ariaQuery.roles.get(role))?void 0:_allRoles$get5.props["aria-current"]))throw Error(`"aria-current" is not supported on role "${role}".`);
}if(void 0!==level&&"heading"!==role)throw Error(`Role "${role}" cannot have "level" property.`);if(void 0!==valueNow){var _allRoles$get6;if(void 0===(null==(_allRoles$get6=_ariaQuery.roles.get(role))?void 0:_allRoles$get6.props["aria-valuenow"]))throw Error(`"aria-valuenow" is not supported on role "${role}".`);}if(void 0!==valueMax){var _allRoles$get7;if(void 0===(null==(_allRoles$get7=_ariaQuery.roles.get(role))?void 0:_allRoles$get7.props["aria-valuemax"]))throw Error(`"aria-valuemax" is not supported on role "${role}".`);
}if(void 0!==valueMin){var _allRoles$get8;if(void 0===(null==(_allRoles$get8=_ariaQuery.roles.get(role))?void 0:_allRoles$get8.props["aria-valuemin"]))throw Error(`"aria-valuemin" is not supported on role "${role}".`);}if(void 0!==valueText){var _allRoles$get9;if(void 0===(null==(_allRoles$get9=_ariaQuery.roles.get(role))?void 0:_allRoles$get9.props["aria-valuetext"]))throw Error(`"aria-valuetext" is not supported on role "${role}".`);}if(void 0!==expanded){var _allRoles$get10;if(void 0===(null==
(_allRoles$get10=_ariaQuery.roles.get(role))?void 0:_allRoles$get10.props["aria-expanded"]))throw Error(`"aria-expanded" is not supported on role "${role}".`);}const subtreeIsInaccessibleCache=new WeakMap;return Array.from(container.querySelectorAll(makeRoleSelector(role))).filter(node=>{if(node.hasAttribute("role")){node=node.getAttribute("role");if(queryFallbacks)return node.split(" ").filter(Boolean).some(roleAttributeToken=>roleAttributeToken===role);[node]=node.split(" ");return node===role}return(0,_roleHelpers.getImplicitAriaRoles)(node).some(implicitRole=>
implicitRole===role)}).filter(element=>{if(void 0!==selected)return selected===(0,_roleHelpers.computeAriaSelected)(element);if(void 0!==busy)return busy===(0,_roleHelpers.computeAriaBusy)(element);if(void 0!==checked)return checked===(0,_roleHelpers.computeAriaChecked)(element);if(void 0!==pressed)return pressed===(0,_roleHelpers.computeAriaPressed)(element);if(void 0!==current)return current===(0,_roleHelpers.computeAriaCurrent)(element);if(void 0!==expanded)return expanded===(0,_roleHelpers.computeAriaExpanded)(element);
if(void 0!==level)return level===(0,_roleHelpers.computeHeadingLevel)(element);if(void 0!==valueNow||void 0!==valueMax||void 0!==valueMin||void 0!==valueText){let valueMatches=!0;void 0!==valueNow&&valueMatches&&(valueMatches=valueNow===(0,_roleHelpers.computeAriaValueNow)(element));void 0!==valueMax&&valueMatches&&(valueMatches=valueMax===(0,_roleHelpers.computeAriaValueMax)(element));void 0!==valueMin&&valueMatches&&(valueMatches=valueMin===(0,_roleHelpers.computeAriaValueMin)(element));void 0!==
valueText&&valueMatches&&(valueMatches=(0,_allUtils.matches)((0,_roleHelpers.computeAriaValueText)(element)??null,element,valueText,text=>text));return valueMatches}return!0}).filter(element=>void 0===name?!0:(0,_allUtils.matches)((0,_domAccessibilityApi.computeAccessibleName)(element,{computedStyleSupportsPseudoElements:(0,_allUtils.getConfig)().computedStyleSupportsPseudoElements}),element,name,text=>text)).filter(element=>void 0===description?!0:(0,_allUtils.matches)((0,_domAccessibilityApi.computeAccessibleDescription)(element,
{computedStyleSupportsPseudoElements:(0,_allUtils.getConfig)().computedStyleSupportsPseudoElements}),element,description,text=>text)).filter(element=>!1===hidden?!1===(0,_roleHelpers.isInaccessible)(element,{isSubtreeInaccessible:cachedIsSubtreeInaccessible}):!0)};const getNameHint=name=>void 0===name?"":"string"===typeof name?` and name "${name}"`:` and name \`${name}\``;global=(0,global.wrapAllByQueryWithSuggestion)(require,require.name,"queryAll");exports.queryAllByRole=global;const [queryByRole,
getAllByRole,getByRole,findAllByRole,findByRole]=(0,_allUtils.buildQueries)(require,(c,role,{name}={})=>`Found multiple elements with the role "${role}"${getNameHint(name)}`,(container,role,{hidden=(0,_allUtils.getConfig)().defaultHidden,name,description}={})=>{if((0,_allUtils.getConfig)()._disableExpensiveErrorDiagnostics)return`Unable to find role="${role}"${getNameHint(name)}`;let roles="";Array.from(container.children).forEach(childElement=>{roles+=(0,_roleHelpers.prettyRoles)(childElement,{hidden,
includeDescription:void 0!==description})});container=0===roles.length?!1===hidden?"There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole":"There are no available roles.":`
Here are the ${!1===hidden?"accessible":"available"} roles:

  ${roles.replace(/\n/g,"\n  ").replace(/\n\s\s\n/g,"\n\n")}
`.trim();return`
Unable to find an ${!1===hidden?"accessible ":""}element with the role "${role}"${void 0===name?"":"string"===typeof name?` and name "${name}"`:` and name \`${name}\``}${void 0===description?"":"string"===typeof description?` and description "${description}"`:` and description \`${description}\``}

${container}`.trim()});exports.findByRole=findByRole;exports.findAllByRole=findAllByRole;exports.getByRole=getByRole;exports.getAllByRole=getAllByRole;exports.queryByRole=queryByRole}
//# sourceMappingURL=module$node_modules$$testing_library$dom$dist$queries$role.js.map
