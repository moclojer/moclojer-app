{
"version":3,
"file":"module$node_modules$graphql$execution$mapAsyncIterator.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,gBAAR,CAMAA,QAAyB,CAACC,QAAD,CAAWC,QAAX,CAAqB,CAG5CC,cAAeA,UAAS,CAACC,MAAD,CAAS,CAC/B,GAAIA,MAAOC,CAAAA,IAAX,CACE,MAAOD,OAGT,IAAI,CACF,MAAO,CACLL,MAAO,MAAMG,QAAA,CAASE,MAAOL,CAAAA,KAAhB,CADR,CAELM,KAAM,CAAA,CAFD,CADL,CAKF,MAAOC,KAAP,CAAc,CAGd,GAA+B,UAA/B,GAAI,MAAOC,SAASC,CAAAA,MAApB,CACE,GAAI,CACF,MAAMD,QAASC,CAAAA,MAAT,EADJ,CAEF,MAAOC,EAAP,CAAW,EAKf,KAAMH,MAAN,CAXc,CAVe,CAFjC,MAAMC,SAAWN,QAAA,CAASS,MAAOC,CAAAA,aAAhB,CAAA,EA4BjB,OAAO,CACCC,UAAI,EAAG,CACX,MAAOT,UAAA,CAAU,MAAMI,QAASK,CAAAA,IAAT,EAAhB,CADI,CADR;AAKCJ,YAAM,EAAG,CAEb,MAAkC,UAA3B,GAAA,MAAOD,SAASC,CAAAA,MAAhB,CACHL,SAAA,CAAU,MAAMI,QAASC,CAAAA,MAAT,EAAhB,CADG,CAEH,CACET,MAAOc,IAAAA,EADT,CAEER,KAAM,CAAA,CAFR,CAJS,CALV,CAeCS,WAAK,CAACR,KAAD,CAAQ,CACjB,GAA8B,UAA9B,GAAI,MAAOC,SAASO,CAAAA,KAApB,CACE,MAAOX,UAAA,CAAU,MAAMI,QAASO,CAAAA,KAAT,CAAeR,KAAf,CAAhB,CAGT,MAAMA,MAAN,CALiB,CAfd,CAuBL,CAACI,MAAOC,CAAAA,aAAR,CAAsB,EAAG,CACvB,MAAO,KADgB,CAvBpB,CA7BqC,CAZqE;",
"sources":["node_modules/graphql/execution/mapAsyncIterator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$execution$mapAsyncIterator\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.mapAsyncIterator = mapAsyncIterator;\n\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nfunction mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n\n    try {\n      return {\n        value: await callback(result.value),\n        done: false,\n      };\n    } catch (error) {\n      /* c8 ignore start */\n      // FIXME: add test case\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n\n      throw error;\n      /* c8 ignore stop */\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function'\n        ? mapResult(await iterator.return())\n        : {\n            value: undefined,\n            done: true,\n          };\n    },\n\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n\n      throw error;\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","mapAsyncIterator","iterable","callback","mapResult","result","done","error","iterator","return","_e","Symbol","asyncIterator","next","undefined","throw"]
}
