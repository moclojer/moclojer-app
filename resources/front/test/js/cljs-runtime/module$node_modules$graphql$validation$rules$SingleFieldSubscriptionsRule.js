shadow$provide.module$node_modules$graphql$validation$rules$SingleFieldSubscriptionsRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.SingleFieldSubscriptionsRule=function(context){return{OperationDefinition(node){if("subscription"===node.operation){var schema=context.getSchema();const subscriptionType=schema.getSubscriptionType();if(subscriptionType){const operationName=node.name?node.name.value:null,variableValues=Object.create(null),document=
context.getDocument(),fragments=Object.create(null);for(const definition of document.definitions)definition.kind===_kinds.Kind.FRAGMENT_DEFINITION&&(fragments[definition.name.value]=definition);node=(0,_collectFields.collectFields)(schema,fragments,variableValues,subscriptionType,node.selectionSet);1<node.size&&(schema=[...node.values()].slice(1).flat(),context.reportError(new _GraphQLError.GraphQLError(null!=operationName?`Subscription "${operationName}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",
{nodes:schema})));for(const fieldNodes of node.values())fieldNodes[0].name.value.startsWith("__")&&context.reportError(new _GraphQLError.GraphQLError(null!=operationName?`Subscription "${operationName}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:fieldNodes}))}}}}};var _GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_kinds=require("module$node_modules$graphql$language$kinds"),_collectFields=
require("module$node_modules$graphql$execution$collectFields")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$SingleFieldSubscriptionsRule.js.map
