{"version":3,"sources":["front/dev/msw/core.cljs"],"mappings":";;AAMA,4BAAA,5BAAeA;AAEf,GAAA,QAAAC,kCAAAC,sCAAAC,0CAAAC,+CAAAC;AAAA;AAAA,AAAA,AAASC,gCAAW,6CAAA,7CAACC;;AAErB,mCAAA,nCAAMC,8EAAeC;AAArB,AACE,GAAU,CAAA,AAAAC,kDAAA,lCAAOJ;AAAjB;AAAA,AACE,AAAgB,AAAAI,gBAAYJ;;;AAC9B,AAACK,sBAAOL,8BAAWG;;OACf,AAAA,AAAAC,gBAASJ,qCAAW,qBAAA,2CAAA,gFAAA,hJAACM,rDACrB,6NAAA,pOACA;AADA,AAAQ,0EAAA,nEAACC,yCAAab;UACtB,WAAAc;AAAA,AAAS,mBAAAA,ZAACC;;;AAEhB,kCAAA,lCAAMC;AAAN,AACE,AAAA,AAAAN,gBAAQJ;;AACR,oDAAA,pDAACK,sBAAOL;;AACR,OAACW,4CAAgBjB;;AAEnB,AAAA,iCAAA,yCAAAkB,1EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+DAAA,/DAAMD;AAAN,AACM,OAACE,6DAAOC;;;AADd,CAAA,+DAAA,/DAAMH,0EAEFI;AAFJ,AAGG,OAAChB,iCAAc,AAACiB,8CAAMC,8CAAgB,AAACC,0BAAYH;;;AAHtD,CAAA,yDAAA,zDAAMJ;;AAAN,AAKA,gCAAA,hCAAMQ;AAAN,AACE,OAACZ;;AAEH,gCAAA,hCAAMa;AAAN,AACE,oBAAI,AAACC,mCAAY9B;AACf,OAACsB;;AACD,OAACS","names":["front.dev.msw.core/ss-key","js/front","js/front.dev","js/front.dev.msw","js/front.dev.msw.core","js/front.dev.msw.core.mock-state","front.dev.msw.core/mock-state","cljs.core.atom","front.dev.msw.core/start-browser","handlers","cljs.core/deref","cljs.core/reset!","cljs.core/clj->js","front.dev.session-storage/set-item!","p1__54183#","js/console.log","front.dev.msw.core/stop-browser","front.dev.session-storage/remove-item!","var_args","G__54188","front.dev.msw.core/start!","js/Error","front.dev.msw.core.start_BANG_","front.dev.msw.config/default","custom-config","cljs.core.apply","js/module$node_modules$msw$lib$index.setupWorker","front.dev.msw.mount/mount","front.dev.msw.core/stop!","front.dev.msw.core/init!","front.dev.session-storage/get-item","js/Promise.resolve"],"sourcesContent":["(ns front.dev.msw.core\n  (:require [\"msw\" :as msw]\n            [front.dev.msw.config :as config]\n            [front.dev.msw.mount :as mount]\n            [front.dev.session-storage :as ss]))\n\n(def ^:private ss-key \"mock-active?\")\n\n(defonce mock-state (atom nil))\n\n(defn start-browser [handlers]\n  (when-not (nil? @mock-state)\n    (.resetHandlers ^js/Object @mock-state))\n  (reset! mock-state handlers)\n  (-> (.start @mock-state (clj->js {:onUnhandledRequest \"bypass\"}))\n      (.then #(ss/set-item! ss-key true))\n      (.catch #(js/console.log %))))\n\n(defn stop-browser []\n  (.stop @mock-state)\n  (reset! mock-state nil)\n  (ss/remove-item! ss-key))\n\n(defn start!\n  ([] (start! config/default))\n  ([custom-config]\n   (start-browser (apply msw/setupWorker (mount/mount custom-config)))))\n\n(defn stop! []\n  (stop-browser))\n\n(defn init! []\n  (if (ss/get-item ss-key)\n    (start!)\n    (js/Promise.resolve)))\n"]}