{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestQueryBuilder.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@supabase/postgrest-js/dist/main/PostgrestQueryBuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestQueryBuilder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nclass PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, { head = false, count, } = {}) {\n        const method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    insert(values, { count, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [];\n        const body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    upsert(values, { onConflict, ignoreDuplicates = false, count, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        const body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, { count, } = {}) {\n        const method = 'PATCH';\n        const prefersHeaders = [];\n        const body = values;\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({ count, } = {}) {\n        const method = 'DELETE';\n        const prefersHeaders = [];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestQueryBuilder;\n//# sourceMappingURL=PostgrestQueryBuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","PostgrestFilterBuilder_1","PostgrestQueryBuilder","constructor","url","headers","schema","fetch","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","default","allowEmpty","insert","values","prefersHeaders","push","unshift","Array","isArray","reduce","acc","x","concat","keys","length","uniqueColumns","Set","column","body","upsert","onConflict","ignoreDuplicates","undefined","update","delete"]
}
