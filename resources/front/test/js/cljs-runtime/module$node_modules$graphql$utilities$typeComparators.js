shadow$provide.module$node_modules$graphql$utilities$typeComparators=function(global,require,module,exports){function isEqualType(typeA,typeB){return typeA===typeB?!0:(0,_definition.isNonNullType)(typeA)&&(0,_definition.isNonNullType)(typeB)||(0,_definition.isListType)(typeA)&&(0,_definition.isListType)(typeB)?isEqualType(typeA.ofType,typeB.ofType):!1}function isTypeSubTypeOf(schema,maybeSubType,superType){return maybeSubType===superType?!0:(0,_definition.isNonNullType)(superType)?(0,_definition.isNonNullType)(maybeSubType)?
isTypeSubTypeOf(schema,maybeSubType.ofType,superType.ofType):!1:(0,_definition.isNonNullType)(maybeSubType)?isTypeSubTypeOf(schema,maybeSubType.ofType,superType):(0,_definition.isListType)(superType)?(0,_definition.isListType)(maybeSubType)?isTypeSubTypeOf(schema,maybeSubType.ofType,superType.ofType):!1:(0,_definition.isListType)(maybeSubType)?!1:(0,_definition.isAbstractType)(superType)&&((0,_definition.isInterfaceType)(maybeSubType)||(0,_definition.isObjectType)(maybeSubType))&&schema.isSubType(superType,
maybeSubType)}Object.defineProperty(exports,"__esModule",{value:!0});exports.doTypesOverlap=function(schema,typeA,typeB){return typeA===typeB?!0:(0,_definition.isAbstractType)(typeA)?(0,_definition.isAbstractType)(typeB)?schema.getPossibleTypes(typeA).some(type=>schema.isSubType(typeB,type)):schema.isSubType(typeA,typeB):(0,_definition.isAbstractType)(typeB)?schema.isSubType(typeB,typeA):!1};exports.isEqualType=isEqualType;exports.isTypeSubTypeOf=isTypeSubTypeOf;var _definition=require("module$node_modules$graphql$type$definition")}
//# sourceMappingURL=module$node_modules$graphql$utilities$typeComparators.js.map
