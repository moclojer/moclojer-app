{
"version":3,
"file":"module$node_modules$$supabase$realtime_js$dist$main$lib$timer.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAaA,MAAMC,MAAN,CACIC,WAAW,CAACC,QAAD,CAAWC,SAAX,CAAsB,CAE7B,IAAKA,CAAAA,SAAL,CAAiBA,SACjB,KAAKC,CAAAA,KAAL,CAAaC,IAAAA,EACb,KAAKC,CAAAA,KAAL,CAAa,CACb,KAAKJ,CAAAA,QAAL,CAAgBA,QAChB,KAAKC,CAAAA,SAAL,CAAiBA,SANY,CAQjCI,KAAK,EAAG,CACJ,IAAKD,CAAAA,KAAL,CAAa,CACbE,aAAA,CAAa,IAAKJ,CAAAA,KAAlB,CAFI,CAKRK,eAAe,EAAG,CACdD,YAAA,CAAa,IAAKJ,CAAAA,KAAlB,CACA,KAAKA,CAAAA,KAAL,CAAaM,UAAA,CAAW,EAAA,EAAM,CAC1B,IAAKJ,CAAAA,KAAL,EAA0B,CAC1B,KAAKJ,CAAAA,QAAL,EAF0B,CAAjB,CAGV,IAAKC,CAAAA,SAAL,CAAe,IAAKG,CAAAA,KAApB,CAA4B,CAA5B,CAHU,CAFC,CAdtB,CAsBAV,OAAQe,CAAAA,OAAR;AAAkBX,KArCwG;",
"sources":["node_modules/@supabase/realtime-js/dist/main/lib/timer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$realtime_js$dist$main$lib$timer\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nclass Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\nexports.default = Timer;\n//# sourceMappingURL=timer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Timer","constructor","callback","timerCalc","timer","undefined","tries","reset","clearTimeout","scheduleTimeout","setTimeout","default"]
}
