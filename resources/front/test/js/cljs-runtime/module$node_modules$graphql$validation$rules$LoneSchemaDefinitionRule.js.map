{
"version":3,
"file":"module$node_modules$graphql$validation$rules$LoneSchemaDefinitionRule.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,wBAAR,CASAA,QAAiC,CAACC,OAAD,CAAU,CAAA,IACrCC,IADqC,CAC/BC,KAD+B,CACxBC,kBAEjB,OAAMC,UAAYJ,OAAQK,CAAAA,SAAR,EAAlB,CACMC,eAcmC,IAbvC,IAACL,IAAD,CASsC,IARpC,IAACC,KAAD,CAI+B,IAH7B,IAACC,kBAAD,CACgB,IAAd,GAAAC,SAAA,EAAoC,IAAK,EAAzC,GAAsBA,SAAtB,CACI,IAAK,EADT,CAEIA,SAAUG,CAAAA,OAHhB,GAG4D,IAAK,EAHjE,GAGqCJ,kBAHrC,CAIIA,kBAJJ,CAKkB,IAAd,GAAAC,SAAA,EAAoC,IAAK,EAAzC;AAAsBA,SAAtB,CACA,IAAK,EADL,CAEAA,SAAUI,CAAAA,YAAV,EARN,GAQsD,IAAK,EAR3D,GAQ4CN,KAR5C,CASIA,KATJ,CAUkB,IAAd,GAAAE,SAAA,EAAoC,IAAK,EAAzC,GAAsBA,SAAtB,CACA,IAAK,EADL,CAEAA,SAAUK,CAAAA,eAAV,EAbN,GAawD,IAAK,EAb7D,GAa+CR,IAb/C,CAcIA,IAdJ,CAekB,IAAd,GAAAG,SAAA,EAAoC,IAAK,EAAzC,GAAsBA,SAAtB,CACA,IAAK,EADL,CAEAA,SAAUM,CAAAA,mBAAV,EACN,KAAIC,uBAAyB,CAC7B,OAAO,CACLC,gBAAgB,CAACC,IAAD,CAAO,CACjBP,cAAJ,CACEN,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACE,uDADF,CAEE,CACEC,MAAOJ,IADT,CAFF,CADF,CADF,EAY6B,CAW7B,CAXIF,sBAWJ,EAVEX,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACE,0CADF;AAEE,CACEC,MAAOJ,IADT,CAFF,CADF,CAUF,CAAA,EAAEF,sBAvBF,CADqB,CADlB,CAxBkC,CAP3C,KAAII,cAAgBtB,OAAA,CAAQ,gDAAR,CAR8G;",
"sources":["node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$LoneSchemaDefinitionRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nfunction LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            'Must provide only one schema definition.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","LoneSchemaDefinitionRule","context","_ref","_ref2","_oldSchema$astNode","oldSchema","getSchema","alreadyDefined","astNode","getQueryType","getMutationType","getSubscriptionType","schemaDefinitionsCount","SchemaDefinition","node","reportError","_GraphQLError","GraphQLError","nodes"]
}
