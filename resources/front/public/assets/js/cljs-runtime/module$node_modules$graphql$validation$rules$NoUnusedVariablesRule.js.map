{
"version":3,
"file":"module$node_modules$graphql$validation$rules$NoUnusedVariablesRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAYAA,QAA8B,CAACC,OAAD,CAAU,CACtC,IAAIC,aAAe,EACnB,OAAO,CACLC,oBAAqB,CACnBC,KAAK,EAAG,CACNF,YAAA,CAAe,EADT,CADW,CAKnBG,KAAK,CAACC,SAAD,CAAY,CACf,MAAMC,iBAAmBV,MAAOW,CAAAA,MAAP,CAAc,IAAd,CACzB,KAAMC,OAASR,OAAQS,CAAAA,0BAAR,CAAmCJ,SAAnC,CAEf,KAAK,MAAM,CAAEK,IAAF,CAAX,EAAuBF,OAAvB,CACEF,gBAAA,CAAiBI,IAAKC,CAAAA,IAAKb,CAAAA,KAA3B,CAAA,CAAoC,CAAA,CAGtC,KAAK,MAAMc,WAAX,GAA0BX,aAA1B,CACQY,MAEN;AAFqBD,WAAYE,CAAAA,QAASH,CAAAA,IAAKb,CAAAA,KAE/C,CAAuC,CAAA,CAAvC,GAAIQ,gBAAA,CAAiBO,MAAjB,CAAJ,EACEb,OAAQe,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACEZ,SAAUM,CAAAA,IAAV,CACK,cAAaE,MAAb,iCAA0DR,SAAUM,CAAAA,IAAKb,CAAAA,KAAzE,IADL,CAEK,cAAae,MAAb,kBAHP,CAIE,CACEK,MAAON,WADT,CAJF,CADF,CAZW,CALE,CADhB,CAiCLO,kBAAkB,CAACC,GAAD,CAAM,CACtBnB,YAAaoB,CAAAA,IAAb,CAAkBD,GAAlB,CADsB,CAjCnB,CAF+B,CAVxC,KAAIJ,cAAgBvB,OAAA,CAAQ,gDAAR,CAR2G;",
"sources":["node_modules/graphql/validation/rules/NoUnusedVariablesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$NoUnusedVariablesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoUnusedVariablesRule = NoUnusedVariablesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nfunction NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","NoUnusedVariablesRule","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","create","usages","getRecursiveVariableUsages","node","name","variableDef","variableName","variable","reportError","_GraphQLError","GraphQLError","nodes","VariableDefinition","def","push"]
}
