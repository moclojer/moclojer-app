{
"version":3,
"file":"module$node_modules$graphql$validation$rules$ValuesOfCorrectTypeRule.js",
"lineCount":7,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+HjIC,QAASA,iBAAgB,CAACC,OAAD,CAAUC,IAAV,CAAgB,CAEvC,IAAMC,aAAeF,OAAQG,CAAAA,YAAR,EAErB,IAAKD,YAAL,CAAA,CAIA,IAAME,KAAO,GAAIC,WAAYC,CAAAA,YAAhB,EAA8BJ,YAA9B,CAEb,IAAK,GAAIG,WAAYE,CAAAA,UAAhB,EAA4BH,IAA5B,CAAL,CAgBA,GAAI,CAOF,GAAoBI,IAAAA,EAApB,GANoBJ,IAAKK,CAAAA,YAALC,CAClBT,IADkBS,CAElBF,IAAAA,EAFkBE,CAMpB,CAA+B,CAC7B,MAAMC,QAAU,GAAIC,QAASC,CAAAA,OAAb,EAAsBX,YAAtB,CAChBF,QAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,2BAA0BL,OAA1B,YAA6C,GAAIM,QAASC,CAAAA,KAAb,EAC5CjB,IAD4C,CAA7C,GADH;AAIE,CACEkB,MAAOlB,IADT,CAJF,CADF,CAF6B,CAP7B,CAoBF,MAAOmB,KAAP,CAAc,CACRT,YAEN,CAFgB,GAAIC,QAASC,CAAAA,OAAb,EAAsBX,YAAtB,CAEhB,CAAIkB,KAAJ,WAAqBL,cAAcC,CAAAA,YAAnC,CACEhB,OAAQc,CAAAA,WAAR,CAAoBM,KAApB,CADF,CAGEpB,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,2BAA0BL,YAA1B,YAA6C,GAAIM,QAASC,CAAAA,KAAb,EAC5CjB,IAD4C,CAA7C,IADH,CAGUmB,KAAMC,CAAAA,OAHhB,CAIE,CACEF,MAAOlB,IADT,CAEEqB,cAAeF,KAFjB,CAJF,CADF,CANY,CApChB,IACQT,aACN,CADgB,GAAIC,QAASC,CAAAA,OAAb,EAAsBX,YAAtB,CAChB,CAAAF,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,2BAA0BL,YAA1B,YAA6C,GAAIM,QAASC,CAAAA,KAAb,EAC5CjB,IAD4C,CAA7C,GADH;AAIE,CACEkB,MAAOlB,IADT,CAJF,CADF,CARF,CAJuC,CA5HzCsB,MAAOC,CAAAA,cAAP,CAAsB1B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C2B,MAAO,CAAA,CADoC,CAA7C,CAGA3B,QAAQ4B,CAAAA,uBAAR,CAwBAA,QAAgC,CAAC1B,OAAD,CAAU,CACxC,MAAO,CACL2B,SAAS,CAAC1B,IAAD,CAAO,CAGd,MAAMG,KAAO,GAAIC,WAAYuB,CAAAA,eAAhB,EACX5B,OAAQ6B,CAAAA,kBAAR,EADW,CAIb,IAAI,CAAC,GAAIxB,WAAYyB,CAAAA,UAAhB,EAA4B1B,IAA5B,CAAL,CAEE,MADAL,iBAAA,CAAiBC,OAAjB,CAA0BC,IAA1B,CACO,CAAA,CAAA,CATK,CADX,CAcL8B,WAAW,CAAC9B,IAAD,CAAO,CAChB,MAAMG,KAAO,GAAIC,WAAYC,CAAAA,YAAhB,EAA8BN,OAAQG,CAAAA,YAAR,EAA9B,CAEb,IAAI,CAAC,GAAIE,WAAY2B,CAAAA,iBAAhB,EAAmC5B,IAAnC,CAAL,CAEE,MADAL,iBAAA,CAAiBC,OAAjB,CAA0BC,IAA1B,CACO,CAAA,CAAA,CAGT,OAAMgC,aAAe,GAAIC,OAAQC,CAAAA,MAAZ,EACnBlC,IAAKmC,CAAAA,MADc;AAElBC,KAAD,EAAWA,KAAMC,CAAAA,IAAKb,CAAAA,KAFH,CAKrB,KAAK,MAAMc,QAAX,GAAuBhB,OAAOiB,CAAAA,MAAP,CAAcpC,IAAKqC,CAAAA,SAAL,EAAd,CAAvB,CAGE,GAAI,CAFcR,YAAAS,CAAaH,QAASD,CAAAA,IAAtBI,CAElB,EAAkB,GAAIrC,WAAYsC,CAAAA,oBAAhB,EAAsCJ,QAAtC,CAAlB,CAAmE,CACjE,MAAM5B,QAAU,GAAIC,QAASC,CAAAA,OAAb,EAAsB0B,QAASnC,CAAAA,IAA/B,CAChBJ,QAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,UAASZ,IAAKkC,CAAAA,IAAd,IAAsBC,QAASD,CAAAA,IAA/B,uBAA0D3B,OAA1D,qBADH,CAEE,CACEQ,MAAOlB,IADT,CAFF,CADF,CAFiE,CAhBrD,CAdb,CA4CL2C,WAAW,CAAC3C,IAAD,CAAO,CAChB,MAAM4C,WAAa,GAAIxC,WAAYC,CAAAA,YAAhB,EACjBN,OAAQ6B,CAAAA,kBAAR,EADiB,CAKnB,IAAI,CAFc7B,OAAQG,CAAAA,YAAR2C,EAElB,EAAkB,GAAIzC,WAAY2B,CAAAA,iBAAhB,EAAmCa,UAAnC,CAAlB,CAAkE,CAChE,MAAME;AAAc,GAAIC,eAAgBC,CAAAA,cAApB,EAClBhD,IAAKqC,CAAAA,IAAKb,CAAAA,KADQ,CAElBF,MAAO2B,CAAAA,IAAP,CAAYL,UAAWJ,CAAAA,SAAX,EAAZ,CAFkB,CAIpBzC,QAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,UAASf,IAAKqC,CAAAA,IAAKb,CAAAA,KAAnB,6BAAqDoB,UAAWP,CAAAA,IAAhE,IADH,CAEI,GAAIa,WAAYC,CAAAA,UAAhB,EAA4BL,WAA5B,CAFJ,CAGE,CACE5B,MAAOlB,IADT,CAHF,CADF,CALgE,CANlD,CA5Cb,CAmELoD,SAAS,CAACpD,IAAD,CAAO,CACd,MAAMG,KAAOJ,OAAQG,CAAAA,YAAR,EAET,IAAIE,WAAYiD,CAAAA,aAAhB,EAA+BlD,IAA/B,CAAJ,EACEJ,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,2BAA0B,GAAIJ,QAASC,CAAAA,OAAb,EACzBT,IADyB,CAA1B,YAEY,GAAIa,QAASC,CAAAA,KAAb,EAAoBjB,IAApB,CAFZ,GADH;AAIE,CACEkB,MAAOlB,IADT,CAJF,CADF,CAJY,CAnEX,CAoFLsD,UAAYtD,IAADsD,EAAUxD,gBAAA,CAAiBC,OAAjB,CAA0BC,IAA1B,CApFhB,CAqFLuD,SAAWvD,IAADuD,EAAUzD,gBAAA,CAAiBC,OAAjB,CAA0BC,IAA1B,CArFf,CAsFLwD,WAAaxD,IAADwD,EAAU1D,gBAAA,CAAiBC,OAAjB,CAA0BC,IAA1B,CAtFjB,CAuFLyD,YAAczD,IAADyD,EAAU3D,gBAAA,CAAiBC,OAAjB,CAA0BC,IAA1B,CAvFlB,CAwFL0D,aAAe1D,IAAD0D,EAAU5D,gBAAA,CAAiBC,OAAjB,CAA0BC,IAA1B,CAxFnB,CADiC,CAtB1C,KAAIkD,YAAcvD,OAAA,CAAQ,gDAAR,CAAlB,CAEIgB,SAAWhB,OAAA,CAAQ,6CAAR,CAFf,CAIIsC,QAAUtC,OAAA,CAAQ,4CAAR,CAJd,CAMIoD,gBAAkBpD,OAAA,CAAQ,oDAAR,CANtB;AAQImB,cAAgBnB,OAAA,CAAQ,gDAAR,CARpB,CAUIqB,SAAWrB,OAAA,CAAQ,8CAAR,CAVf,CAYIS,YAAcT,OAAA,CAAQ,6CAAR,CApB+G;",
"sources":["node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$ValuesOfCorrectTypeRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _keyMap = require('../../jsutils/keyMap.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nfunction ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = (0, _definition.getNullableType)(\n        context.getParentInputType(),\n      );\n\n      if (!(0, _definition.isListType)(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = (0, _definition.getNamedType)(context.getInputType());\n\n      if (!(0, _definition.isInputObjectType)(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = (0, _keyMap.keyMap)(\n        node.fields,\n        (field) => field.name.value,\n      );\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {\n          const typeStr = (0, _inspect.inspect)(fieldDef.type);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = (0, _definition.getNamedType)(\n        context.getParentInputType(),\n      );\n      const fieldType = context.getInputType();\n\n      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {\n        const suggestions = (0, _suggestionList.suggestionList)(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if ((0, _definition.isNonNullType)(type)) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Expected value of type \"${(0, _inspect.inspect)(\n              type,\n            )}\", found ${(0, _printer.print)(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = (0, _definition.getNamedType)(locationType);\n\n  if (!(0, _definition.isLeafType)(type)) {\n    const typeStr = (0, _inspect.inspect)(locationType);\n    context.reportError(\n      new _GraphQLError.GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${(0, _printer.print)(\n          node,\n        )}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = (0, _inspect.inspect)(locationType);\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${(0, _printer.print)(\n            node,\n          )}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = (0, _inspect.inspect)(locationType);\n\n    if (error instanceof _GraphQLError.GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${(0, _printer.print)(\n            node,\n          )}; ` + error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","isValidValueNode","context","node","locationType","getInputType","type","_definition","getNamedType","isLeafType","undefined","parseLiteral","parseResult","typeStr","_inspect","inspect","reportError","_GraphQLError","GraphQLError","_printer","print","nodes","error","message","originalError","Object","defineProperty","value","ValuesOfCorrectTypeRule","ListValue","getNullableType","getParentInputType","isListType","ObjectValue","isInputObjectType","fieldNodeMap","_keyMap","keyMap","fields","field","name","fieldDef","values","getFields","fieldNode","isRequiredInputField","ObjectField","parentType","fieldType","suggestions","_suggestionList","suggestionList","keys","_didYouMean","didYouMean","NullValue","isNonNullType","EnumValue","IntValue","FloatValue","StringValue","BooleanValue"]
}
