{"version":3,"sources":["app/routes.cljs"],"mappings":";AASA,kBAAA,lBAACA,oFAEA,WAAKC;AAAL,AACE,OAACC,8CAAMC,gCAAeF;;AAIzB,sDAAA,tDAACG,yIAEA,aAAAC,FAAKO;AAAL,AAAA,IAAAN,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;YAAAE,RAAQG;YAARL,RAAYN;AAAZ,AAAA,kDAAA,kEACeA;;AAEhB,sDAAA,tDAACY,wIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASH;gBAAT,AAAAI,4CAAAD,WAAA,IAAA,vEAAWG;AAAX,AACE,IAAMC,YAAY,AAAA,qGAAgBF;IAC5BG,cAAY,AAACC,8CAAsB,AAAA,kGAAcF,WAAWD;AADlE,AAEE,wDAAA,jDAACI,8CAAML,0EAAkB,wDAAA,xDAACK,8CAAMJ,8EAAuBE;;AAI5D,iDAAA,jDAACG,4IAEA,WAAKN;AAAL,AACE,OAAA,qGAAgBA;;AAInB,oBAAA,pBAAMO,gDAAQC;AAAd,AACE,mEAAA,2CAAA,qDAAA,2CAAA,oEAAA,mFAAA,2CAAA,gMAAA,8MAAA,4FAAA,0DAAA,76BAACC,qDACAD,2YAC8B,yGAAA,QAAA,jHAACE,+LACF,yGAAA,OAAA,hHAACA,oNACZC;;AAGrB,yBAAA,zBAAMC,0DAAaX;AAAnB,AACE,oBAAMA;AAAN,AACE,2BAAA,mFAAA,vGAACY,yLAA2BZ;;AAD9B;;;AAGF,+BAAA,/BAAMa,sEAAcN;AAApB,AACE,YAAA,ZAACO;;AACD,yFAAA,2CAAA,sEAAA,nMAACC,iCACA,AAACT,kBAAOC,QACRI","names":["refx.alpha/reg-fx","route","cljs.core.apply","reitit.frontend.easy/push-state","refx.alpha.reg_event_fx","p__43000","vec__43001","seq__43002","cljs.core/seq","first__43003","cljs.core/first","cljs.core/next","_","refx.alpha.reg_event_db","p__43004","vec__43005","cljs.core.nth","db","new-match","old-match","controllers","reitit.frontend.controllers/apply-controllers","cljs.core.assoc","refx.alpha.reg_sub","app.routes/router","routes","reitit.frontend.router","cljs.core.println","reitit.coercion.schema/coercion","app.routes/on-navigate","refx.alpha/dispatch","app.routes/init-routes!","js/console.log","reitit.frontend.easy/start!"],"sourcesContent":["(ns app.routes\n  (:require [reitit.coercion.schema :as rsc]\n            [reitit.frontend :as rf]\n            [reitit.frontend.controllers :as rfc]\n            [reitit.frontend.easy :as rfe]\n            [refx.alpha :as refx]))\n\n;;; Effects ;;;\n\n(refx/reg-fx\n :push-state\n (fn [route]\n   (apply rfe/push-state route)))\n\n;;; Events ;;;\n\n(refx/reg-event-fx\n ::push-state\n (fn [_ [_ & route]]\n   {:push-state route}))\n\n(refx/reg-event-db\n ::navigated\n (fn [db [_ new-match]]\n   (let [old-match   (:current-route db)\n         controllers (rfc/apply-controllers (:controllers old-match) new-match)]\n     (assoc db :current-route (assoc new-match :controllers controllers)))))\n\n;;; Subscriptions ;;;\n\n(refx/reg-sub\n ::current-route\n (fn [db]\n   (:current-route db)))\n\n;;; Setup ;;;\n\n(defn router [routes]\n  (rf/router\n   routes\n   {:data {:controllers [{:start (println \"start\" \"root-controller\")\n                          :stop (println \"stop\" \"root controller\")}]\n           :coercion rsc/coercion\n           :public? false}}))\n\n(defn on-navigate [new-match]\n  (when new-match\n    (refx/dispatch [::navigated new-match])))\n\n(defn init-routes! [routes]\n  (js/console.log \"initializing routes\")\n  (rfe/start!\n   (router routes)\n   on-navigate\n   {:use-fragment true}))\n"]}