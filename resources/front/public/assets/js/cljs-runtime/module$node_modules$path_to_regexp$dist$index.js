shadow$provide.module$node_modules$path_to_regexp$dist$index=function(global,require,module,exports){function lexer(str){for(var tokens=[],i=0;i<str.length;){var char=str[i];if("*"===char||"+"===char||"?"===char)tokens.push({type:"MODIFIER",index:i,value:str[i++]});else if("\\"===char)tokens.push({type:"ESCAPED_CHAR",index:i++,value:str[i++]});else if("{"===char)tokens.push({type:"OPEN",index:i,value:str[i++]});else if("}"===char)tokens.push({type:"CLOSE",index:i,value:str[i++]});else if(":"===char){var name=
"";for(char=i+1;char<str.length;){var code=str.charCodeAt(char);if(48<=code&&57>=code||65<=code&&90>=code||97<=code&&122>=code||95===code)name+=str[char++];else break}if(!name)throw new TypeError("Missing parameter name at ".concat(i));tokens.push({type:"NAME",index:i,value:name});i=char}else if("("===char){name=1;code="";char=i+1;if("?"===str[char])throw new TypeError('Pattern cannot start with "?" at '.concat(char));for(;char<str.length;)if("\\"===str[char])code+=str[char++]+str[char++];else{if(")"===
str[char]){if(name--,0===name){char++;break}}else if("("===str[char]&&(name++,"?"!==str[char+1]))throw new TypeError("Capturing groups are not allowed at ".concat(char));code+=str[char++]}if(name)throw new TypeError("Unbalanced pattern at ".concat(i));if(!code)throw new TypeError("Missing pattern at ".concat(i));tokens.push({type:"PATTERN",index:i,value:code});i=char}else tokens.push({type:"CHAR",index:i,value:str[i++]})}tokens.push({type:"END",index:i,value:""});return tokens}function parse(str,
options){void 0===options&&(options={});var tokens=lexer(str);str=options.prefixes;str=void 0===str?"./":str;options="[^".concat(escapeString(options.delimiter||"/#?"),"]+?");for(var result$jscomp$0=[],key=0,i=0,path="",tryConsume=function(type){if(i<tokens.length&&tokens[i].type===type)return tokens[i++].value},mustConsume=function(type){var value=tryConsume(type);if(void 0!==value)return value;value=tokens[i];var index=value.index;throw new TypeError("Unexpected ".concat(value.type," at ").concat(index,
", expected ").concat(type));},consumeText=function(){for(var result="",value;value=tryConsume("CHAR")||tryConsume("ESCAPED_CHAR");)result+=value;return result};i<tokens.length;){var char=tryConsume("CHAR"),name=tryConsume("NAME"),pattern=tryConsume("PATTERN");if(name||pattern)char=char||"",-1===str.indexOf(char)&&(path+=char,char=""),path&&(result$jscomp$0.push(path),path=""),result$jscomp$0.push({name:name||key++,prefix:char,suffix:"",pattern:pattern||options,modifier:tryConsume("MODIFIER")||""});
else if(char=char||tryConsume("ESCAPED_CHAR"))path+=char;else if(path&&(result$jscomp$0.push(path),path=""),tryConsume("OPEN")){char=consumeText();name=tryConsume("NAME")||"";pattern=tryConsume("PATTERN")||"";var suffix=consumeText();mustConsume("CLOSE");result$jscomp$0.push({name:name||(pattern?key++:""),pattern:name&&!pattern?options:pattern,prefix:char,suffix,modifier:tryConsume("MODIFIER")||""})}else mustConsume("END")}return result$jscomp$0}function tokensToFunction(tokens,options){void 0===
options&&(options={});var reFlags=options&&options.sensitive?"":"i",_a=options.encode,encode=void 0===_a?function(x){return x}:_a;options=options.validate;var validate=void 0===options?!0:options,matches=tokens.map(function(token){if("object"===typeof token)return new RegExp("^(?:".concat(token.pattern,")$"),reFlags)});return function(data){for(var path="",i=0;i<tokens.length;i++){var token=tokens[i];if("string"===typeof token)path+=token;else{var value=data?data[token.name]:void 0,optional="?"===
token.modifier||"*"===token.modifier,repeat="*"===token.modifier||"+"===token.modifier;if(Array.isArray(value)){if(!repeat)throw new TypeError('Expected "'.concat(token.name,'" to not repeat, but got an array'));if(0===value.length){if(optional)continue;throw new TypeError('Expected "'.concat(token.name,'" to not be empty'));}for(optional=0;optional<value.length;optional++){repeat=encode(value[optional],token);if(validate&&!matches[i].test(repeat))throw new TypeError('Expected all "'.concat(token.name,
'" to match "').concat(token.pattern,'", but got "').concat(repeat,'"'));path+=token.prefix+repeat+token.suffix}}else if("string"===typeof value||"number"===typeof value){repeat=encode(String(value),token);if(validate&&!matches[i].test(repeat))throw new TypeError('Expected "'.concat(token.name,'" to match "').concat(token.pattern,'", but got "').concat(repeat,'"'));path+=token.prefix+repeat+token.suffix}else if(!optional)throw data=repeat?"an array":"a string",new TypeError('Expected "'.concat(token.name,
'" to be ').concat(data));}}return path}}function regexpToFunction(re,keys,options){void 0===options&&(options={});options=options.decode;var decode=void 0===options?function(x){return x}:options;return function(pathname){var m=re.exec(pathname);if(!m)return!1;pathname=m[0];for(var index=m.index,params=Object.create(null),_loop_1=function(i){if(void 0===m[i])return"continue";var key=keys[i-1];params[key.name]="*"===key.modifier||"+"===key.modifier?m[i].split(key.prefix+key.suffix).map(function(value){return decode(value,
key)}):decode(m[i],key)},i$jscomp$0=1;i$jscomp$0<m.length;i$jscomp$0++)_loop_1(i$jscomp$0);return{path:pathname,index,params}}}function escapeString(str){return str.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function arrayToRegexp(paths,keys,options){paths=paths.map(function(path){return pathToRegexp(path,keys,options).source});return new RegExp("(?:".concat(paths.join("|"),")"),options&&options.sensitive?"":"i")}function tokensToRegexp(tokens,keys,options){void 0===options&&(options={});var _a=
options.strict;_a=void 0===_a?!1:_a;var _b=options.start,start=void 0===_b?!0:_b;_b=options.end;_b=void 0===_b?!0:_b;var _d=options.encode;_d=void 0===_d?function(x){return x}:_d;var _e=options.delimiter,delimiter=void 0===_e?"/#?":_e;_e=options.endsWith;_e="[".concat(escapeString(void 0===_e?"":_e),"]|$");delimiter="[".concat(escapeString(delimiter),"]");start=start?"^":"";for(var _i=0;_i<tokens.length;_i++){var token=tokens[_i];if("string"===typeof token)start+=escapeString(_d(token));else{var prefix=
escapeString(_d(token.prefix)),suffix=escapeString(_d(token.suffix));if(token.pattern)if(keys&&keys.push(token),prefix||suffix)if("+"===token.modifier||"*"===token.modifier){var mod="*"===token.modifier?"?":"";start+="(?:".concat(prefix,"((?:").concat(token.pattern,")(?:").concat(suffix).concat(prefix,"(?:").concat(token.pattern,"))*)").concat(suffix,")").concat(mod)}else start+="(?:".concat(prefix,"(").concat(token.pattern,")").concat(suffix,")").concat(token.modifier);else start="+"===token.modifier||
"*"===token.modifier?start+"((?:".concat(token.pattern,")").concat(token.modifier,")"):start+"(".concat(token.pattern,")").concat(token.modifier);else start+="(?:".concat(prefix).concat(suffix,")").concat(token.modifier)}}_b?(_a||(start+="".concat(delimiter,"?")),start+=options.endsWith?"(?\x3d".concat(_e,")"):"$"):(tokens=tokens[tokens.length-1],tokens="string"===typeof tokens?-1<delimiter.indexOf(tokens[tokens.length-1]):void 0===tokens,_a||(start+="(?:".concat(delimiter,"(?\x3d").concat(_e,"))?")),
tokens||(start+="(?\x3d".concat(delimiter,"|").concat(_e,")")));return new RegExp(start,options&&options.sensitive?"":"i")}function pathToRegexp(path,keys,options){if(path instanceof RegExp){if(keys){options=/\((?:\?<(.*?)>)?(?!\?)/g;for(var index=0,execResult=options.exec(path.source);execResult;)keys.push({name:execResult[1]||index++,prefix:"",suffix:"",modifier:"",pattern:""}),execResult=options.exec(path.source)}return path}return Array.isArray(path)?arrayToRegexp(path,keys,options):tokensToRegexp(parse(path,
options),keys,options)}Object.defineProperty(exports,"__esModule",{value:!0});exports.pathToRegexp=exports.tokensToRegexp=exports.regexpToFunction=exports.match=exports.tokensToFunction=exports.compile=exports.parse=void 0;exports.parse=parse;exports.compile=function(str,options){return tokensToFunction(parse(str,options),options)};exports.tokensToFunction=tokensToFunction;exports.match=function(str,options){var keys=[];str=pathToRegexp(str,keys,options);return regexpToFunction(str,keys,options)};
exports.regexpToFunction=regexpToFunction;exports.tokensToRegexp=tokensToRegexp;exports.pathToRegexp=pathToRegexp}
//# sourceMappingURL=module$node_modules$path_to_regexp$dist$index.js.map
