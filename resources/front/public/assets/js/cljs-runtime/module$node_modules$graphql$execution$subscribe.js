shadow$provide.module$node_modules$graphql$execution$subscribe=function(global,require,module,exports){async function createSourceEventStream(...rawArgs){{const firstArg=rawArgs[0];rawArgs=firstArg&&"document"in firstArg?firstArg:{schema:firstArg,document:rawArgs[1],rootValue:rawArgs[2],contextValue:rawArgs[3],variableValues:rawArgs[4],operationName:rawArgs[5],subscribeFieldResolver:rawArgs[6]}}const {schema,document,variableValues}=rawArgs;(0,_execute.assertValidExecutionArguments)(schema,document,
variableValues);rawArgs=(0,_execute.buildExecutionContext)(rawArgs);if(!("schema"in rawArgs))return{errors:rawArgs};try{const eventStream=await executeSubscription(rawArgs);if(!(0,_isAsyncIterable.isAsyncIterable)(eventStream))throw Error("Subscription field must return Async Iterable. "+`Received: ${(0,_inspect.inspect)(eventStream)}.`);return eventStream}catch(error){if(error instanceof _GraphQLError.GraphQLError)return{errors:[error]};throw error;}}async function executeSubscription(exeContext){const {schema,
fragments,operation,variableValues,rootValue}=exeContext;var rootType=schema.getSubscriptionType();if(null==rootType)throw new _GraphQLError.GraphQLError("Schema is not configured to execute subscription operation.",{nodes:operation});var rootFields=(0,_collectFields.collectFields)(schema,fragments,variableValues,rootType,operation.selectionSet);const [responseName,fieldNodes]=[...rootFields.entries()][0];rootFields=(0,_execute.getFieldDef)(schema,rootType,fieldNodes[0]);if(!rootFields)throw new _GraphQLError.GraphQLError(`The subscription field "${fieldNodes[0].name.value}" is not defined.`,
{nodes:fieldNodes});const path=(0,_Path.addPath)(void 0,responseName,rootType.name);rootType=(0,_execute.buildResolveInfo)(exeContext,rootFields,fieldNodes,rootType,path);try{var _fieldDef$subscribe;const args=(0,_values.getArgumentValues)(rootFields,fieldNodes[0],variableValues),contextValue=exeContext.contextValue,eventStream=await (null!==(_fieldDef$subscribe=rootFields.subscribe)&&void 0!==_fieldDef$subscribe?_fieldDef$subscribe:exeContext.subscribeFieldResolver)(rootValue,args,contextValue,rootType);
if(eventStream instanceof Error)throw eventStream;return eventStream}catch(error){throw(0,_locatedError.locatedError)(error,fieldNodes,(0,_Path.pathToArray)(path));}}Object.defineProperty(exports,"__esModule",{value:!0});exports.createSourceEventStream=createSourceEventStream;exports.subscribe=async function(args){2>arguments.length||(0,_devAssert.devAssert)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");const resultOrStream=await createSourceEventStream(args);
return(0,_isAsyncIterable.isAsyncIterable)(resultOrStream)?(0,_mapAsyncIterator.mapAsyncIterator)(resultOrStream,payload=>(0,_execute.execute)({...args,rootValue:payload})):resultOrStream};var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),_inspect=require("module$node_modules$graphql$jsutils$inspect"),_isAsyncIterable=require("module$node_modules$graphql$jsutils$isAsyncIterable"),_Path=require("module$node_modules$graphql$jsutils$Path"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),
_locatedError=require("module$node_modules$graphql$error$locatedError"),_collectFields=require("module$node_modules$graphql$execution$collectFields"),_execute=require("module$node_modules$graphql$execution$execute"),_mapAsyncIterator=require("module$node_modules$graphql$execution$mapAsyncIterator"),_values=require("module$node_modules$graphql$execution$values")}
//# sourceMappingURL=module$node_modules$graphql$execution$subscribe.js.map
