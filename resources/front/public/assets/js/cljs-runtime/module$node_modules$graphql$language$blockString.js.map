{
"version":3,
"file":"module$node_modules$graphql$language$blockString.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/graphql/language/blockString.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$blockString\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.dedentBlockStringLines = dedentBlockStringLines;\nexports.isPrintableAsBlockString = isPrintableAsBlockString;\nexports.printBlockString = printBlockString;\n\nvar _characterClasses = require('./characterClasses.js');\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nfunction dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (\n    i < str.length &&\n    (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i))\n  ) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nfunction isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nfunction printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every(\n        (line) =>\n          line.length === 0 ||\n          (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0)),\n      ); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine =\n    isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","leadingWhitespace","str","i","length","_characterClasses","isWhiteSpace","charCodeAt","Object","defineProperty","value","dedentBlockStringLines","lines","_firstNonEmptyLine2","commonIndent","Number","MAX_SAFE_INTEGER","firstNonEmptyLine","lastNonEmptyLine","_firstNonEmptyLine","line","indent","map","slice","isPrintableAsBlockString","isEmptyLine","hasIndent","hasCommonIndent","seenNonEmptyLine","codePointAt","printBlockString","options","escapedValue","replace","split","isSingleLine","forceLeadingNewLine","every","hasTrailingTripleQuotes","endsWith","hasTrailingQuote","hasTrailingSlash","forceTrailingNewline","printAsMultipleLines","minimize","result","skipLeadingNewLine"]
}
