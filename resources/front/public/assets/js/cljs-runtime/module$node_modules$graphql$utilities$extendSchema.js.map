{
"version":3,
"file":"module$node_modules$graphql$utilities$extendSchema.js",
"lineCount":29,
"mappings":"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",
"sources":["node_modules/graphql/utilities/extendSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$extendSchema\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.extendSchema = extendSchema;\nexports.extendSchemaImpl = extendSchemaImpl;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _keyMap = require('../jsutils/keyMap.js');\n\nvar _mapValue = require('../jsutils/mapValue.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _predicates = require('../language/predicates.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _scalars = require('../type/scalars.js');\n\nvar _schema = require('../type/schema.js');\n\nvar _validate = require('../validation/validate.js');\n\nvar _values = require('../execution/values.js');\n\nvar _valueFromAST = require('./valueFromAST.js');\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nfunction extendSchema(schema, documentAST, options) {\n  (0, _schema.assertSchema)(schema);\n  (documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT) ||\n    (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    (0, _validate.assertValidSDLExtension)(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new _schema.GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nfunction extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if ((0, _predicates.isTypeDefinitionNode)(def)) {\n      typeDefs.push(def);\n    } else if ((0, _predicates.isTypeExtensionNode)(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    }\n\n    if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({\n      ...config,\n      args: (0, _mapValue.mapValue)(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (\n      (0, _introspection.isIntrospectionType)(type) ||\n      (0, _scalars.isSpecifiedScalarType)(type)\n    ) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if ((0, _definition.isScalarType)(type)) {\n      return extendScalarType(type);\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      return extendObjectType(type);\n    }\n\n    if ((0, _definition.isInterfaceType)(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if ((0, _definition.isUnionType)(type)) {\n      return extendUnionType(type);\n    }\n\n    if ((0, _definition.isEnumType)(type)) {\n      return extendEnumType(type);\n    }\n\n    if ((0, _definition.isInputObjectType)(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false ||\n      (0, _invariant.invariant)(\n        false,\n        'Unexpected type: ' + (0, _inspect.inspect)(type),\n      );\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new _definition.GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...(0, _mapValue.mapValue)(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new _definition.GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new _definition.GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new _definition.GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...(0, _mapValue.mapValue)(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new _definition.GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...(0, _mapValue.mapValue)(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new _definition.GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && (0, _mapValue.mapValue)(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === _kinds.Kind.LIST_TYPE) {\n      return new _definition.GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === _kinds.Kind.NON_NULL_TYPE) {\n      return new _definition.GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new _directives.GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: (0, _valueFromAST.valueFromAST)(\n            field.defaultValue,\n            type,\n          ),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new _definition.GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new _definition.GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n    }\n  }\n}\n\nconst stdTypeMap = (0, _keyMap.keyMap)(\n  [..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = (0, _values.getDirectiveValues)(\n    _directives.GraphQLDeprecatedDirective,\n    node,\n  ); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = (0, _values.getDirectiveValues)(\n    _directives.GraphQLSpecifiedByDirective,\n    node,\n  ); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","extendSchemaImpl","schemaConfig","documentAST","options","replaceType","type","_definition","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull","replaceNamedType","typeMap","name","extendNamedType","_introspection","isIntrospectionType","_scalars","isSpecifiedScalarType","isScalarType","_typeExtensionsMap$co2","config","toConfig","extensions","typeExtensionsMap","specifiedByURL","extensionNode","_getSpecifiedByURL","getSpecifiedByURL","GraphQLScalarType","extensionASTNodes","concat","isObjectType","extendObjectType","isInterfaceType","extendInterfaceType","isUnionType","extendUnionType","isEnumType","_typeExtensionsMap$ty","GraphQLEnumType","values","buildEnumValueMap","isInputObjectType","extendInputObjectType","_invariant","invariant","_inspect","inspect","_typeExtensionsMap$co","GraphQLInputObjectType","fields","_mapValue","mapValue","field","buildInputFieldMap","_typeExtensionsMap$co3","GraphQLObjectType","interfaces","getInterfaces","map","buildInterfaces","extendField","buildFieldMap","_typeExtensionsMap$co4","GraphQLInterfaceType","_typeExtensionsMap$co5","GraphQLUnionType","types","getTypes","buildUnionTypes","args","extendArg","arg","getOperationTypes","nodes","opTypes","node","_node$operationTypes","operationTypesNodes","operationTypes","operationType","operation","getNamedType","_stdTypeMap$name2","value","stdTypeMap","undefined","Error","getWrappedType","kind","_kinds","Kind","LIST_TYPE","NON_NULL_TYPE","fieldConfigMap","Object","create","_node$fields","nodeFields","_field$description","description","buildArgumentMap","arguments","deprecationReason","getDeprecationReason","astNode","argsNodes","argConfigMap","_arg$description","defaultValue","_valueFromAST","valueFromAST","inputFieldMap","_node$fields2","fieldsNodes","_field$description2","enumValueMap","_node$values","valuesNodes","_value$description","flatMap","_node$interfaces$map","_node$interfaces","_node$types$map","_node$types","buildType","_typeExtensionsMap$na","OBJECT_TYPE_DEFINITION","_astNode$description","allNodes","INTERFACE_TYPE_DEFINITION","_astNode$description2","ENUM_TYPE_DEFINITION","_astNode$description3","UNION_TYPE_DEFINITION","_astNode$description4","SCALAR_TYPE_DEFINITION","_astNode$description5","INPUT_OBJECT_TYPE_DEFINITION","_astNode$description6","_schemaDef","_schemaDef$descriptio","_schemaDef2","_options$assumeValid","typeDefs","directiveDefs","schemaDef","schemaExtensions","def","definitions","SCHEMA_DEFINITION","SCHEMA_EXTENSION","push","_predicates","isTypeDefinitionNode","isTypeExtensionNode","extendedTypeName","existingTypeExtensions","DIRECTIVE_DEFINITION","keys","length","existingType","typeNode","_stdTypeMap$name","query","mutation","subscription","directives","replaceDirective","directive","_directives","GraphQLDirective","buildDirective","_node$description","locations","isRepeatable","repeatable","assumeValid","deprecated","_values","getDirectiveValues","GraphQLDeprecatedDirective","reason","specifiedBy","GraphQLSpecifiedByDirective","url","defineProperty","extendSchema","schema","_schema","assertSchema","DOCUMENT","_devAssert","devAssert","assumeValidSDL","_validate","assertValidSDLExtension","extendedConfig","GraphQLSchema","_keyMap","keyMap","specifiedScalarTypes","introspectionTypes"]
}
