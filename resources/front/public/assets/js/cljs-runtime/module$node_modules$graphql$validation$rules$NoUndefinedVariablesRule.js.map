{
"version":3,
"file":"module$node_modules$graphql$validation$rules$NoUndefinedVariablesRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,wBAAR,CAYAA,QAAiC,CAACC,OAAD,CAAU,CACzC,IAAIC,oBAAsBL,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAC1B,OAAO,CACLC,oBAAqB,CACnBC,KAAK,EAAG,CACNH,mBAAA,CAAsBL,MAAOM,CAAAA,MAAP,CAAc,IAAd,CADhB,CADW,CAKnBG,KAAK,CAACC,SAAD,CAAY,CACf,IAAMC,OAASP,OAAQQ,CAAAA,0BAAR,CAAmCF,SAAnC,CAEf,KAAK,MAAM,CAAEG,IAAF,CAAX,EAAuBF,OAAvB,CACQG,MAEN,CAFgBD,IAAKE,CAAAA,IAAKb,CAAAA,KAE1B,CAAqC,CAAA,CAArC,GAAIG,mBAAA,CAAoBS,MAApB,CAAJ;AACEV,OAAQY,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACER,SAAUK,CAAAA,IAAV,CACK,cAAaD,MAAb,kCAAsDJ,SAAUK,CAAAA,IAAKb,CAAAA,KAArE,IADL,CAEK,cAAaY,MAAb,mBAHP,CAIE,CACEK,MAAO,CAACN,IAAD,CAAOH,SAAP,CADT,CAJF,CADF,CAPW,CALE,CADhB,CA4BLU,kBAAkB,CAACP,IAAD,CAAO,CACvBR,mBAAA,CAAoBQ,IAAKQ,CAAAA,QAASN,CAAAA,IAAKb,CAAAA,KAAvC,CAAA,CAAgD,CAAA,CADzB,CA5BpB,CAFkC,CAV3C,KAAIe,cAAgBpB,OAAA,CAAQ,gDAAR,CAR8G;",
"sources":["node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$NoUndefinedVariablesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nfunction NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","NoUndefinedVariablesRule","context","variableNameDefined","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","varName","name","reportError","_GraphQLError","GraphQLError","nodes","VariableDefinition","variable"]
}
