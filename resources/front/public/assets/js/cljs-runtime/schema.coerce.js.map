{"version":3,"sources":["schema/coerce.cljc"],"mappings":"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","names":["schema.coerce/Schema","cljs.core/with-meta","schema.core/->Protocol","p1__31003__31004__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","schema.core/Schema","schema.coerce/CoercionMatcher","schema.core/make-fn-schema","schema.core/one","schema.core/maybe","schema.core/Any","ufv33293","schema.utils/use-fn-validation","output-schema33292","input-schema33294","input-checker33295","cljs.core/Delay","schema.core/checker","output-checker33296","ret__32154__auto__","validate__29872__auto__","cljs.core/deref","args__29873__auto__","G__33297","G__33298","schema.core/fn-validator","G__33303","G__33304","G__33305","G__33306","G__33307","temp__5804__auto__","fexpr__33308","error__29874__auto__","cljs.core.ex_info","schema.utils.format_STAR_","cljs.core.pr_str","o__29875__auto__","schema","coercion-matcher","G__33311","G__33312","G__33313","G__33314","G__33315","fexpr__33317","schema.utils/declare-class-schema!","schema.utils/fn-schema-bearer","schema.core/->FnSchema","schema.coerce/coercer","schema.spec.core/run-checker","s","params","c","schema.spec.core/checker","schema.core/spec","temp__5802__auto__","coercer","x","e33310","js/Object","v","schema.utils/error?","t","schema.utils/error","schema.utils/make-ValidationError","ufv33320","output-schema33319","input-schema33321","input-checker33322","output-checker33323","G__33324","G__33325","G__33328","G__33329","G__33330","G__33331","G__33332","fexpr__33333","G__33335","G__33336","G__33337","G__33338","G__33339","fexpr__33345","schema.coerce/coercer!","value","coerced","error","schema.utils/error-val","ufv33356","output-schema33355","input-schema33357","input-checker33358","output-checker33359","G__33360","G__33365","G__33366","G__33367","G__33368","G__33369","fexpr__33372","matchers","G__33380","G__33381","G__33382","G__33383","G__33384","fexpr__33386","schema.coerce/first-matcher","cljs.core/first","p1__33351#","cljs.core.keep","schema.coerce/string->keyword","cljs.core.keyword","schema.coerce/string->boolean","cljs.core._EQ_","clojure.string/lower-case","schema.coerce/keyword-enum-matcher","schema.core/EnumSchema","cljs.core/every?","cljs.core/keyword?","schema.core/EqSchema","cljs.core/Keyword","schema.coerce/set-matcher","cljs.core/PersistentHashSet","cljs.core/sequential?","cljs.core/set","schema.coerce/safe","f","e33393","e","p1__33396#","schema.coerce/string->uuid","cljs.core/uuid","schema.coerce/+json-coercions+","cljs.core.merge","schema.core/Keyword","schema.core/Bool","schema.core/Uuid","schema.coerce/json-coercion-matcher","or__5045__auto__","schema.coerce/edn-read-string","cljs.reader/read-string","schema.coerce/+string-coercions+","schema.core/Num","schema.core/Int","schema.coerce/string-coercion-matcher"],"sourcesContent":["(ns schema.coerce\n  \"Extension of schema for input coercion (coercing an input to match a schema)\"\n  (:require\n   #?(:cljs [cljs.reader :as reader])\n   #?(:clj [clojure.edn :as edn])\n   #?(:clj [schema.macros :as macros])\n   #?(:clj [schema.core :as s]\n      :cljs [schema.core :as s :include-macros true])\n   [schema.spec.core :as spec]\n   [schema.utils :as utils]\n   [clojure.string :as str])\n  #?(:cljs (:require-macros [schema.macros :as macros])))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Generic input coercion\n\n(def Schema\n  \"A Schema for Schemas\"\n  (s/protocol s/Schema))\n\n(def CoercionMatcher\n  \"A function from schema to coercion function, or nil if no special coercion is needed.\n   The returned function is applied to the corresponding data before validation (or walking/\n   coercion of its sub-schemas, if applicable)\"\n  (s/=> (s/maybe (s/=> s/Any s/Any)) Schema))\n\n(s/defn coercer\n  \"Produce a function that simultaneously coerces and validates a datum.  Returns\n   a coerced value, or a schema.utils.ErrorContainer describing the error.\"\n  [schema coercion-matcher :- CoercionMatcher]\n  (spec/run-checker\n   (fn [s params]\n     (let [c (spec/checker (s/spec s) params)]\n       (if-let [coercer (coercion-matcher s)]\n         (fn [x]\n           (macros/try-catchall\n            (let [v (coercer x)]\n              (if (utils/error? v)\n                v\n                (c v)))\n            (catch t (macros/validation-error s x t))))\n         c)))\n   true\n   schema))\n\n(s/defn coercer!\n  \"Like `coercer`, but is guaranteed to return a value that satisfies schema (or throw).\"\n  [schema coercion-matcher :- CoercionMatcher]\n  (let [c (coercer schema coercion-matcher)]\n    (fn [value]\n      (let [coerced (c value)]\n        (when-let [error (utils/error-val coerced)]\n          (macros/error! (utils/format* \"Value cannot be coerced to match schema: %s\" (pr-str error))\n                         {:schema schema :value value :error error}))\n        coerced))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Coercion helpers\n\n(s/defn first-matcher :- CoercionMatcher\n  \"A matcher that takes the first match from matchers.\"\n  [matchers :- [CoercionMatcher]]\n  (fn [schema] (first (keep #(% schema) matchers))))\n\n(defn string->keyword [s]\n  (if (string? s) (keyword s) s))\n\n(defn string->boolean\n  \"returns true for strings that are equal, ignoring case, to the string 'true'\n   (following java.lang.Boolean/parseBoolean semantics)\"\n  [s]\n  (if (string? s) (= \"true\" (str/lower-case s)) s))\n\n(defn keyword-enum-matcher [schema]\n  (when (or (and (instance? #?(:clj schema.core.EnumSchema :cljs s/EnumSchema) schema)\n                 (every? keyword? (.-vs ^schema.core.EnumSchema schema)))\n            (and (instance? #?(:clj schema.core.EqSchema :cljs s/EqSchema) schema)\n                 (keyword? (.-v ^schema.core.EqSchema schema))))\n    string->keyword))\n\n(defn set-matcher [schema]\n  (if (instance? #?(:clj clojure.lang.APersistentSet :cljs cljs.core.PersistentHashSet) schema)\n    (fn [x] (if (sequential? x) (set x) x))))\n\n(defn safe\n  \"Take a single-arg function f, and return a single-arg function that acts as identity\n   if f throws an exception, and like f otherwise.  Useful because coercers are not explicitly\n   guarded for exceptions, and failing to coerce will generally produce a more useful error\n   in this case.\"\n  [f]\n  (fn [x] (macros/try-catchall (f x) (catch e x))))\n\n#?(:clj (def safe-long-cast\n          \"Coerce x to a long if this can be done without losing precision, otherwise return x.\"\n          (safe\n            (fn [x]\n              (let [l (long x)]\n                (if (== l x)\n                  l\n                  x))))))\n\n(def string->uuid\n  \"Returns instance of UUID if input is a string.\n   Note: in CLJS, this does not guarantee a specific UUID string representation,\n         similar to #uuid reader\"\n  #?(:clj\n     (safe #(java.util.UUID/fromString ^String %))\n     :cljs\n     #(if (string? %) (uuid %) %)))\n\n\n(def ^:no-doc +json-coercions+\n  (merge\n   {s/Keyword string->keyword\n    s/Bool string->boolean\n    s/Uuid string->uuid}\n   #?(:clj {clojure.lang.Keyword string->keyword\n            s/Int safe-long-cast\n            Long safe-long-cast\n            Double (safe double)\n            Float (safe float)\n            Boolean string->boolean})))\n\n(defn json-coercion-matcher\n  \"A matcher that coerces keywords and keyword eq/enums from strings, and longs and doubles\n     from numbers on the JVM (without losing precision)\"\n  [schema]\n  (or (+json-coercions+ schema)\n      (keyword-enum-matcher schema)\n      (set-matcher schema)))\n\n(def edn-read-string\n  \"Reads one object from a string. Returns nil when string is nil or empty\"\n  #?(:clj edn/read-string :cljs reader/read-string))\n\n(def ^:no-doc +string-coercions+\n  (merge\n   +json-coercions+\n   {s/Num (safe edn-read-string)\n    s/Int (safe edn-read-string)}\n   #?(:clj {s/Int (safe #(safe-long-cast (edn-read-string %)))\n            Long (safe #(safe-long-cast (edn-read-string %)))\n            Double (safe #(Double/parseDouble %))})))\n\n(defn string-coercion-matcher\n  \"A matcher that coerces keywords, keyword eq/enums, s/Num and s/Int,\n     and long and doubles (JVM only) from strings.\"\n  [schema]\n  (or (+string-coercions+ schema)\n      (keyword-enum-matcher schema)\n      (set-matcher schema)))\n"]}