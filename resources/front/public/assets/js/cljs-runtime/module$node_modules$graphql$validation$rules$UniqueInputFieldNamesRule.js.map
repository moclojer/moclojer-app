{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueInputFieldNamesRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,yBAAR,CAcAA,QAAkC,CAACC,OAAD,CAAU,CAC1C,MAAMC,eAAiB,EACvB,KAAIC,WAAaN,MAAOO,CAAAA,MAAP,CAAc,IAAd,CACjB,OAAO,CACLC,YAAa,CACXC,KAAK,EAAG,CACNJ,cAAeK,CAAAA,IAAf,CAAoBJ,UAApB,CACAA,WAAA,CAAaN,MAAOO,CAAAA,MAAP,CAAc,IAAd,CAFP,CADG,CAMXI,KAAK,EAAG,CACN,MAAMC,eAAiBP,cAAeQ,CAAAA,GAAf,EACvBD,eAAA,EAAkB,GAAIE,UAAWC,CAAAA,SAAf,EAA0B,CAAA,CAA1B,CAClBT,WAAA,CAAaM,cAHP,CANG,CADR;AAcLI,WAAW,CAACC,IAAD,CAAO,CAChB,MAAMC,UAAYD,IAAKE,CAAAA,IAAKjB,CAAAA,KAExBI,WAAA,CAAWY,SAAX,CAAJ,CACEd,OAAQgB,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,4CAA2CJ,SAA3C,IADH,CAEE,CACEK,MAAO,CAACjB,UAAA,CAAWY,SAAX,CAAD,CAAwBD,IAAKE,CAAAA,IAA7B,CADT,CAFF,CADF,CADF,CAUEb,UAAA,CAAWY,SAAX,CAVF,CAU0BD,IAAKE,CAAAA,IAbf,CAdb,CAHmC,CAZ5C,KAAIL,WAAajB,OAAA,CAAQ,+CAAR,CAAjB,CAEIwB,cAAgBxB,OAAA,CAAQ,gDAAR,CAV+G;",
"sources":["node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueInputFieldNamesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;\n\nvar _invariant = require('../../jsutils/invariant.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nfunction UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || (0, _invariant.invariant)(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","UniqueInputFieldNamesRule","context","knownNameStack","knownNames","create","ObjectValue","enter","push","leave","prevKnownNames","pop","_invariant","invariant","ObjectField","node","fieldName","name","reportError","_GraphQLError","GraphQLError","nodes"]
}
