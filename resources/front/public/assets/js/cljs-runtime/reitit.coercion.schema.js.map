{"version":3,"sources":["reitit/coercion/schema.cljc"],"mappings":"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","names":["reitit.coercion.schema/string-coercion-matcher","schema-tools.coerce/string-coercion-matcher","reitit.coercion.schema/json-coercion-matcher","schema-tools.coerce/json-coercion-matcher","reitit.coercion.schema/default-coercion-matcher","cljs.core/constantly","js/reitit","js/reitit.coercion","js/reitit.coercion.schema","js/reitit.coercion.schema.coerce-response?","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__40473","cljs.core/MultiFn","cljs.core.symbol","reitit.coercion.schema/coerce-response?","cljs.core/identity","_","reitit.coercion.schema/stringify","schema","clojure.walk/prewalk","x","cljs.core.pr_str","cljs.core/List","and__5043__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","schema.core/Schema","cljs.core/record?","e40476","schema.core/explain","js/Error","schema.utils/validation-error-explain","schema.utils/named-error-explain","reitit.coercion.schema/default-options","p__40478","map__40479","cljs.core/--destructure-map","reitit.coercion.schema/create","matchers","coerce-response?","opts","js/reitit.coercion.schema.t_reitit$coercion$schema40480","reitit.coercion.schema/t_reitit$coercion$schema40480","_40482","meta40481","p__40485","map__40486","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","reitit.coercion.schema/->t_reitit$coercion$schema40480","this","specification","parameters","responses","G__40487","cljs.core/Keyword","schema_tools.swagger.core.swagger_spec","cljs.core.merge","cljs.core.into","cljs.core/empty","iter__5523__auto__","s__40489","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__40491","cljs.core/chunk-buffer","i__40490","vec__40493","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40488","cljs.core/chunk-rest","vec__40497","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","s__40501","b__40503","i__40502","vec__40505","iter__40500","vec__40508","response","$","clojure.set/rename-keys","p1__40477#","cljs.core.update","cljs.core.ex_info","model","schema-tools.core/open-schema","error","type","map__40522","formats","default","coercers","s__40524","b__40526","i__40525","iter__40523","m","cljs.core.conj","cljs.core/vals","schema.coerce/coercer","value","format","temp__5802__auto__","matcher","or__5045__auto__","coercer","coerced","schema.utils/error-val","reitit.coercion/map->CoercionError","reitit.coercion.schema/coercion","cljs.core/chunk-first"],"sourcesContent":["(ns reitit.coercion.schema\n  (:require [clojure.set :as set]\n            [clojure.walk :as walk]\n            [reitit.coercion :as coercion]\n            [schema-tools.coerce :as stc]\n            [schema-tools.core :as st]\n            [schema-tools.swagger.core :as swagger]\n            [schema.coerce :as sc]\n            [schema.core :as s]\n            [schema.utils :as su]))\n\n(def string-coercion-matcher\n  stc/string-coercion-matcher)\n\n(def json-coercion-matcher\n  stc/json-coercion-matcher)\n\n(def default-coercion-matcher\n  (constantly nil))\n\n(defmulti coerce-response? identity :default ::default)\n(defmethod coerce-response? ::default [_] true)\n\n(defn stringify [schema]\n  (walk/prewalk\n   (fn [x]\n     (cond\n       #?@(:clj [(class? x) (.getName ^Class x)])\n       (instance? schema.core.OptionalKey x) (pr-str (list 'opt (:k x)))\n       (instance? schema.core.RequiredKey x) (pr-str (list 'req (:k x)))\n       (and (satisfies? s/Schema x) (record? x)) (try (pr-str (s/explain x)) (catch #?(:clj Exception :cljs js/Error) _ x))\n       (instance? schema.utils.ValidationError x) (str (su/validation-error-explain x))\n       (instance? schema.utils.NamedError x) (str (su/named-error-explain x))\n       :else x))\n   schema))\n\n(def default-options\n  {:coerce-response? coerce-response?\n   :matchers {:body {:default default-coercion-matcher\n                     :formats {\"application/json\" json-coercion-matcher}}\n              :string {:default string-coercion-matcher}\n              :response {:default default-coercion-matcher}}})\n\n(defn create [{:keys [matchers coerce-response?] :as opts}]\n  ^{:type ::coercion/coercion}\n  (reify coercion/Coercion\n    (-get-name [_] :schema)\n    (-get-options [_] opts)\n    (-get-apidocs [this specification {:keys [parameters responses]}]\n      ;; TODO: this looks identical to spec, refactor when schema is done.\n      (case specification\n        :swagger (swagger/swagger-spec\n                  (merge\n                   (if parameters\n                     {::swagger/parameters\n                      (into\n                       (empty parameters)\n                       (for [[k v] parameters]\n                         [k (coercion/-compile-model this v nil)]))})\n                   (if responses\n                     {::swagger/responses\n                      (into\n                       (empty responses)\n                       (for [[k response] responses]\n                         [k (as-> response $\n                              (set/rename-keys $ {:body :schema})\n                              (if (:schema $)\n                                (update $ :schema #(coercion/-compile-model this % nil))\n                                $))]))})))\n        (throw\n         (ex-info\n          (str \"Can't produce Schema apidocs for \" specification)\n          {:type specification, :coercion :schema}))))\n    (-compile-model [_ model _] model)\n    (-open-model [_ schema] (st/open-schema schema))\n    (-encode-error [_ error]\n      (-> error\n          (update :schema stringify)\n          (update :errors stringify)))\n    (-request-coercer [_ type schema]\n      (let [{:keys [formats default]} (matchers type)\n            coercers (->> (for [m (conj (vals formats) default)]\n                            [m (sc/coercer schema m)])\n                          (into {}))]\n        (fn [value format]\n          (if-let [matcher (or (get formats format) default)]\n            (let [coercer (coercers matcher)\n                  coerced (coercer value)]\n              (if-let [error (su/error-val coerced)]\n                (coercion/map->CoercionError\n                 {:schema schema\n                  :errors error})\n                coerced))\n            value))))\n    (-response-coercer [this schema]\n      (if (coerce-response? schema)\n        (coercion/-request-coercer this :response schema)))))\n\n(def coercion (create default-options))\n"]}