{"version":3,"sources":["app/auth/events.cljs"],"mappings":"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","names":["p__21626","map__21628","cljs.core/--destructure-map","cljs.core.get","app.auth.events/set-current-user-cookie!","current-user","app.auth.db/set-cookie","app.auth.events/remove-current-user-cookie!","_","app.auth.db/remove-cookie","refx.alpha.reg_event_fx","refx.interceptors/after","p__21670","p__21671","map__21672","vec__21673","cljs.core.nth","db","response","cljs.core.println","cljs.core.assoc","refx.alpha.reg_event_db","p__21696","vec__21697","key-error","val-error","js/console.error","p__21707","p__21708","map__21709","vec__21710","login","p__21720","p__21721","map__21723","vec__21724","p__21741","vec__21742","p__21755","p__21756","map__21758","vec__21759","p__21764","map__21765","error"],"sourcesContent":["(ns app.auth.events\n  (:require [app.http]\n            [app.auth.db :as auth.db]\n            [refx.alpha :as refx]\n            [refx.interceptors :refer [after]]))\n\n(defn set-current-user-cookie!\n  [{:keys [current-user]}]\n  (auth.db/set-cookie \"current-user\" (:expires_in current-user) current-user))\n\n(defn remove-current-user-cookie!\n  [_]\n  (auth.db/remove-cookie \"current-user\"))\n\n(refx/reg-event-fx\n :app.auth/login-done\n [(after set-current-user-cookie!)]\n (fn\n   [{db :db} [_ response]]\n   (println :success response)\n   {:db (-> db\n            (assoc :login-loading? false)\n            (assoc :login-error nil)\n            (assoc :current-user (:body response)))}))\n\n(refx/reg-event-db\n :app.auth/login-error\n (fn\n   [db [key-error val-error]]\n   (js/console.error key-error val-error)\n   (-> db\n       (assoc :login-loading? false)\n       (assoc :login-error [key-error (:body val-error)])\n       (assoc :current-user nil))))\n\n(refx/reg-event-fx\n :app.auth/login\n (fn\n   [{db :db} [_ login]]\n   {:http {:method      :post\n           :url         \"/login/auth\"\n           :body        login\n           :accept :json\n           :content-type :json\n           :on-success  [:app.auth/login-done]\n           :on-failure  [:app.auth/login-error]}\n    :db  (assoc db\n                :login-error nil\n                :login-loading? true)}))\n\n(refx/reg-event-fx\n :app.auth/send-email-done\n (fn\n   [{db :db} [_ response]]\n   (println :success response)\n   {:db (-> db\n            (assoc :login-loading? false)\n            (assoc :login-error nil)\n            (assoc :login-email-sent (-> response :body :ok)))}))\n\n(refx/reg-event-db\n :app.auth/send-email-error\n (fn\n   [db [key-error val-error]]\n   (js/console.error key-error val-error)\n   (-> db\n       (assoc :login-loading? false)\n       (assoc :login-error [key-error (:body val-error)])\n       (assoc :login-email-sent nil))))\n\n(refx/reg-event-fx\n :app.auth/send-email\n (fn\n   [{db :db} [_ login]]\n   {:http {:method      :post\n           :url         \"/login/send-email\"\n           :body        login\n           :accept :json\n           :content-type :json\n           :on-success  [:app.auth/send-email-done]\n           :on-failure  [:app.auth/send-email-error]}\n    :db  (assoc db\n                :login-error nil\n                :login-loading? true)}))\n\n(refx/reg-event-db\n :app.auth/send-email-again\n (fn\n   [db _]\n   (-> db\n       (assoc :login-email-sent nil))))\n\n(refx/reg-event-fx\n :app.auth/logout\n [(after remove-current-user-cookie!)]\n (fn\n   [{db :db} _]\n   {:db (-> db\n            (assoc :current-user nil)\n            (assoc :login-loading? false)\n            (assoc :login-error nil))}))\n\n(refx/reg-event-db\n :app.auth/error\n (fn\n   [db error]\n   (-> db\n       (assoc :current-user nil)\n       (assoc :login-loading? false)\n       (assoc :login-error error)\n       (assoc :login-email-sent nil))))\n"]}