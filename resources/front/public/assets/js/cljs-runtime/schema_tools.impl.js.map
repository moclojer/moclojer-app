{"version":3,"sources":["schema_tools/impl.cljc"],"mappings":"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","names":["schema-tools.impl/unlift-keys","data","ns-name","cljs.core.reduce","p__39838","vec__39839","cljs.core.nth","acc","k","v","cljs.core._EQ_","cljs.core/namespace","cljs.core.assoc","cljs.core.keyword","cljs.core/name","schema-tools$impl$SchemaValue$schema_value$dyn","x__5393__auto__","m__5394__auto__","schema-tools.impl/schema-value","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","schema-tools.impl/SchemaValue","this","cljs.core/PROTOCOL_SENTINEL","schema.core/One","schema.core/Maybe","schema.core/Both","cljs.core/vec","schema.core/Either","schema.core/NamedSchema","schema.core/ConditionalSchema","cljs.core.map","cljs.core/second","schema.core/CondPre","schema.core/Constrained","schema.core/EnumSchema","_","this__5343__auto__","k__5344__auto__","this__5345__auto__","k39892","else__5346__auto__","G__39905","cljs.core/Keyword","schema","value","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","ret__5366__auto__","p__39906","vec__39907","k__5367__auto__","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__39891","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this39893","other39894","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__39949","this__5351__auto__","k__5352__auto__","pred__39952","cljs.core/keyword-identical?","expr__39953","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","schema-tools.impl/Default","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__39896","extmap__5385__auto__","G__39966","cljs.core/record?","schema-tools.impl/->Default","schema-tools.impl/map->Default","schema.spec.variant.variant_spec","schema.spec.core/+no-precondition+","schema.core/explain","schema-tools.impl/default?","cljs.core.partial","cljs.core/instance?","schema-tools.impl/default","schema.core/validate"],"sourcesContent":["(ns schema-tools.impl\n  (:require [schema.core :as s]\n            [schema.spec.variant :as variant]\n            [schema.spec.core :as spec]))\n\n(defn unlift-keys [data ns-name]\n  (reduce\n    (fn [acc [k v]]\n      (if (= ns-name (namespace k))\n        (assoc acc (keyword (name k)) v)\n        acc))\n    {} data))\n\n(defprotocol SchemaValue\n  (schema-value [this] \"Returns the sub-schema for given schema.\"))\n\n(extend-protocol SchemaValue\n  schema.core.One\n  (schema-value [this] (:schema this))\n\n  schema.core.Maybe\n  (schema-value [this] (:schema this))\n\n  schema.core.Both\n  (schema-value [this] (vec (:schemas this)))\n\n  schema.core.Either\n  (schema-value [this] (vec (:schemas this)))\n\n  #?@(:clj [schema.core.Recursive\n            (schema-value [this] @(:derefable this))])\n\n  ; schema.core.Predicate\n  ; (schema-value [this] (:p? this))\n\n  schema.core.NamedSchema\n  (schema-value [this] (:schema this))\n\n  schema.core.ConditionalSchema\n  (schema-value [this] (vec (map second (:preds-and-schemas this))))\n\n  schema.core.CondPre\n  (schema-value [this] (vec (:schemas this)))\n\n  schema.core.Constrained\n  (schema-value [this] (:schema this))\n\n  schema.core.EnumSchema\n  (schema-value [this] (:vs this))\n\n  #?(:clj Object :cljs default)\n  (schema-value [this] this)\n\n  nil\n  (schema-value [_] nil))\n\n;;\n;; Default\n;;\n\n(defrecord Default [schema value]\n  s/Schema\n  (spec [_]\n    (variant/variant-spec spec/+no-precondition+ [{:schema schema}]))\n  (explain [_]\n    (list 'default (s/explain schema) value)))\n\n(def default? (partial instance? Default))\n\n(defn default [schema value]\n  (s/validate schema value)\n  (->Default schema value))\n"]}