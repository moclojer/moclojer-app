{"version":3,"sources":["schema_tools/util.cljc"],"mappings":";AAEA,AAAA;;;8BAAA,sCAAAA,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD,uEAEFE;AAFJ,AAEO,OAACC,0DAAUD,EAAEE;;;AAFpB,CAAA,4DAAA,5DAAMJ,uEAGFE,EAAEG;AAHN,AAII,YAAA,kCACWC,EAAEC,EAAEL;AADf,AAEU,OAACM,+CACC,iBAAAC,NAAKH;AAAL,AAAA,IAAAI,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAQE;QAAR,AAAAD,4CAAAD,WAAA,IAAA,/DAAUG;AAAV,AACE,IAAMD,QAAE,CAACP,mCAAAA,sCAAAA,LAAGO,kBAAAA;AAAZ,AACE,GAAI,AAACE,qBAAKD;AACR,OAACE,wBAAMT,MAAE,AAACU,6CAAKT,EAAEK,OAAGC;;AACpB,sBAAA,fAACI,kGAAM,AAACD,6CAAKT,EAAEK,OAAGC,UAAGP;;GAC3BA,EAAEJ;;AARd,AASE,aAAA,iCAAA,vCAACa,wEAAYb;;;AAbnB,CAAA,sDAAA,tDAAMF;;AAAN,AAgBA;;;;;8BAAA,wCAAAkB,tEAAMO,oEAIHvB;AAJH,AAAA,IAAAiB,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;QAAAE,JAIMV;SAJNQ,LAIUM;AAJV,AAKE,GAAIA;AACF,IAAAC,qBAAiB,AAACE,4CAAI3B,EAAEU;AAAxB,AAAA,oBAAAe;AAAA,cAAAA,VAASC;AAAT,AACE,IAAME,SAAO,CAACL,4DAAAA,wEAAAA,dAAUG,oDAAAA,5CAAQF,oDAAAA;AAAhC,AACE,GAAI,AAACL,cAAIS;AACP,OAACC,8CAAM7B,EAAEU,EAAEkB;;AACX,OAACE,+CAAO9B,EAAEU;;;AACdV;;;AACF,OAAC8B,+CAAO9B,EAAEU;;;AAEd,6BAAA,7BAAMqB,kEAAUC,EAAEhC;AAAlB,AACE,OAACiC,oBACC,AAACC,2BACC,AAACC,oBACC,WAAKC,IAAI1B,EAAEC;AAAX,AAAc,OAAC0B,oDAAOD,IAAI,CAACJ,kCAAAA,qCAAAA,LAAEtB,iBAAAA,IAAGC;GAChC,AAAC2B,qBAAU,AAACC,gBAAMvC,IAClBA,IACJ,AAACwC,eAAKxC","names":["var_args","G__30098","schema-tools.util/path-vals","js/Error","m","schema_tools.util.path_vals","cljs.core/identity","fk","l","p","cljs.core.reduce","p__30150","vec__30151","cljs.core.nth","k","v","cljs.core/map?","pvals","cljs.core.conj","cljs.core/cons","p__30168","vec__30169","seq__30170","cljs.core/seq","first__30171","cljs.core/first","cljs.core/next","schema-tools.util/dissoc-in","ks","temp__5802__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","schema-tools.util/map-keys","f","cljs.core/with-meta","cljs.core/persistent!","cljs.core/reduce-kv","acc","cljs.core.assoc_BANG_","cljs.core/transient","cljs.core/empty","cljs.core/meta"],"sourcesContent":["(ns schema-tools.util)\n\n(defn path-vals\n  \"Returns vector of tuples containing path vector to the value and the value.\"\n  ([m] (path-vals m identity))\n  ([m fk]\n    (letfn\n      [(pvals [l p m]\n              (reduce\n                (fn [l [k v]]\n                  (let [k (fk k)]\n                    (if (map? v)\n                      (pvals l (conj p k) v)\n                      (cons [(conj p k) v] l))))\n                l m))]\n      (pvals [] [] m))))\n\n;; https://github.com/clojure/core.incubator/blob/master/src/main/clojure/clojure/core/incubator.clj\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks]]\n  (if ks\n    (if-let [nextmap (get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn map-keys [f m]\n  (with-meta\n    (persistent!\n      (reduce-kv\n        (fn [acc k v] (assoc! acc (f k) v))\n        (transient (empty m))\n        m))\n    (meta m)))\n"]}