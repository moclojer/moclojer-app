{
"version":3,
"file":"module$node_modules$graphql$utilities$coerceInputValue.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/graphql/utilities/coerceInputValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$coerceInputValue\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.coerceInputValue = coerceInputValue;\n\nvar _didYouMean = require('../jsutils/didYouMean.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _Path = require('../jsutils/Path.js');\n\nvar _printPathArray = require('../jsutils/printPathArray.js');\n\nvar _suggestionList = require('../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _definition = require('../type/definition.js');\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nfunction coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + (0, _inspect.inspect)(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${(0, _printPathArray.printPathArray)(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if ((0, _definition.isNonNullType)(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      (0, _Path.pathToArray)(path),\n      inputValue,\n      new _GraphQLError.GraphQLError(\n        `Expected non-nullable type \"${(0, _inspect.inspect)(\n          type,\n        )}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = (0, _Path.addPath)(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(inputValue)) {\n      onError(\n        (0, _Path.pathToArray)(path),\n        inputValue,\n        new _GraphQLError.GraphQLError(\n          `Expected type \"${type.name}\" to be an object.`,\n        ),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          const typeStr = (0, _inspect.inspect)(field.type);\n          onError(\n            (0, _Path.pathToArray)(path),\n            inputValue,\n            new _GraphQLError.GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        (0, _Path.addPath)(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = (0, _suggestionList.suggestionList)(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          (0, _Path.pathToArray)(path),\n          inputValue,\n          new _GraphQLError.GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof _GraphQLError.GraphQLError) {\n        onError((0, _Path.pathToArray)(path), inputValue, error);\n      } else {\n        onError(\n          (0, _Path.pathToArray)(path),\n          inputValue,\n          new _GraphQLError.GraphQLError(\n            `Expected type \"${type.name}\". ` + error.message,\n            {\n              originalError: error,\n            },\n          ),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        (0, _Path.pathToArray)(path),\n        inputValue,\n        new _GraphQLError.GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","defaultOnError","path","invalidValue","error","errorPrefix","_inspect","inspect","length","_printPathArray","printPathArray","message","coerceInputValueImpl","inputValue","type","onError","_definition","isNonNullType","ofType","_Path","pathToArray","_GraphQLError","GraphQLError","isListType","itemType","_isIterableObject","isIterableObject","Array","from","itemValue","index","itemPath","addPath","undefined","isInputObjectType","_isObjectLike","isObjectLike","name","coercedValue","fieldDefs","getFields","field","Object","values","fieldValue","defaultValue","typeStr","fieldName","keys","suggestions","_suggestionList","suggestionList","_didYouMean","didYouMean","isLeafType","parseResult","parseValue","originalError","_invariant","invariant","defineProperty","value","coerceInputValue"]
}
