shadow$provide.module$node_modules$graphql$utilities$lexicographicSortSchema=function(global,require,module,exports){function sortObjMap(map,sortValueFn){const sortedMap=Object.create(null);for(const key of Object.keys(map).sort(_naturalCompare.naturalCompare))sortedMap[key]=sortValueFn(map[key]);return sortedMap}function sortByName(array){return sortBy(array,obj=>obj.name)}function sortBy(array,mapToKey){return array.slice().sort((obj1,obj2)=>{obj1=mapToKey(obj1);obj2=mapToKey(obj2);return(0,_naturalCompare.naturalCompare)(obj1,
obj2)})}Object.defineProperty(exports,"__esModule",{value:!0});exports.lexicographicSortSchema=function(schema){function replaceType(type){return(0,_definition.isListType)(type)?new _definition.GraphQLList(replaceType(type.ofType)):(0,_definition.isNonNullType)(type)?new _definition.GraphQLNonNull(replaceType(type.ofType)):replaceNamedType(type)}function replaceNamedType(type){return typeMap[type.name]}function replaceMaybeType(maybeType){return maybeType&&replaceNamedType(maybeType)}function sortArgs(args){return sortObjMap(args,
arg=>({...arg,type:replaceType(arg.type)}))}function sortFields(fieldsMap){return sortObjMap(fieldsMap,field=>({...field,type:replaceType(field.type),args:field.args&&sortArgs(field.args)}))}function sortInputFields(fieldsMap){return sortObjMap(fieldsMap,field=>({...field,type:replaceType(field.type)}))}schema=schema.toConfig();const typeMap=(0,_keyValMap.keyValMap)(sortByName(schema.types),type=>type.name,function(type){if((0,_definition.isScalarType)(type)||(0,_introspection.isIntrospectionType)(type))return type;
if((0,_definition.isObjectType)(type)){const config=type.toConfig();return new _definition.GraphQLObjectType({...config,interfaces:()=>sortByName(config.interfaces).map(replaceNamedType),fields:()=>sortFields(config.fields)})}if((0,_definition.isInterfaceType)(type)){const config=type.toConfig();return new _definition.GraphQLInterfaceType({...config,interfaces:()=>sortByName(config.interfaces).map(replaceNamedType),fields:()=>sortFields(config.fields)})}if((0,_definition.isUnionType)(type)){const config=
type.toConfig();return new _definition.GraphQLUnionType({...config,types:()=>sortByName(config.types).map(replaceNamedType)})}if((0,_definition.isEnumType)(type))return type=type.toConfig(),new _definition.GraphQLEnumType({...type,values:sortObjMap(type.values,value=>value)});if((0,_definition.isInputObjectType)(type)){const config=type.toConfig();return new _definition.GraphQLInputObjectType({...config,fields:()=>sortInputFields(config.fields)})}(0,_invariant.invariant)(!1,"Unexpected type: "+(0,_inspect.inspect)(type))});
return new _schema.GraphQLSchema({...schema,types:Object.values(typeMap),directives:sortByName(schema.directives).map(function(directive){directive=directive.toConfig();return new _directives.GraphQLDirective({...directive,locations:sortBy(directive.locations,x=>x),args:sortArgs(directive.args)})}),query:replaceMaybeType(schema.query),mutation:replaceMaybeType(schema.mutation),subscription:replaceMaybeType(schema.subscription)})};var _inspect=require("module$node_modules$graphql$jsutils$inspect"),
_invariant=require("module$node_modules$graphql$jsutils$invariant"),_keyValMap=require("module$node_modules$graphql$jsutils$keyValMap"),_naturalCompare=require("module$node_modules$graphql$jsutils$naturalCompare"),_definition=require("module$node_modules$graphql$type$definition"),_directives=require("module$node_modules$graphql$type$directives"),_introspection=require("module$node_modules$graphql$type$introspection"),_schema=require("module$node_modules$graphql$type$schema")}
//# sourceMappingURL=module$node_modules$graphql$utilities$lexicographicSortSchema.js.map
