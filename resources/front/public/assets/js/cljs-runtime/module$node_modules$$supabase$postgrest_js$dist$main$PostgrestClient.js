shadow$provide.module$node_modules$$supabase$postgrest_js$dist$main$PostgrestClient=function(global,require,module,exports){global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});const PostgrestQueryBuilder_1=global(require("module$node_modules$$supabase$postgrest_js$dist$main$PostgrestQueryBuilder")),PostgrestFilterBuilder_1=global(require("module$node_modules$$supabase$postgrest_js$dist$main$PostgrestFilterBuilder")),
constants_1=require("module$node_modules$$supabase$postgrest_js$dist$main$constants");class PostgrestClient{constructor(url,{headers={},schema,fetch}={}){this.url=url;this.headers=Object.assign(Object.assign({},constants_1.DEFAULT_HEADERS),headers);this.schema=schema;this.fetch=fetch}from(relation){relation=new URL(`${this.url}/${relation}`);return new PostgrestQueryBuilder_1.default(relation,{headers:Object.assign({},this.headers),schema:this.schema,fetch:this.fetch})}rpc(fn,args={},{head=!1,count}=
{}){const url=new URL(`${this.url}/rpc/${fn}`);let body;head?(fn="HEAD",Object.entries(args).forEach(([name,value])=>{url.searchParams.append(name,`${value}`)})):(fn="POST",body=args);args=Object.assign({},this.headers);count&&(args.Prefer=`count=${count}`);return new PostgrestFilterBuilder_1.default({method:fn,url,headers:args,schema:this.schema,body,fetch:this.fetch,allowEmpty:!1})}}exports.default=PostgrestClient}
//# sourceMappingURL=module$node_modules$$supabase$postgrest_js$dist$main$PostgrestClient.js.map
