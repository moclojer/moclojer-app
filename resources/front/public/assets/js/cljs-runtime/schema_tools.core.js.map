{"version":3,"sources":["schema_tools/core.cljc"],"mappings":"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","names":["schema-tools.core/explicit-key","k","schema.core/specific-key?","schema.core/explicit-schema-key","schema-tools.core/explicit-key-set","ks","cljs.core.reduce","s","cljs.core.conj","schema-tools.core/single-sequence-element?","x","schema.core/One","schema-tools.core/index-in-schema","m","last-idx","cljs.core/count","cljs.core.get","schema-tools.core/key-in-schema","cljs.core/sequential?","cljs.core/contains?","schema.core/optional-key","schema.core/required-key","schema-tools.core/unwrap-sequence-schemas","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","schema-tools.core/get-in-schema","p__40181","vec__40182","cljs.core.nth","seq40178","G__40179","cljs.core/first","cljs.core/next","G__40180","self__5754__auto__","default","schema-tools.core/maybe-anonymous","original","current","cljs.core._EQ_","cljs.core.vary_meta","meta","new-meta","cljs.core.dissoc","cljs.core/empty?","schema-tools.core/transform-keys","schema","f","optional-keys-schema?","js/Error","cljs.core/not","cljs.core/vector?","ks?","schema-tools.util/map-keys","and__5043__auto__","G__40185","G__40186","schema-tools.core/AnyKeys","schema.core/Any","schema-tools.core/any-keys","schema-tools.core/AnyKeywordKeys","schema.core/Keyword","schema-tools.core/any-keyword-keys","seq40188","self__5755__auto__","cljs.core/seq","schemas","cljs.core.apply","cljs.core/merge","schema-tools.core/assoc","seq40189","G__40190","kvs","p__40191","vec__40192","v","rk","cljs.core.assoc","cljs.core.partition","schema-tools.core/dissoc","seq40196","G__40197","schema-tools.core/select-keys","cljs.core.into","cljs.core.filter","cljs.core.comp","cljs.core/key","schema-tools.core/schema-value","schema-tools.impl/schema-value","G__40202","schema-tools.core/get-in","schema_tools.core.get_in","not-found","sentinel","js/Object","schema_tools.core.get_in_schema","p__40206","vec__40207","seq__40208","first__40209","schema-tools.core/assoc-in","kis","G__40211","G__40212","G__40213","schema-tools.core/update-in","p__40221","vec__40222","seq__40223","first__40224","seq40214","G__40215","G__40216","G__40217","args","p__40226","vec__40227","seq__40228","first__40229","schema-tools.core/dissoc-in","temp__5802__auto__","nextmap","newmap","schema_tools.core.dissoc","schema-tools.core/update","seq40231","G__40232","G__40233","G__40234","schema-tools.core/merge","seq40236","p1__40235#","cljs.core/every?","cljs.core/map?","cljs.core/some","cljs.core/identity","acc","p__40238","vec__40239","schema-tools.core/default","schema-tools.impl/default","this__5343__auto__","k__5344__auto__","this__5345__auto__","k40243","else__5346__auto__","G__40247","cljs.core/Keyword","data","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","ret__5366__auto__","p__40249","vec__40250","k__5367__auto__","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__40242","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this40244","other40245","cljs.core/PROTOCOL_SENTINEL","this__5353__auto__","k__5354__auto__","cljs.core/-with-meta","cljs.core/not-empty","this__5350__auto__","G__40260","this__5351__auto__","k__5352__auto__","pred__40261","cljs.core/keyword-identical?","expr__40262","this__5356__auto__","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/-nth","cljs.core/-conj","schema-tools.core/Schema","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__40246","extmap__5385__auto__","G__40264","cljs.core/record?","schema-tools.core/->Schema","schema-tools.core/map->Schema","_","schema.spec.variant.variant_spec","schema.spec.core/+no-precondition+","this","ops","schema.core/explain","G__40258","G__40268","schema-tools.core/schema","pred","schema_tools.core.schema","G__40271","schema-tools.core/optional-keys","schema_tools.core.optional_keys","G__40275","schema-tools.core/required-keys","schema_tools.core.required_keys","p1__40273#","G__40278","schema-tools.core/select-schema","value","schema_tools.core.select_schema","cljs.core/constantly","matcher","schema_tools.coerce.coerce","schema_tools.coerce.or_matcher","schema-tools.coerce/map-filter-matcher","schema-tools.core/open-schema","schema-tools.walk/prewalk","schema.core/find-extra-keys-schema","schema_tools.core.assoc","schema-tools.core/optional-keys-schema","schema-tools.core/schema-with-description","description","schema-tools.core/schema-description","cljs.core/meta"],"sourcesContent":["(ns schema-tools.core\n  (:require [schema.core :as s]\n            [schema-tools.coerce :as stc]\n            [schema-tools.util :as stu]\n            [schema-tools.walk :as walk]\n            [schema.spec.variant :as variant]\n            [schema.spec.core :as spec]\n            [schema-tools.impl :as impl])\n  (:refer-clojure :exclude [assoc dissoc select-keys update get-in assoc-in update-in merge]))\n\n(defn- explicit-key [k] (if (s/specific-key? k) (s/explicit-schema-key k) k))\n\n(defn- explicit-key-set [ks]\n  (reduce (fn [s k] (conj s (explicit-key k))) #{} ks))\n\n(defn- single-sequence-element? [x]\n  (instance? schema.core.One x))\n\n(defn- index-in-schema [m k]\n  (let [last-idx (dec (count m))]\n    (cond\n      (<= k last-idx) k\n      (not (single-sequence-element? (get m last-idx))) last-idx\n      :else nil)))\n\n(defn- key-in-schema [m k]\n  (cond\n    (and (sequential? m) (number? k)) (index-in-schema m k)\n    (contains? m k) k\n    (contains? m (s/optional-key k)) (s/optional-key k)\n    (contains? m (s/required-key k)) (s/required-key k)\n    (and (s/specific-key? k) (contains? m (s/explicit-schema-key k))) (s/explicit-schema-key k)\n    :else k))\n\n(defn- unwrap-sequence-schemas [m]\n  (cond\n    (single-sequence-element? m) (:schema m)\n    :else m))\n\n(defn- get-in-schema [m k & [default]]\n  (unwrap-sequence-schemas (get m (key-in-schema m k) default)))\n\n(defn- maybe-anonymous [original current]\n  (if (= original current)\n    original\n    (vary-meta\n      current\n      (fn [meta]\n        (let [new-meta (clojure.core/dissoc meta :name :ns)]\n          (if (empty? new-meta)\n            nil\n            new-meta))))))\n\n(defn- transform-keys\n  [schema f ks optional-keys-schema?]\n  (assert (or (not ks) (vector? ks)) \"input should be nil or a vector of keys.\")\n  (maybe-anonymous\n    schema\n    (let [ks? (explicit-key-set ks)]\n      (stu/map-keys\n        (fn [k]\n          (cond\n            (and ks (not (ks? (explicit-key k)))) k\n            (s/specific-key? k) (f (s/explicit-schema-key k))\n            optional-keys-schema? k\n            :else (f k)))\n        schema))))\n\n;;\n;; Definitions\n;;\n\n(def AnyKeys {s/Any s/Any})\n(defn any-keys [] AnyKeys)\n\n(def AnyKeywordKeys {s/Keyword s/Any})\n(defn any-keyword-keys [& schemas] (apply clojure.core/merge AnyKeywordKeys schemas))\n\n;;\n;; Core functions\n;;\n\n(defn assoc\n  \"Assoc[iate]s key & vals into Schema.\"\n  [schema & kvs]\n  (maybe-anonymous\n    schema\n    (reduce\n      (fn [schema [k v]]\n        #?(:clj (when-not v\n                  (throw (IllegalArgumentException.\n                           \"assoc expects even number of arguments after map/vector, found odd number\"))))\n        (let [rk (key-in-schema schema k)]\n          (-> schema\n              (clojure.core/dissoc rk)\n              (clojure.core/assoc k v))))\n      schema\n      (partition 2 2 nil kvs))))\n\n(defn dissoc\n  \"Dissoc[iate]s keys from Schema.\"\n  [schema & ks]\n  (maybe-anonymous\n    schema\n    (reduce\n      (fn [schema k] (clojure.core/dissoc schema (key-in-schema schema k)))\n      schema ks)))\n\n(defn select-keys\n  \"Like `clojure.core/select-keys` but handles boths optional-keys and required-keys.\"\n  [schema ks]\n  (maybe-anonymous\n    schema\n    (let [ks? (explicit-key-set ks)]\n      (into {} (filter (comp ks? explicit-key key) schema)))))\n\n(defn schema-value\n  \"Returns the sub-schema or sub-schemas of given schema.\"\n  [s]\n  (impl/schema-value s))\n\n(defn get-in\n  \"Returns the value in a nested associative Schema,\n  where `ks` is a sequence of keys. Returns `nil` if the key\n  is not present, or the `not-found` value if supplied.\"\n  ([m ks]\n   (get-in m ks nil))\n  ([m ks not-found]\n   (loop [sentinel #?(:clj (Object.) :cljs (js/Object.))\n          m m\n          ks (seq ks)]\n     (if ks\n       (let [k (first ks)\n             m (get-in-schema m k sentinel)]\n         (if (identical? sentinel m)\n           not-found\n           (recur sentinel m (next ks))))\n       m))))\n\n(defn assoc-in\n  \"Associates a value in a nested associative Schema, where `ks` is a\n  sequence of keys and `v` is the new value and returns a new nested Schema.\n  If any levels do not exist, hash-maps will be created.\"\n  [schema [k & ks] v]\n  (maybe-anonymous\n    schema\n    (let [kis (key-in-schema schema k)]\n      (if ks\n        (clojure.core/assoc schema kis (assoc-in (get-in-schema schema k) ks v))\n        (clojure.core/assoc schema kis v)))))\n\n(defn update-in\n  \"'Updates' a value in a nested associative Schema, where `ks` is a\n  sequence of keys and `f` is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested Schema. If any levels do not exist, hash-maps will be\n  created.\"\n  [schema [k & ks] f & args]\n  (maybe-anonymous\n    schema\n    (let [kis (key-in-schema schema k)]\n      (if ks\n        (clojure.core/assoc schema kis (apply update-in (get-in-schema schema k) ks f args))\n        (clojure.core/assoc schema kis (apply f (get-in-schema schema k) args))))))\n\n;; (c) original https://github.com/clojure/core.incubator/blob/master/src/main/clojure/clojure/core/incubator.clj\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative Schema returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new Schema.\"\n  [schema [k & ks]]\n  (let [k (key-in-schema schema k)]\n    (if ks\n      (if-let [nextmap (get schema k)]\n        (let [newmap (dissoc-in nextmap ks)]\n          (if (seq newmap)\n            (clojure.core/assoc schema k newmap)\n            (dissoc schema k)))\n        schema)\n      (dissoc schema k))))\n\n(defn update\n  \"Updates a value in a map with a function.\"\n  [schema k f & args]\n  (apply update-in schema [k] f args))\n\n(defn merge\n  \"Returns a Schema that consists of the rest of the Schemas conj-ed onto\n  the first. If a schema key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result. Works only\n  with Map schemas.\"\n  [& schemas]\n  {:pre [(every? #(or (map? %) (nil? %)) schemas)]}\n  (maybe-anonymous\n    (first schemas)\n    (when (some identity schemas)\n      (reduce\n        (fn [acc m]\n          (reduce\n            (fn [acc [k v]]\n              (clojure.core/assoc (dissoc acc k) k v))\n            acc m)) schemas))))\n\n;;\n;; Defaults\n;;\n\n(defn default [schema default]\n  (impl/default schema default))\n\n;;\n;; Schema\n;;\n\n(defrecord Schema [schema data]\n  s/Schema\n  (spec [_]\n    (variant/variant-spec\n      spec/+no-precondition+\n      [{:schema schema}]))\n  (explain [this]\n    (let [ops (select-keys data [:name :description])]\n      (-> ['schema (-> this :schema s/explain)]\n          (cond-> (seq ops) (conj ops))\n          (seq)))))\n\n(defn schema\n  ([pred]\n   (schema pred nil))\n  ([pred data]\n   (->Schema pred data)))\n\n;;\n;; Extras\n;;\n\n(defn optional-keys\n  \"Makes given map keys optional. Defaults to all keys.\"\n  ([m] (optional-keys m nil))\n  ([m ks] (transform-keys m s/optional-key ks false)))\n\n(defn required-keys\n  \"Makes given map keys required. Defaults to all keys.\"\n  ([m] (required-keys m nil))\n  ([m ks] (transform-keys m #(if (keyword? %) % (s/required-key %)) ks false)))\n\n(defn select-schema\n  \"Strips all disallowed keys from nested Map schemas via coercion. Takes an optional\n  coercion matcher for extra coercing the selected value(s) on a single sweep. If a value\n  can't be coerced to match the schema `ExceptionInfo` is thrown (like `schema.core/validate`).\"\n  ([value schema]\n   (select-schema value schema (constantly nil)))\n  ([value schema matcher]\n   (stc/coerce value schema (stc/or-matcher stc/map-filter-matcher matcher))))\n\n(defn open-schema\n  \"Walks a schema adding [`s/Keyword` `s/Any`] entry to all Map Schemas\"\n  [schema]\n  (walk/prewalk\n   (fn [x]\n     (if (and (map? x) (not (record? x)) (not (s/find-extra-keys-schema x)))\n       (assoc x s/Keyword s/Any)\n       x))\n   schema))\n\n(defn optional-keys-schema\n  \"Walks a schema making all keys optional in Map Schemas.\"\n  [schema]\n  (walk/prewalk\n    (fn [x]\n      (if (and (map? x) (not (record? x)))\n        (transform-keys x s/optional-key nil true)\n        x))\n    schema))\n\n(defn schema-with-description\n  \"Records description in schema's metadata.\"\n  [schema description]\n  (vary-meta schema assoc :description description))\n\n(defn schema-description\n  \"Returns the description of a schema attached via schema-with-description.\"\n  [schema]\n  (-> schema meta :description))\n\n#?(:clj\n   (defn resolve-schema\n     \"Returns the schema var if the schema contains the `:name` and `:ns`\n     definitions (set by `schema.core/defschema`).\"\n     [schema]\n     (if-let [schema-ns (s/schema-ns schema)]\n       (ns-resolve schema-ns (s/schema-name schema)))))\n\n#?(:clj\n   (defn resolve-schema-description\n     \"Returns the schema description, in this lookup order:\n     a) schema meta :description\n     b) schema var meta :doc if not \\\"\\\"\n     c) nil\"\n     [schema]\n     (or (schema-description schema)\n         (if-let [schema-ns (s/schema-ns schema)]\n           (let [doc (-> (ns-resolve schema-ns (s/schema-name schema)) meta :doc)]\n             (if-not (= \"\" doc) doc))))))\n"]}