{
"version":3,
"file":"module$node_modules$graphql$utilities$astFromValue.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/graphql/utilities/astFromValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$astFromValue\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.astFromValue = astFromValue;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _scalars = require('../type/scalars.js');\n\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  if ((0, _definition.isNonNullType)(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      _kinds.Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: _kinds.Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: _kinds.Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: _kinds.Kind.OBJECT_FIELD,\n          name: {\n            kind: _kinds.Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: _kinds.Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: _kinds.Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: _kinds.Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: _kinds.Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if ((0, _definition.isEnumType)(type)) {\n        return {\n          kind: _kinds.Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: _kinds.Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: _kinds.Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(\n      `Cannot convert value to AST: ${(0, _inspect.inspect)(serialized)}.`,\n    );\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n\n};"],
"names":["shadow$provide","global","require","module","exports","astFromValue","value","type","_definition","isNonNullType","astValue","ofType","kind","_kinds","Kind","NULL","undefined","isListType","itemType","_isIterableObject","isIterableObject","valuesNodes","item","itemNode","push","LIST","values","isInputObjectType","_isObjectLike","isObjectLike","fieldNodes","field","Object","getFields","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","fields","isLeafType","serialized","serialize","BOOLEAN","Number","isFinite","stringNum","String","integerStringRegExp","test","INT","FLOAT","isEnumType","ENUM","_scalars","GraphQLID","STRING","TypeError","_inspect","inspect","_invariant","invariant","defineProperty"]
}
