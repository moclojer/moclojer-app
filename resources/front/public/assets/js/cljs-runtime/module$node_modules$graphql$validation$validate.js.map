{
"version":3,
"file":"module$node_modules$graphql$validation$validate.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/graphql/validation/validate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$validate\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertValidSDL = assertValidSDL;\nexports.assertValidSDLExtension = assertValidSDLExtension;\nexports.validate = validate;\nexports.validateSDL = validateSDL;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _visitor = require('../language/visitor.js');\n\nvar _validate = require('../type/validate.js');\n\nvar _TypeInfo = require('../utilities/TypeInfo.js');\n\nvar _specifiedRules = require('./specifiedRules.js');\n\nvar _ValidationContext = require('./ValidationContext.js');\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\nfunction validate(\n  schema,\n  documentAST,\n  rules = _specifiedRules.specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new _TypeInfo.TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new _ValidationContext.ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new _GraphQLError.GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = (0, _visitor.visitInParallel)(\n    rules.map((rule) => rule(context)),\n  ); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    (0, _visitor.visit)(\n      documentAST,\n      (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor),\n    );\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nfunction validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = _specifiedRules.specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new _ValidationContext.SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","validateSDL","documentAST","schemaToExtend","rules","_specifiedRules","specifiedSDLRules","errors","context","_ValidationContext","SDLValidationContext","error","push","visitors","map","rule","_visitor","visit","visitInParallel","Object","defineProperty","value","assertValidSDL","length","Error","message","join","assertValidSDLExtension","schema","validate","specifiedRules","options","typeInfo","_TypeInfo","TypeInfo","_options$maxErrors","maxErrors","_devAssert","devAssert","_validate","assertValidSchema","abortObj","freeze","ValidationContext","_GraphQLError","GraphQLError","visitor","visitWithTypeInfo","e"]
}
