shadow$provide.module$node_modules$graphql$validation$rules$PossibleTypeExtensionsRule=function(global,require,module,exports){function typeToExtKind(type){if((0,_definition.isScalarType)(type))return _kinds.Kind.SCALAR_TYPE_EXTENSION;if((0,_definition.isObjectType)(type))return _kinds.Kind.OBJECT_TYPE_EXTENSION;if((0,_definition.isInterfaceType)(type))return _kinds.Kind.INTERFACE_TYPE_EXTENSION;if((0,_definition.isUnionType)(type))return _kinds.Kind.UNION_TYPE_EXTENSION;if((0,_definition.isEnumType)(type))return _kinds.Kind.ENUM_TYPE_EXTENSION;
if((0,_definition.isInputObjectType)(type))return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;(0,_invariant.invariant)(!1,"Unexpected type: "+(0,_inspect.inspect)(type))}function extensionKindToTypeName(kind){switch(kind){case _kinds.Kind.SCALAR_TYPE_EXTENSION:return"scalar";case _kinds.Kind.OBJECT_TYPE_EXTENSION:return"object";case _kinds.Kind.INTERFACE_TYPE_EXTENSION:return"interface";case _kinds.Kind.UNION_TYPE_EXTENSION:return"union";case _kinds.Kind.ENUM_TYPE_EXTENSION:return"enum";case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:return"input object";
default:(0,_invariant.invariant)(!1,"Unexpected kind: "+(0,_inspect.inspect)(kind))}}Object.defineProperty(exports,"__esModule",{value:!0});exports.PossibleTypeExtensionsRule=function(context){function checkExtension(node){const typeName=node.name.value;var defNode=definedTypes[typeName],existingType=null===schema||void 0===schema?void 0:schema.getType(typeName);let expectedKind;defNode?expectedKind=defKindToExtKind[defNode.kind]:existingType&&(expectedKind=typeToExtKind(existingType));expectedKind?
expectedKind!==node.kind&&(existingType=extensionKindToTypeName(node.kind),context.reportError(new _GraphQLError.GraphQLError(`Cannot extend non-${existingType} type "${typeName}".`,{nodes:defNode?[defNode,node]:node}))):(defNode=Object.keys({...definedTypes,...(null===schema||void 0===schema?void 0:schema.getTypeMap())}),defNode=(0,_suggestionList.suggestionList)(typeName,defNode),context.reportError(new _GraphQLError.GraphQLError(`Cannot extend type "${typeName}" because it is not defined.`+(0,_didYouMean.didYouMean)(defNode),
{nodes:node.name})))}const schema=context.getSchema(),definedTypes=Object.create(null);for(const def of context.getDocument().definitions)(0,_predicates.isTypeDefinitionNode)(def)&&(definedTypes[def.name.value]=def);return{ScalarTypeExtension:checkExtension,ObjectTypeExtension:checkExtension,InterfaceTypeExtension:checkExtension,UnionTypeExtension:checkExtension,EnumTypeExtension:checkExtension,InputObjectTypeExtension:checkExtension}};var _didYouMean=require("module$node_modules$graphql$jsutils$didYouMean"),
_inspect=require("module$node_modules$graphql$jsutils$inspect"),_invariant=require("module$node_modules$graphql$jsutils$invariant"),_suggestionList=require("module$node_modules$graphql$jsutils$suggestionList"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_kinds=require("module$node_modules$graphql$language$kinds"),_predicates=require("module$node_modules$graphql$language$predicates"),_definition=require("module$node_modules$graphql$type$definition");const defKindToExtKind=
{[_kinds.Kind.SCALAR_TYPE_DEFINITION]:_kinds.Kind.SCALAR_TYPE_EXTENSION,[_kinds.Kind.OBJECT_TYPE_DEFINITION]:_kinds.Kind.OBJECT_TYPE_EXTENSION,[_kinds.Kind.INTERFACE_TYPE_DEFINITION]:_kinds.Kind.INTERFACE_TYPE_EXTENSION,[_kinds.Kind.UNION_TYPE_DEFINITION]:_kinds.Kind.UNION_TYPE_EXTENSION,[_kinds.Kind.ENUM_TYPE_DEFINITION]:_kinds.Kind.ENUM_TYPE_EXTENSION,[_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION]:_kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION}}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$PossibleTypeExtensionsRule.js.map
