{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueArgumentNamesRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,uBAAR,CAcAA,QAAgC,CAACC,OAAD,CAAU,CAMxCC,QAASA,mBAAkB,CAACC,UAAD,CAAa,CACtC,IAAIC,qBAKEC,WAAAA,CAC+C,IAAnD,IAACD,qBAAD,CAAyBD,UAAWG,CAAAA,SAApC,GAC0B,IAAK,EAD/B,GACAF,qBADA,CAEIA,qBAFJ,CAGI,EACAG,sBAAAA,CAAW,GAAIC,QAASC,CAAAA,OAAb,EACfJ,UADe,CAEdK,GAAD,EAASA,GAAIC,CAAAA,IAAKZ,CAAAA,KAFH,CAKjB,KAAK,MAAM,CAACa,OAAD;AAAUC,QAAV,CAAX,EAAkCN,sBAAlC,CACwB,CAAtB,CAAIM,QAASC,CAAAA,MAAb,EACEb,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,yCAAwCL,OAAxC,IADH,CAEE,CACEM,MAAOL,QAASM,CAAAA,GAAT,CAAcC,IAAD,EAAUA,IAAKT,CAAAA,IAA5B,CADT,CAFF,CADF,CAlBkC,CALxC,MAAO,CACLU,MAAOnB,kBADF,CAELoB,UAAWpB,kBAFN,CADiC,CAZ1C,KAAIM,SAAWd,OAAA,CAAQ,6CAAR,CAAf,CAEIsB,cAAgBtB,OAAA,CAAQ,gDAAR,CAV6G;",
"sources":["node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueArgumentNamesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nfunction UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = (0, _groupBy.groupBy)(\n      argumentNodes,\n      (arg) => arg.name.value,\n    );\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","UniqueArgumentNamesRule","context","checkArgUniqueness","parentNode","_parentNode$arguments","argumentNodes","arguments","seenArgs","_groupBy","groupBy","arg","name","argName","argNodes","length","reportError","_GraphQLError","GraphQLError","nodes","map","node","Field","Directive"]
}
