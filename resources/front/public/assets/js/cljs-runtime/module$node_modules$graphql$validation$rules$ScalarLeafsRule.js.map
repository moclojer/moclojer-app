{
"version":3,
"file":"module$node_modules$graphql$validation$rules$ScalarLeafsRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAcAA,QAAwB,CAACC,OAAD,CAAU,CAChC,MAAO,CACLC,KAAK,CAACC,IAAD,CAAO,CACV,IAAMC,KAAOH,OAAQI,CAAAA,OAAR,EAAb,CACMC,aAAeH,IAAKG,CAAAA,YAEtBF,KAAJ,GACM,GAAIG,WAAYC,CAAAA,UAAhB,EAA4B,GAAID,WAAYE,CAAAA,YAAhB,EAA8BL,IAA9B,CAA5B,CAAJ,CACME,YADN,GAEUI,IAEN,CAFkBP,IAAKQ,CAAAA,IAAKZ,CAAAA,KAE5B,CADMa,IACN,CADgB,GAAIC,QAASC,CAAAA,OAAb,EAAsBV,IAAtB,CAChB,CAAAH,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,UAASP,IAAT,2CAA6DE,IAA7D,qBADH;AAEE,CACEM,MAAOZ,YADT,CAFF,CADF,CAJJ,EAaYA,YAbZ,GAcQI,YAEN,CAFkBP,IAAKQ,CAAAA,IAAKZ,CAAAA,KAE5B,CADMa,IACN,CADgB,GAAIC,QAASC,CAAAA,OAAb,EAAsBV,IAAtB,CAChB,CAAAH,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,UAASP,YAAT,cAAgCE,IAAhC,uDAA8FF,YAA9F,YADH,CAEE,CACEQ,MAAOf,IADT,CAFF,CADF,CAhBF,CADF,CAJU,CADP,CADyB,CAZlC,KAAIU,SAAWnB,OAAA,CAAQ,6CAAR,CAAf,CAEIsB,cAAgBtB,OAAA,CAAQ,gDAAR,CAFpB,CAIIa,YAAcb,OAAA,CAAQ,6CAAR,CAZuG;",
"sources":["node_modules/graphql/validation/rules/ScalarLeafsRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$ScalarLeafsRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.ScalarLeafsRule = ScalarLeafsRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nfunction ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = (0, _inspect.inspect)(type);\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = (0, _inspect.inspect)(type);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","_definition","isLeafType","getNamedType","fieldName","name","typeStr","_inspect","inspect","reportError","_GraphQLError","GraphQLError","nodes"]
}
