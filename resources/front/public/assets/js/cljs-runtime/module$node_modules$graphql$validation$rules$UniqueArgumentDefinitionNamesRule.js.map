{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueArgumentDefinitionNamesRule.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,CAAmG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3IC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iCAAR,CAYAA,QAA0C,CAACC,OAAD,CAAU,CAsBlDC,QAASA,2BAA0B,CAACC,QAAD,CAAW,CAC5C,IAAIC,gBAEJ,OAAMC,SAAWF,QAASG,CAAAA,IAAKP,CAAAA,KAIzBQ,SAAAA,CACqC,IAAzC,IAACH,gBAAD,CAAoBD,QAASK,CAAAA,MAA7B,GACqB,IAAK,EAD1B,GACAJ,gBADA,CAEIA,gBAFJ,CAGI,EAEN,KAAK,MAAMK,QAAX,GAAuBF,SAAvB,CAAmC,CACjC,IAAIG,mBAEEC;gBAAAA,CAAYF,QAASH,CAAAA,IAAKP,CAAAA,KAI1Ba,SAAAA,CAC2C,IAA/C,IAACF,mBAAD,CAAuBD,QAASI,CAAAA,SAAhC,GACwB,IAAK,EAD7B,GACAH,mBADA,CAEIA,mBAFJ,CAGI,EACNI,mBAAA,CAAoB,GAAET,QAAF,IAAcM,gBAAd,EAApB,CAA+CC,QAA/C,CAZiC,CAenC,MAAO,CAAA,CA5BqC,CA+B9CE,QAASA,mBAAkB,CAACC,UAAD,CAAaH,aAAb,CAA4B,CAC/CI,aAAAA,CAAW,GAAIC,QAASC,CAAAA,OAAb,EACfN,aADe,CAEdO,GAAD,EAASA,GAAIb,CAAAA,IAAKP,CAAAA,KAFH,CAKjB,KAAK,MAAM,CAACqB,OAAD,CAAUC,QAAV,CAAX,EAAkCL,cAAlC,CACwB,CAAtB,CAAIK,QAASC,CAAAA,MAAb,EACErB,OAAQsB,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,aAAYV,UAAZ,IAA0BK,OAA1B,+BADH;AAEE,CACEM,MAAOL,QAASM,CAAAA,GAAT,CAAcC,IAAD,EAAUA,IAAKtB,CAAAA,IAA5B,CADT,CAFF,CADF,CAWJ,OAAO,CAAA,CAnB8C,CApDvD,MAAO,CACLuB,mBAAmB,CAACC,aAAD,CAAgB,CACjC,IAAIC,qBAKJ,OAAMnB,cACkD,IAAtD,IAACmB,qBAAD,CAAyBD,aAAcjB,CAAAA,SAAvC,GAC0B,IAAK,EAD/B,GACAkB,qBADA,CAEIA,qBAFJ,CAGI,EACN,OAAOjB,mBAAA,CAAoB,IAAGgB,aAAcxB,CAAAA,IAAKP,CAAAA,KAAtB,EAApB,CAAmDa,aAAnD,CAX0B,CAD9B,CAeLoB,wBAAyB9B,0BAfpB,CAgBL+B,uBAAwB/B,0BAhBnB,CAiBLgC,qBAAsBhC,0BAjBjB,CAkBLiC,oBAAqBjC,0BAlBhB,CAD2C,CAVpD;IAAIe,SAAWvB,OAAA,CAAQ,6CAAR,CAAf,CAEI8B,cAAgB9B,OAAA,CAAQ,gDAAR,CAVuH;",
"sources":["node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueArgumentDefinitionNamesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nfunction UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = (0, _groupBy.groupBy)(\n      argumentNodes,\n      (arg) => arg.name.value,\n    );\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","UniqueArgumentDefinitionNamesRule","context","checkArgUniquenessPerField","typeNode","_typeNode$fields","typeName","name","fieldNodes","fields","fieldDef","_fieldDef$arguments","fieldName","argumentNodes","arguments","checkArgUniqueness","parentName","seenArgs","_groupBy","groupBy","arg","argName","argNodes","length","reportError","_GraphQLError","GraphQLError","nodes","map","node","DirectiveDefinition","directiveNode","_directiveNode$argume","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension"]
}
