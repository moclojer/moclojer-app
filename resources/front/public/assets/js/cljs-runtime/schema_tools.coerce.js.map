{"version":3,"sources":["schema_tools/coerce.cljc"],"mappings":";AAmBA,4CAAA,5CAAOA,gGAAkBC,MAAMC,WAAOC,QAAQC;AAA9C,AACE,IAAMC,UAAQ,CAACF,wCAAAA,+CAAAA,TAAQF,2BAAAA;AAAvB,AACE,IAAAK,qBAAe,AAACE,uBAAaH;AAA7B,AAAA,oBAAAC;AAAA,YAAAA,RAASC;AAAT,AACE,MACE,oNAAA,2CAAA,0DAAA,qEAAA,4DAAA,1bAACE,gDACC,CAAA,qCAA0C,AAACC,wGAAOH,sHAC3CH,+DAAaF,iEAAcD,6DAAaM;;AACnDF;;;AAGN,yCAAA,zCAAOM,0FAAoBC,EAAEC,YAAYC;AAAzC,AACE,OAACC,oBACC,WAAKH,MAAEI,EAAEC;AAAT,AACE,oBAAI,iBAAAC,mBAAI,AAACC,0BAAUN,YAAYG;AAA3B,AAAA,GAAAE;AAAAA;;AACI,IAAAE,oBAAKN;AAAL,AAAA,oBAAAM;AACK,UAAK,AAACC,0BAAU,CAACP,mDAAAA,sDAAAA,LAAmBE,kCAAAA;;AADzCI;;;;AAENR;;AACA,OAACU,+CAAOV,MAAEI;;GACdJ,EACAA;;AAOJ;;;yCAAA,zCAAMW,0FAEHrB;AAFH,AAGE,GAAM,EAAK,AAACsB,qBAAKtB,iBAAQ,GAAK,AAACuB,wBAAQvB;AAAvC,AACE,IAAMwB,oBAAkB,AAACC,mCAAyBzB;IAC5CY,qBAAmB,qCAAA,nBAAMY,mBACJ,AAACE,6BACC,WAAKC,EAAEC;AAAP,AACE,OAACC,yBAAW,AAACC,iBAAOH,GAAGC;2BAH7B,xBACE,KAIEJ;IACvBO,gBAAc,iBAAAC,WAAS,AAACZ,+CAAOpB,WAAOwB;IAAxBQ,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,eAAAA,fACSC;IADTD,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAES,6EAAAA,7EAACE,6CAAKC;AAFf,AAAA,GAAA,CAAAH,gBAAA;AAAA;;AAAA,qBAAAA,dAGSI;;;AAV7B,AAWE,oBAAM,iBAAApB,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAuB,OAACqB,cAAIN;;;AAAlC,AACE,kBAAKO;AAAL,AACE,GAAI,AAAChB,qBAAKgB;AACR,OAAC7B,uCAAmB6B,EAAEP,cAAcnB;;AACpC0B;;;;AAJN;;;AAZJ;;;AAmBF;;;;4CAAA,5CAAMC,gGAGHvC;AAHH,AAIE,oBAAM,AAACwC,iCAAcxC;AAArB,AACE,kBAAKD;AAAL,AACE,GAAI,UAAA,TAAMA;AAAO,OAAA,oFAAQC;;AAAQD;;;;AAFrC;;;AAIF;;;AAAkB0C,+CAEhBF;AAEF;;;;0CAAA,1CAAMG,4FAGH1C;AAHH,AAME,GAAM,EAAK,AAACsB,qBAAKtB,iBAAQ,GAAK,AAACuB,wBAAQvB;AAAvC,AACE,IAAM2C,cAAY,AAAC9B,oBAAU,WAAK+B,IAAI9B,EAAE+B;AAAX,AACE,oBAAI,AAACL,iCAAcK;AACjB,OAACC,8CAAMF,IAAI9B,EAAE,AAAA,oFAAQ+B;;AACrBD;;GAHf,mCAKW5C;AAL7B,AAME,GAAM,AAACqC,cAAIM;AAAX,AACE,kBAAKL;AAAL,AAAQ,OAACS,uGAAMJ,YAAYL;;;AAD7B;;;AAPJ;;;AAUF;;;;;;sCAAA,tCAAMU,oFAKHhD;AALH,AAME,IAAAgB,mBAAI,AAAC0B,wCAAoB1C;AAAzB,AAAA,oBAAAgB;AAAAA;;AACI,OAACuB,0CAAsBvC;;;AAE7B;;;;oCAAA,pCAAMiD,gFAGHC,cAAcC,aAAaC;AAH9B,AAIE,kBAAKpD;AAAL,AACE,oBAAM,CAACkD,8CAAAA,0DAAAA,dAAclD,sCAAAA;AAArB,AACE,kBAAKD;AAAL,AACE,oBAAI,CAACoD,6CAAAA,oDAAAA,TAAapD,gCAAAA;AAChB,sDAAA,WAAAsD,iBAAAC,3EAACC;AAAD,AAAS,QAAAD,iDAAAA,+CAAAD,oBAAAC,2BAAAD;GAAQtD,MAAMqD;;AACvBrD;;;;AAJN;;;;AAMJ,AAAA;;;;iCAAA,yCAAAyD,1EAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,oEAAAF;;;AAAA,AAAA,CAAA,sEAAA,tEAAME,iFAGDG;AAHL,AAIE,kBAAKjE;AAAL,AACE,sBAAA,WAAAkE,1BAACC;AAAD,AAAO,QAAAD,iDAAAA,6DAAAA,dAAGlE,yCAAAA;GAAQiE;;;;AALtB,CAAA,yDAAA,zDAAMH;;AAAN;AAAA,CAAA,mDAAA,WAAAC,9DAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAA3B,cAAA0B;;;AAAA,AAQA,AAAA;;;;;yCAAA,iDAAAP,1FAAeY;AAAf,AAAA,IAAAX,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAW,4EAAA,CAAA,UAAA,MAAAR;;;AAAA,AAAA,CAAA,8EAAA,9EAAeQ,yFAIZM,aAAeC;AAJlB,AAKE,IAAMC,aAAW,AAACC,8CAAMf,+BAAWa;AAAnC,AACE,OAACG,sHACC,WAAK9E;AAAL,AACE,IAAAI,qBAAW,CAACsE,6CAAAA,yDAAAA,dAAa1E,qCAAAA;AAAzB,AAAA,oBAAAI;AAAA,QAAAA,JAAS2E;AAAT,AACE,kBAAKzC;AAAL,AACE,IAAM0C,KAAG,CAACD,kCAAAA,qCAAAA,LAAEzC,iBAAAA;AAAZ,AAEE,oBAAI,iBAAApB,oBAAK8D;AAAL,AAAA,oBAAA9D;AAAQ,OAAC+D,gDAAK3C,EAAE0C;;AAAhB9D;;;AACF,IAAMjB,UAAQ,AAACiF,sBAAWlF,WAAO4E;AAAjC,AACE,QAAC3E,wCAAAA,4CAAAA,NAAQ+E,wBAAAA;;AACXA;;;;AAPR;;GAQFJ;;;AAhBN,CAAA,iEAAA,jEAAeR;;AAAf;AAAA,CAAA,2DAAA,WAAAC,tEAAeD;AAAf,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAsBA,AAAA;;;;;8BAAA,sCAAAb,pEAAM4B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD,uEAIFpF;AAJJ,AAKG,OAACsF,0DAAQtF,WAAO,qBAAA,rBAACuF;;;AALpB,CAAA,4DAAA,5DAAMH,uEAMFpF,WAAOwF;AANX,AAOG,oFAAA,7EAACF,0DAAQtF,WAAOwF;;;AAPnB,CAAA,4DAAA,5DAAMJ,uEAQFpF,WAAOwF,QAAQtF;AARnB,AASG,IAAMD,UAAQ,AAACiF,sBAAWlF,WAAOwF;AAAjC,AACE,kBAAKzF;AAAL,AACE,OAACD,0CAAiBC,MAAMC,WAAOC,QAAQC;;;;AAX9C,CAAA,sDAAA,tDAAMkF;;AAAN,AAaA,AAAA;;;;;6BAAA,qCAAA5B,lEAAMkC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAL,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAMK,sEAIF3F,MAAMC;AAJV,AAKG,OAAC2F,yDAAO5F,MAAMC,WAAO,qBAAA,rBAACuF;;;AALzB,CAAA,2DAAA,3DAAMG,sEAMF3F,MAAMC,WAAOwF;AANjB,AAOG,yFAAA,lFAACG,yDAAO5F,MAAMC,WAAOwF;;;AAPxB,CAAA,2DAAA,3DAAME,sEAQF3F,MAAMC,WAAOwF,QAAQtF;AARzB,AASG,OAAC,AAACoF,0DAAQtF,WAAOwF,QAAQtF,MAAMH;;;AATlC,CAAA,qDAAA,rDAAM2F;;AAAN,AAeA,2BAAA,3BAAOE,8DAAMb;AAAb,AACE,kBAAKzC;AAAL,AACE,IAAA,AACE,QAACyC,kCAAAA,qCAAAA,LAAEzC,iBAAAA;gBADL,GAAA,CAAAuD,kBAEkCR;AAFlC,QAAAQ,JAE4C9E;AAF5C,AAE8CuB;;AAF9C,AAAA,MAAAuD;;;;;AAIJ,yCAAA,zCAAMC,0FAAiBxD;AAAvB,AACE,GAAI,OAASA;AACX,IAAAyD,cAAOE;IAAPD,cAAS1D;AAAT,AAAA,oBAAA,CAAAyD,4CAAAA,0CAAA,OAAAC,eAAAD,sBAAA,OAAAC;AAAA;;AAAA,oBAAA,CAAAD,4CAAAA,0CAAA,QAAAC,eAAAD,sBAAA,QAAAC;AAAA;;AAGE1D;;;;AACFA;;;AAkBJ,+BAAA,/BAAO4D,sEAAU5D;AAAjB,AAEWA;;AAEX,wCAAA,xCAAM6D,wFAAwB7D;AAA9B,AACE,GAAI,OAASA;AACX,IAAA,AACE,IAAM+D,SACgB,AAACC,sDAAwBhE;AAD/C,AAEE,GAAI,OAAS+D;AAAQA;;AAAO/D;;gBAHhC,GAAA,CAAA8D,kBAIkCf;AAJlC,QAAAe,JAI4CrF;AAJ5C,AAI8CuB;;AAJ9C,AAAA,MAAA8D;;;;AAKA9D;;;AAEJ,sCAAA,tCAAMiE,oFAAcjE;AAApB,AACE,GAAI,OAASA;AACX,IAAA,AAGW,oBAAI,kBAAA,lBAACmE,8FAAqFnE;AACxF,OAACoE,eAAKpE;;AACNA;;gBALb,GAAA,CAAAkE,kBAMkCnB;AANlC,QAAAmB,JAM4CzF;AAN5C,AAM8CuB;;AAN9C,AAAA,MAAAkE;;;;AAOAlE;;;AAEJ,sCAAA,tCAAMqE,oFAAcrE;AAApB,AACE,GAAI,OAASA;AACX,IAAA,AAEW,YAAAuE,KAAU,AAAU,AAACC,oCAAoCxE;gBAFpE,GAAA,CAAAsE,kBAGkCvB;AAHlC,QAAAuB,JAG4C7F;AAH5C,AAG8CuB;;AAH9C,AAAA,MAAAsE;;;;AAIAtE;;;AAEJ,yCAAA,zCAAMyE,0FAAiBzE;AAAvB,AACE,GAAI,cAAA0E,bAAU1E;AACZ,IAAAlC,qBAAe,AAAC8G,oBAAU5E;AAA1B,AAAA,oBAAAlC;AAAA,YAAAA,RAAS6G;AAAT,AACE,cAAA,NAAKA,UAAU,AAACE,eAAK7E;;AACrB,OAAC6E,eAAK7E;;;AACRA;;;AAEJ,yCAAA,zCAAM8E,0FAAiB9E;AAAvB,AACE,GAAI,cAAA0E,bAAU1E;AACZ,6CAAA,uCAAIA,vCAAEyE,tCAAgBZ;;AACtB7D;;;AAEJ,uCAAA,vCAAM+E,sFAAe/E;AAArB,AACE,GAAI,cAAA0E,bAAU1E;AACZ,8CAAA,uCAAIA,vCAAEyE,vCAAgBjB;;AACtBxD;;;AAEJ,yCAAA,zCAAMgF,0FAAoBtH;AAA1B,AACE,GAAQ,EAAK,AAACuH,sBAAMvH,iBAAQ,GAAK,AAACuB,wBAAQvB;AACxC,kBAAKsC;AAAL,AAAQ,GAAI,AAACiF,sBAAMjF;AAAGA;;AAAd,0FAAiBA;;;;AAD3B;;;AAGF,iDAAA,jDAAKkF,iGACFC,oBAAUC,iCACVC,gBAAMZ,uCAENa,iBAAO,AAACC,6CAAKtB,oCAAaQ,wCAC1Be,gBAAM,AAACD,6CAAK3B,6BAASkB,wCACrBW,iBAAOV,qCAKIR,KAAQ,AAACgB,6CAAKlB,oCAAaI;AAKzC,mDAAA,nDAAKiB,mGACFF,gBAAM,AAACD,6CAAK3B,6BAASC,sCAAeY,wCACpCkB,gBAAM,AAACJ,6CAAK1B,sCAAeY,wCAC3BgB,iBAAO,AAACF,6CAAK/B,uCAAgBiB;AAQhC,AAAKmB,4CACH,AAACC,gDAAQX,+CACAY,mCACAC;AAEX,AAAKC,8CACH,AAACH,gDAAQH,iDACAV,uCACAY","names":["schema-tools.coerce/coerce-or-error!","value","schema","coercer","type","coerced","temp__5802__auto__","error","schema.utils/error-val","cljs.core.ex_info","cljs.core.pr_str","schema-tools.coerce/filter-schema-keys","m","schema-keys","extra-keys-checker","cljs.core/reduce-kv","k","_","or__5045__auto__","cljs.core/contains?","and__5043__auto__","schema.utils/error?","cljs.core.dissoc","schema-tools.coerce/map-filter-matcher","cljs.core/map?","cljs.core/record?","extra-keys-schema","schema.core/find-extra-keys-schema","schema.spec.core/run-checker","s","params","schema.spec.core/checker","schema.core/spec","explicit-keys","G__40039","cljs.core/keys","cljs.core.mapv","schema.core/explicit-schema-key","cljs.core/set","cljs.core/seq","x","schema-tools.coerce/default-value-matcher","schema-tools.impl/default?","schema-tools.coerce/default-coercion-matcher","schema-tools.coerce/default-key-matcher","default-map","acc","v","cljs.core.assoc","cljs.core.merge","schema-tools.coerce/default-matcher","schema-tools.coerce/multi-matcher","accept-schema","accept-value","fs","p1__40042#","p2__40041#","cljs.core.reduce","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","schema-tools.coerce/or-matcher","seq40045","self__5755__auto__","matchers","p1__40044#","cljs.core/some","schema-tools.coerce/forwarding-matcher","seq40047","G__40048","cljs.core/first","cljs.core/next","self__5754__auto__","lead-matcher","tail-matchers","match-tail","cljs.core.apply","schema_tools.coerce.or_matcher","f","x1","cljs.core.not_EQ_","schema.coerce/coercer","G__40051","schema-tools.coerce/coercer","js/Error","schema_tools.coerce.coercer","cljs.core/constantly","matcher","G__40053","schema-tools.coerce/coerce","schema_tools.coerce.coerce","schema-tools.coerce/safe","e40077","schema-tools.coerce/string->boolean","pred__40080","expr__40081","cljs.core/=","schema-tools.coerce/safe-int","schema-tools.coerce/string->number","e40084","parsed","cljs.reader.read_string","schema-tools.coerce/string->uuid","e40089","cljs.core/re-find","cljs.core/uuid","schema-tools.coerce/string->date","e40094","js/Date","js/goog.date.UtcDateTime.fromIsoString","schema-tools.coerce/keyword->string","cljs.core/Keyword","kw-ns","cljs.core/namespace","cljs.core/name","schema-tools.coerce/keyword->number","schema-tools.coerce/keyword->bool","schema-tools.coerce/collection-matcher","cljs.core/coll?","schema-tools.coerce/+json-coercions+","schema.core/Keyword","schema.coerce/string->keyword","schema.core/Str","schema.core/Uuid","cljs.core.comp","schema.core/Int","schema.core/Bool","schema-tools.coerce/+string-coercions+","schema.core/Num","schema-tools.coerce/json-coercion-matcher","cljs.core.some_fn","schema.coerce/keyword-enum-matcher","schema.coerce/set-matcher","schema-tools.coerce/string-coercion-matcher"],"sourcesContent":["(ns schema-tools.coerce\n  (:require [schema.core :as s]\n            [schema.spec.core :as ss]\n            [schema.utils :as su]\n            [schema.coerce :as sc]\n            [schema-tools.impl :as impl]\n            #?@(:clj  [clojure.edn]\n                :cljs [[cljs.reader]\n                       [goog.date.UtcDateTime]]))\n  #?(:clj\n     (:import [java.util Date UUID]\n              [java.util.regex Pattern]\n              [java.time LocalDate LocalTime Instant]\n              (clojure.lang APersistentSet Keyword))))\n\n;;\n;; Internals\n;;\n\n(defn- coerce-or-error! [value schema coercer type]\n  (let [coerced (coercer value)]\n    (if-let [error (su/error-val coerced)]\n      (throw\n        (ex-info\n          (str \"Could not coerce value to schema: \" (pr-str error))\n          {:type type :schema schema :value value :error error}))\n      coerced)))\n\n; original: https://gist.github.com/abp/0c4106eba7b72802347b\n(defn- filter-schema-keys [m schema-keys extra-keys-checker]\n  (reduce-kv\n    (fn [m k _]\n      (if (or (contains? schema-keys k)\n              (and extra-keys-checker\n                   (not (su/error? (extra-keys-checker k)))))\n        m\n        (dissoc m k)))\n    m\n    m))\n\n;;\n;; Matchers\n;;\n\n; original: https://gist.github.com/abp/0c4106eba7b72802347b\n(defn map-filter-matcher\n  \"Creates a matcher which removes all illegal keys from non-record maps.\"\n  [schema]\n  (when (and (map? schema) (not (record? schema)))\n    (let [extra-keys-schema (s/find-extra-keys-schema schema)\n          extra-keys-checker (when extra-keys-schema\n                               (ss/run-checker\n                                 (fn [s params]\n                                   (ss/checker (s/spec s) params))\n                                 true\n                                 extra-keys-schema))\n          explicit-keys (some->> (dissoc schema extra-keys-schema)\n                                 keys\n                                 (mapv s/explicit-schema-key)\n                                 set)]\n      (when (or extra-keys-checker (seq explicit-keys))\n        (fn [x]\n          (if (map? x)\n            (filter-schema-keys x explicit-keys extra-keys-checker)\n            x))))))\n\n; original: https://groups.google.com/forum/m/#!topic/prismatic-plumbing/NWUnqbYhfac\n(defn default-value-matcher\n  \"Creates a matcher which converts nils to default values. You can set default values\n  with [[schema-tools.core/default]].\"\n  [schema]\n  (when (impl/default? schema)\n    (fn [value]\n      (if (nil? value) (:value schema) value))))\n\n(def ^:deprecated default-coercion-matcher\n  \"Deprecated - use [[default-value-matcher]] instead.\"\n  default-value-matcher)\n\n(defn default-key-matcher\n  \"Creates a matcher which adds missing keys to a map if they have default values.\n  You can set default values with [[schema-tools.core/default]].\"\n  [schema]\n  ;; Can't use `map?` here, since we're looking for a map literal, but records\n  ;; satisfy `map?`.\n  (when (and (map? schema) (not (record? schema)))\n    (let [default-map (reduce-kv (fn [acc k v]\n                                   (if (impl/default? v)\n                                     (assoc acc k (:value v))\n                                     acc))\n                                 {}\n                                 schema)]\n      (when (seq default-map)\n        (fn [x] (merge default-map x))))))\n\n(defn default-matcher\n  \"Combination of [[default-value-matcher]] and [[default-key-matcher]]: Creates\n  a matcher which adds missing keys with default values to a map and converts\n  nils to default values. You can set default values with\n  [[schema-tools.core/default]].\"\n  [schema]\n  (or (default-key-matcher schema)\n      (default-value-matcher schema)))\n\n(defn multi-matcher\n  \"Creates a matcher for (accept-schema schema), reducing\n  value with fs functions if (accept-value value).\"\n  [accept-schema accept-value fs]\n  (fn [schema]\n    (when (accept-schema schema)\n      (fn [value]\n        (if (accept-value value)\n          (reduce #(%2 %1) value fs)\n          value)))))\n\n(defn or-matcher\n  \"Creates a matcher where the first matcher matching the\n  given schema is used.\"\n  [& matchers]\n  (fn [schema]\n    (some #(% schema) matchers)))\n\n;; alpha\n(defn ^:no-doc forwarding-matcher\n  \"Creates a matcher where all matchers are combined with OR,\n  but if the lead-matcher matches, it creates a sub-coercer and\n  forwards the coerced value to tail-matchers.\"\n  [lead-matcher & tail-matchers]\n  (let [match-tail (apply or-matcher tail-matchers)]\n    (or-matcher\n      (fn [schema]\n        (if-let [f (lead-matcher schema)]\n          (fn [x]\n            (let [x1 (f x)]\n              ; don't sub-coerce untouched values\n              (if (and x1 (not= x x1))\n                (let [coercer (sc/coercer schema match-tail)]\n                  (coercer x1))\n                x1)))))\n      match-tail)))\n\n;;\n;; coercion\n;;\n\n(defn coercer\n  \"Produce a function that simultaneously coerces and validates a value against a `schema.`\n  If a value can't be coerced to match the schema, an `ex-info` is thrown - like `schema.core/validate`,\n  but with overridable `:type`, defaulting to `:schema-tools.coerce/error.`\"\n  ([schema]\n   (coercer schema (constantly nil)))\n  ([schema matcher]\n   (coercer schema matcher ::error))\n  ([schema matcher type]\n   (let [coercer (sc/coercer schema matcher)]\n     (fn [value]\n       (coerce-or-error! value schema coercer type)))))\n\n(defn coerce\n  \"Simultaneously coerces and validates a value to match the given `schema.` If a `value` can't\n  be coerced to match the `schema`, an `ex-info` is thrown - like `schema.core/validate`,\n  but with overridable `:type`, defaulting to `:schema-tools.coerce/error.`\"\n  ([value schema]\n   (coerce value schema (constantly nil)))\n  ([value schema matcher]\n   (coerce value schema matcher ::error))\n  ([value schema matcher type]\n   ((coercer schema matcher type) value)))\n\n;;\n;; coercions\n;;\n\n(defn- safe [f]\n  (fn [x]\n    (try\n      (f x)\n      (catch #?(:clj Exception, :cljs js/Error) _ x))))\n\n(defn string->boolean [x]\n  (if (string? x)\n    (condp = x\n      \"true\" true\n      \"false\" false\n      x)\n    x))\n\n#?(:clj\n   (defn string->long [^String x]\n     (if (string? x)\n       (try\n         (Long/valueOf x)\n         (catch #?(:clj Exception, :cljs js/Error) _ x))\n       x)))\n\n#?(:clj\n   (defn string->double [^String x]\n     (if (string? x)\n       (try\n         (Double/valueOf x)\n         (catch #?(:clj Exception, :cljs js/Error) _ x))\n       x)))\n\n(defn- safe-int [x]\n  #?(:clj  (sc/safe-long-cast x)\n     :cljs x))\n\n(defn string->number [^String x]\n  (if (string? x)\n    (try\n      (let [parsed #?(:clj (clojure.edn/read-string x)\n                      :cljs (cljs.reader/read-string x))]\n        (if (number? parsed) parsed x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn string->uuid [x]\n  (if (string? x)\n    (try\n      #?(:clj  (UUID/fromString x)\n         ;; http://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\n         :cljs (if (re-find #\"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\" x)\n                 (uuid x)\n                 x))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn string->date [x]\n  (if (string? x)\n    (try\n      #?(:clj  (Date/from (Instant/parse x))\n         :cljs (js/Date. (.getTime (goog.date.UtcDateTime.fromIsoString x))))\n      (catch #?(:clj Exception, :cljs js/Error) _ x))\n    x))\n\n(defn keyword->string [x]\n  (if (keyword? x)\n    (if-let [kw-ns (namespace x)]\n      (str kw-ns \"/\" (name x))\n      (name x))\n    x))\n\n(defn keyword->number [x]\n  (if (keyword? x)\n    (-> x keyword->string string->number)\n    x))\n\n(defn keyword->bool [x]\n  (if (keyword? x)\n    (-> x keyword->string string->boolean)\n    x))\n\n(defn collection-matcher [schema]\n  (if (or (and (coll? schema) (not (record? schema))))\n    (fn [x] (if (coll? x) x [x]))))\n\n(def +json-coercions+\n  {s/Keyword sc/string->keyword\n   s/Str keyword->string\n   #?@(:clj [Keyword sc/string->keyword])\n   s/Uuid (comp string->uuid keyword->string)\n   s/Int (comp safe-int keyword->number)\n   s/Bool keyword->bool\n   #?@(:clj [Long (comp sc/safe-long-cast keyword->number)])\n   #?@(:clj [Double (comp double keyword->number)])\n   #?@(:clj [Pattern (safe (comp re-pattern keyword->string))])\n   #?@(:clj [Date (comp string->date keyword->string)])\n   #?@(:cljs [js/Date (comp string->date keyword->string)])\n   #?@(:clj [LocalDate (safe #(LocalDate/parse (keyword->string %)))])\n   #?@(:clj [LocalTime (safe #(LocalTime/parse (keyword->string %)))])\n   #?@(:clj [Instant (safe #(Instant/parse (keyword->string %)))])})\n\n(def +string-coercions+\n  {s/Int (comp safe-int string->number keyword->string)\n   s/Num (comp string->number keyword->string)\n   s/Bool (comp string->boolean keyword->string)\n   #?@(:clj [Long (comp safe-int string->long keyword->string)])\n   #?@(:clj [Double (comp double string->double keyword->string)])})\n\n;;\n;; matchers\n;;\n\n(def json-coercion-matcher\n  (some-fn +json-coercions+\n           sc/keyword-enum-matcher\n           sc/set-matcher))\n\n(def string-coercion-matcher\n  (some-fn +string-coercions+\n           collection-matcher\n           json-coercion-matcher))\n"]}