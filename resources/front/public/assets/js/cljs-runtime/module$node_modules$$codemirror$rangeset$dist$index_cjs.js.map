{
"version":3,
"file":"module$node_modules$$codemirror$rangeset$dist$index_cjs.js",
"lineCount":31,
"mappings":"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",
"sources":["node_modules/@codemirror/rangeset/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$codemirror$rangeset$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar state = require('@codemirror/state');\n\n/**\nEach range is associated with a value, which must inherit from\nthis class.\n*/\nclass RangeValue {\n    /**\n    Compare this value with another value. The default\n    implementation compares by identity.\n    */\n    eq(other) { return this == other; }\n    /**\n    Create a [range](https://codemirror.net/6/docs/ref/#rangeset.Range) with this value.\n    */\n    range(from, to = from) { return new Range(from, to, this); }\n}\nRangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;\nRangeValue.prototype.point = false;\nRangeValue.prototype.mapMode = state.MapMode.TrackDel;\n/**\nA range associates a value with a range of positions.\n*/\nclass Range {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The range's start position.\n    */\n    from, \n    /**\n    Its end position.\n    */\n    to, \n    /**\n    The value associated with this range.\n    */\n    value) {\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n}\nfunction cmpRange(a, b) {\n    return a.from - b.from || a.value.startSide - b.value.startSide;\n}\nclass Chunk {\n    constructor(from, to, value, \n    // Chunks are marked with the largest point that occurs\n    // in them (or -1 for no points), so that scans that are\n    // only interested in points (such as the\n    // heightmap-related logic) can skip range-only chunks.\n    maxPoint) {\n        this.from = from;\n        this.to = to;\n        this.value = value;\n        this.maxPoint = maxPoint;\n    }\n    get length() { return this.to[this.to.length - 1]; }\n    // Find the index of the given position and side. Use the ranges'\n    // `from` pos when `end == false`, `to` when `end == true`.\n    findIndex(pos, side, end, startAt = 0) {\n        let arr = end ? this.to : this.from;\n        for (let lo = startAt, hi = arr.length;;) {\n            if (lo == hi)\n                return lo;\n            let mid = (lo + hi) >> 1;\n            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;\n            if (mid == lo)\n                return diff >= 0 ? lo : hi;\n            if (diff >= 0)\n                hi = mid;\n            else\n                lo = mid + 1;\n        }\n    }\n    between(offset, from, to, f) {\n        for (let i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++)\n            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)\n                return false;\n    }\n    map(offset, changes) {\n        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;\n        for (let i = 0; i < this.value.length; i++) {\n            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;\n            if (curFrom == curTo) {\n                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);\n                if (mapped == null)\n                    continue;\n                newFrom = newTo = mapped;\n            }\n            else {\n                newFrom = changes.mapPos(curFrom, val.startSide);\n                newTo = changes.mapPos(curTo, val.endSide);\n                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)\n                    continue;\n            }\n            if ((newTo - newFrom || val.endSide - val.startSide) < 0)\n                continue;\n            if (newPos < 0)\n                newPos = newFrom;\n            if (val.point)\n                maxPoint = Math.max(maxPoint, newTo - newFrom);\n            value.push(val);\n            from.push(newFrom - newPos);\n            to.push(newTo - newPos);\n        }\n        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };\n    }\n}\n/**\nA range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#rangeset.Range) in a\nway that makes them efficient to [map](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.map) and\n[update](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.update). This is an immutable data\nstructure.\n*/\nclass RangeSet {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    chunkPos, \n    /**\n    @internal\n    */\n    chunk, \n    /**\n    @internal\n    */\n    nextLayer = RangeSet.empty, \n    /**\n    @internal\n    */\n    maxPoint) {\n        this.chunkPos = chunkPos;\n        this.chunk = chunk;\n        this.nextLayer = nextLayer;\n        this.maxPoint = maxPoint;\n    }\n    /**\n    @internal\n    */\n    get length() {\n        let last = this.chunk.length - 1;\n        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);\n    }\n    /**\n    The number of ranges in the set.\n    */\n    get size() {\n        if (this.isEmpty)\n            return 0;\n        let size = this.nextLayer.size;\n        for (let chunk of this.chunk)\n            size += chunk.value.length;\n        return size;\n    }\n    /**\n    @internal\n    */\n    chunkEnd(index) {\n        return this.chunkPos[index] + this.chunk[index].length;\n    }\n    /**\n    Update the range set, optionally adding new ranges or filtering\n    out existing ones.\n    \n    (The extra type parameter is just there as a kludge to work\n    around TypeScript variance issues that prevented `RangeSet<X>`\n    from being a subtype of `RangeSet<Y>` when `X` is a subtype of\n    `Y`.)\n    */\n    update(updateSpec) {\n        let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;\n        let filter = updateSpec.filter;\n        if (add.length == 0 && !filter)\n            return this;\n        if (sort)\n            add.slice().sort(cmpRange);\n        if (this.isEmpty)\n            return add.length ? RangeSet.of(add) : this;\n        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];\n        let builder = new RangeSetBuilder();\n        while (cur.value || i < add.length) {\n            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {\n                let range = add[i++];\n                if (!builder.addInner(range.from, range.to, range.value))\n                    spill.push(range);\n            }\n            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&\n                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&\n                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&\n                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {\n                cur.nextChunk();\n            }\n            else {\n                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {\n                    if (!builder.addInner(cur.from, cur.to, cur.value))\n                        spill.push(new Range(cur.from, cur.to, cur.value));\n                }\n                cur.next();\n            }\n        }\n        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty\n            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));\n    }\n    /**\n    Map this range set through a set of changes, return the new set.\n    */\n    map(changes) {\n        if (changes.length == 0 || this.isEmpty)\n            return this;\n        let chunks = [], chunkPos = [], maxPoint = -1;\n        for (let i = 0; i < this.chunk.length; i++) {\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            let touch = changes.touchesRange(start, start + chunk.length);\n            if (touch === false) {\n                maxPoint = Math.max(maxPoint, chunk.maxPoint);\n                chunks.push(chunk);\n                chunkPos.push(changes.mapPos(start));\n            }\n            else if (touch === true) {\n                let { mapped, pos } = chunk.map(start, changes);\n                if (mapped) {\n                    maxPoint = Math.max(maxPoint, mapped.maxPoint);\n                    chunks.push(mapped);\n                    chunkPos.push(pos);\n                }\n            }\n        }\n        let next = this.nextLayer.map(changes);\n        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);\n    }\n    /**\n    Iterate over the ranges that touch the region `from` to `to`,\n    calling `f` for each. There is no guarantee that the ranges will\n    be reported in any specific order. When the callback returns\n    `false`, iteration stops.\n    */\n    between(from, to, f) {\n        if (this.isEmpty)\n            return;\n        for (let i = 0; i < this.chunk.length; i++) {\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            if (to >= start && from <= start + chunk.length &&\n                chunk.between(start, from - start, to - start, f) === false)\n                return;\n        }\n        this.nextLayer.between(from, to, f);\n    }\n    /**\n    Iterate over the ranges in this set, in order, including all\n    ranges that end at or after `from`.\n    */\n    iter(from = 0) {\n        return HeapCursor.from([this]).goto(from);\n    }\n    /**\n    @internal\n    */\n    get isEmpty() { return this.nextLayer == this; }\n    /**\n    Iterate over the ranges in a collection of sets, in order,\n    starting from `from`.\n    */\n    static iter(sets, from = 0) {\n        return HeapCursor.from(sets).goto(from);\n    }\n    /**\n    Iterate over two groups of sets, calling methods on `comparator`\n    to notify it of possible differences.\n    */\n    static compare(oldSets, newSets, \n    /**\n    This indicates how the underlying data changed between these\n    ranges, and is needed to synchronize the iteration. `from` and\n    `to` are coordinates in the _new_ space, after these changes.\n    */\n    textDiff, comparator, \n    /**\n    Can be used to ignore all non-point ranges, and points below\n    the given size. When -1, all ranges are compared.\n    */\n    minPointSize = -1) {\n        let a = oldSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||\n            !set.isEmpty && newSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);\n        let b = newSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||\n            !set.isEmpty && oldSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);\n        let sharedChunks = findSharedChunks(a, b);\n        let sideA = new SpanCursor(a, sharedChunks, minPointSize);\n        let sideB = new SpanCursor(b, sharedChunks, minPointSize);\n        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));\n        if (textDiff.empty && textDiff.length == 0)\n            compare(sideA, 0, sideB, 0, 0, comparator);\n    }\n    /**\n    Compare the contents of two groups of range sets, returning true\n    if they are equivalent in the given range.\n    */\n    static eq(oldSets, newSets, from = 0, to) {\n        if (to == null)\n            to = 1000000000 /* Far */;\n        let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);\n        let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);\n        if (a.length != b.length)\n            return false;\n        if (!a.length)\n            return true;\n        let sharedChunks = findSharedChunks(a, b);\n        let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);\n        for (;;) {\n            if (sideA.to != sideB.to ||\n                !sameValues(sideA.active, sideB.active) ||\n                sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))\n                return false;\n            if (sideA.to >= to)\n                return true;\n            sideA.next();\n            sideB.next();\n        }\n    }\n    /**\n    Iterate over a group of range sets at the same time, notifying\n    the iterator about the ranges covering every given piece of\n    content. Returns the open count (see\n    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#rangeset.SpanIterator.span)) at the end\n    of the iteration.\n    */\n    static spans(sets, from, to, iterator, \n    /**\n    When given and greater than -1, only points of at least this\n    size are taken into account.\n    */\n    minPointSize = -1) {\n        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;\n        let open = cursor.openStart;\n        for (;;) {\n            let curTo = Math.min(cursor.to, to);\n            if (cursor.point) {\n                iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);\n                open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);\n            }\n            else if (curTo > pos) {\n                iterator.span(pos, curTo, cursor.active, open);\n                open = cursor.openEnd(curTo);\n            }\n            if (cursor.to > to)\n                break;\n            pos = cursor.to;\n            cursor.next();\n        }\n        return open;\n    }\n    /**\n    Create a range set for the given range or array of ranges. By\n    default, this expects the ranges to be _sorted_ (by start\n    position and, if two start at the same position,\n    `value.startSide`). You can pass `true` as second argument to\n    cause the method to sort them.\n    */\n    static of(ranges, sort = false) {\n        let build = new RangeSetBuilder();\n        for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)\n            build.add(range.from, range.to, range.value);\n        return build.finish();\n    }\n}\n/**\nThe empty set of ranges.\n*/\nRangeSet.empty = new RangeSet([], [], null, -1);\nfunction lazySort(ranges) {\n    if (ranges.length > 1)\n        for (let prev = ranges[0], i = 1; i < ranges.length; i++) {\n            let cur = ranges[i];\n            if (cmpRange(prev, cur) > 0)\n                return ranges.slice().sort(cmpRange);\n            prev = cur;\n        }\n    return ranges;\n}\nRangeSet.empty.nextLayer = RangeSet.empty;\n/**\nA range set builder is a data structure that helps build up a\n[range set](https://codemirror.net/6/docs/ref/#rangeset.RangeSet) directly, without first allocating\nan array of [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range) objects.\n*/\nclass RangeSetBuilder {\n    /**\n    Create an empty builder.\n    */\n    constructor() {\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunkStart = -1;\n        this.last = null;\n        this.lastFrom = -1000000000 /* Far */;\n        this.lastTo = -1000000000 /* Far */;\n        this.from = [];\n        this.to = [];\n        this.value = [];\n        this.maxPoint = -1;\n        this.setMaxPoint = -1;\n        this.nextLayer = null;\n    }\n    finishChunk(newArrays) {\n        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));\n        this.chunkPos.push(this.chunkStart);\n        this.chunkStart = -1;\n        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);\n        this.maxPoint = -1;\n        if (newArrays) {\n            this.from = [];\n            this.to = [];\n            this.value = [];\n        }\n    }\n    /**\n    Add a range. Ranges should be added in sorted (by `from` and\n    `value.startSide`) order.\n    */\n    add(from, to, value) {\n        if (!this.addInner(from, to, value))\n            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);\n    }\n    /**\n    @internal\n    */\n    addInner(from, to, value) {\n        let diff = from - this.lastTo || value.startSide - this.last.endSide;\n        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)\n            throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\n        if (diff < 0)\n            return false;\n        if (this.from.length == 250 /* ChunkSize */)\n            this.finishChunk(true);\n        if (this.chunkStart < 0)\n            this.chunkStart = from;\n        this.from.push(from - this.chunkStart);\n        this.to.push(to - this.chunkStart);\n        this.last = value;\n        this.lastFrom = from;\n        this.lastTo = to;\n        this.value.push(value);\n        if (value.point)\n            this.maxPoint = Math.max(this.maxPoint, to - from);\n        return true;\n    }\n    /**\n    @internal\n    */\n    addChunk(from, chunk) {\n        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)\n            return false;\n        if (this.from.length)\n            this.finishChunk(true);\n        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);\n        this.chunks.push(chunk);\n        this.chunkPos.push(from);\n        let last = chunk.value.length - 1;\n        this.last = chunk.value[last];\n        this.lastFrom = chunk.from[last] + from;\n        this.lastTo = chunk.to[last] + from;\n        return true;\n    }\n    /**\n    Finish the range set. Returns the new set. The builder can't be\n    used anymore after this has been called.\n    */\n    finish() { return this.finishInner(RangeSet.empty); }\n    /**\n    @internal\n    */\n    finishInner(next) {\n        if (this.from.length)\n            this.finishChunk(false);\n        if (this.chunks.length == 0)\n            return next;\n        let result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);\n        this.from = null; // Make sure further `add` calls produce errors\n        return result;\n    }\n}\nfunction findSharedChunks(a, b) {\n    let inA = new Map();\n    for (let set of a)\n        for (let i = 0; i < set.chunk.length; i++)\n            if (set.chunk[i].maxPoint < 500 /* BigPointSize */)\n                inA.set(set.chunk[i], set.chunkPos[i]);\n    let shared = new Set();\n    for (let set of b)\n        for (let i = 0; i < set.chunk.length; i++)\n            if (inA.get(set.chunk[i]) == set.chunkPos[i])\n                shared.add(set.chunk[i]);\n    return shared;\n}\nclass LayerCursor {\n    constructor(layer, skip, minPoint, rank = 0) {\n        this.layer = layer;\n        this.skip = skip;\n        this.minPoint = minPoint;\n        this.rank = rank;\n    }\n    get startSide() { return this.value ? this.value.startSide : 0; }\n    get endSide() { return this.value ? this.value.endSide : 0; }\n    goto(pos, side = -1000000000 /* Far */) {\n        this.chunkIndex = this.rangeIndex = 0;\n        this.gotoInner(pos, side, false);\n        return this;\n    }\n    gotoInner(pos, side, forward) {\n        while (this.chunkIndex < this.layer.chunk.length) {\n            let next = this.layer.chunk[this.chunkIndex];\n            if (!(this.skip && this.skip.has(next) ||\n                this.layer.chunkEnd(this.chunkIndex) < pos ||\n                next.maxPoint < this.minPoint))\n                break;\n            this.chunkIndex++;\n            forward = false;\n        }\n        let rangeIndex = this.chunkIndex == this.layer.chunk.length ? 0\n            : this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);\n        if (!forward || this.rangeIndex < rangeIndex)\n            this.rangeIndex = rangeIndex;\n        this.next();\n    }\n    forward(pos, side) {\n        if ((this.to - pos || this.endSide - side) < 0)\n            this.gotoInner(pos, side, true);\n    }\n    next() {\n        for (;;) {\n            if (this.chunkIndex == this.layer.chunk.length) {\n                this.from = this.to = 1000000000 /* Far */;\n                this.value = null;\n                break;\n            }\n            else {\n                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];\n                let from = chunkPos + chunk.from[this.rangeIndex];\n                this.from = from;\n                this.to = chunkPos + chunk.to[this.rangeIndex];\n                this.value = chunk.value[this.rangeIndex];\n                if (++this.rangeIndex == chunk.value.length) {\n                    this.chunkIndex++;\n                    if (this.skip) {\n                        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))\n                            this.chunkIndex++;\n                    }\n                    this.rangeIndex = 0;\n                }\n                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)\n                    break;\n            }\n        }\n    }\n    nextChunk() {\n        this.chunkIndex++;\n        this.rangeIndex = 0;\n        this.next();\n    }\n    compare(other) {\n        return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;\n    }\n}\nclass HeapCursor {\n    constructor(heap) {\n        this.heap = heap;\n    }\n    static from(sets, skip = null, minPoint = -1) {\n        let heap = [];\n        for (let i = 0; i < sets.length; i++) {\n            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {\n                if (cur.maxPoint >= minPoint)\n                    heap.push(new LayerCursor(cur, skip, minPoint, i));\n            }\n        }\n        return heap.length == 1 ? heap[0] : new HeapCursor(heap);\n    }\n    get startSide() { return this.value ? this.value.startSide : 0; }\n    goto(pos, side = -1000000000 /* Far */) {\n        for (let cur of this.heap)\n            cur.goto(pos, side);\n        for (let i = this.heap.length >> 1; i >= 0; i--)\n            heapBubble(this.heap, i);\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        for (let cur of this.heap)\n            cur.forward(pos, side);\n        for (let i = this.heap.length >> 1; i >= 0; i--)\n            heapBubble(this.heap, i);\n        if ((this.to - pos || this.value.endSide - side) < 0)\n            this.next();\n    }\n    next() {\n        if (this.heap.length == 0) {\n            this.from = this.to = 1000000000 /* Far */;\n            this.value = null;\n            this.rank = -1;\n        }\n        else {\n            let top = this.heap[0];\n            this.from = top.from;\n            this.to = top.to;\n            this.value = top.value;\n            this.rank = top.rank;\n            if (top.value)\n                top.next();\n            heapBubble(this.heap, 0);\n        }\n    }\n}\nfunction heapBubble(heap, index) {\n    for (let cur = heap[index];;) {\n        let childIndex = (index << 1) + 1;\n        if (childIndex >= heap.length)\n            break;\n        let child = heap[childIndex];\n        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {\n            child = heap[childIndex + 1];\n            childIndex++;\n        }\n        if (cur.compare(child) < 0)\n            break;\n        heap[childIndex] = cur;\n        heap[index] = child;\n        index = childIndex;\n    }\n}\nclass SpanCursor {\n    constructor(sets, skip, minPoint) {\n        this.minPoint = minPoint;\n        this.active = [];\n        this.activeTo = [];\n        this.activeRank = [];\n        this.minActive = -1;\n        // A currently active point range, if any\n        this.point = null;\n        this.pointFrom = 0;\n        this.pointRank = 0;\n        this.to = -1000000000 /* Far */;\n        this.endSide = 0;\n        this.openStart = -1;\n        this.cursor = HeapCursor.from(sets, skip, minPoint);\n    }\n    goto(pos, side = -1000000000 /* Far */) {\n        this.cursor.goto(pos, side);\n        this.active.length = this.activeTo.length = this.activeRank.length = 0;\n        this.minActive = -1;\n        this.to = pos;\n        this.endSide = side;\n        this.openStart = -1;\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)\n            this.removeActive(this.minActive);\n        this.cursor.forward(pos, side);\n    }\n    removeActive(index) {\n        remove(this.active, index);\n        remove(this.activeTo, index);\n        remove(this.activeRank, index);\n        this.minActive = findMinIndex(this.active, this.activeTo);\n    }\n    addActive(trackOpen) {\n        let i = 0, { value, to, rank } = this.cursor;\n        while (i < this.activeRank.length && this.activeRank[i] <= rank)\n            i++;\n        insert(this.active, i, value);\n        insert(this.activeTo, i, to);\n        insert(this.activeRank, i, rank);\n        if (trackOpen)\n            insert(trackOpen, i, this.cursor.from);\n        this.minActive = findMinIndex(this.active, this.activeTo);\n    }\n    // After calling this, if `this.point` != null, the next range is a\n    // point. Otherwise, it's a regular range, covered by `this.active`.\n    next() {\n        let from = this.to, wasPoint = this.point;\n        this.point = null;\n        let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;\n        for (;;) {\n            let a = this.minActive;\n            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {\n                if (this.activeTo[a] > from) {\n                    this.to = this.activeTo[a];\n                    this.endSide = this.active[a].endSide;\n                    break;\n                }\n                this.removeActive(a);\n                if (trackOpen)\n                    remove(trackOpen, a);\n            }\n            else if (!this.cursor.value) {\n                this.to = this.endSide = 1000000000 /* Far */;\n                break;\n            }\n            else if (this.cursor.from > from) {\n                this.to = this.cursor.from;\n                this.endSide = this.cursor.startSide;\n                break;\n            }\n            else {\n                let nextVal = this.cursor.value;\n                if (!nextVal.point) { // Opening a range\n                    this.addActive(trackOpen);\n                    this.cursor.next();\n                }\n                else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to && nextVal.endSide == this.endSide) {\n                    // Ignore any non-empty points that end precisely at the end of the prev point\n                    this.cursor.next();\n                }\n                else { // New point\n                    this.point = nextVal;\n                    this.pointFrom = this.cursor.from;\n                    this.pointRank = this.cursor.rank;\n                    this.to = this.cursor.to;\n                    this.endSide = nextVal.endSide;\n                    if (this.cursor.from < from)\n                        trackExtra = 1;\n                    this.cursor.next();\n                    if (this.to > from)\n                        this.forward(this.to, this.endSide);\n                    break;\n                }\n            }\n        }\n        if (trackOpen) {\n            let openStart = 0;\n            while (openStart < trackOpen.length && trackOpen[openStart] < from)\n                openStart++;\n            this.openStart = openStart + trackExtra;\n        }\n    }\n    activeForPoint(to) {\n        if (!this.active.length)\n            return this.active;\n        let active = [];\n        for (let i = this.active.length - 1; i >= 0; i--) {\n            if (this.activeRank[i] < this.pointRank)\n                break;\n            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)\n                active.push(this.active[i]);\n        }\n        return active.reverse();\n    }\n    openEnd(to) {\n        let open = 0;\n        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)\n            open++;\n        return open;\n    }\n}\nfunction compare(a, startA, b, startB, length, comparator) {\n    a.goto(startA);\n    b.goto(startB);\n    let endB = startB + length;\n    let pos = startB, dPos = startB - startA;\n    for (;;) {\n        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;\n        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);\n        if (a.point || b.point) {\n            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&\n                sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))\n                comparator.comparePoint(pos, clipEnd, a.point, b.point);\n        }\n        else {\n            if (clipEnd > pos && !sameValues(a.active, b.active))\n                comparator.compareRange(pos, clipEnd, a.active, b.active);\n        }\n        if (end > endB)\n            break;\n        pos = end;\n        if (diff <= 0)\n            a.next();\n        if (diff >= 0)\n            b.next();\n    }\n}\nfunction sameValues(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (a[i] != b[i] && !a[i].eq(b[i]))\n            return false;\n    return true;\n}\nfunction remove(array, index) {\n    for (let i = index, e = array.length - 1; i < e; i++)\n        array[i] = array[i + 1];\n    array.pop();\n}\nfunction insert(array, index, value) {\n    for (let i = array.length - 1; i >= index; i--)\n        array[i + 1] = array[i];\n    array[index] = value;\n}\nfunction findMinIndex(value, array) {\n    let found = -1, foundPos = 1000000000 /* Far */;\n    for (let i = 0; i < array.length; i++)\n        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {\n            found = i;\n            foundPos = array[i];\n        }\n    return found;\n}\n\nexports.Range = Range;\nexports.RangeSet = RangeSet;\nexports.RangeSetBuilder = RangeSetBuilder;\nexports.RangeValue = RangeValue;\n\n};"],
"names":["shadow$provide","global","require","module","exports","cmpRange","a","b","from","value","startSide","lazySort","ranges","length","prev","i","cur","slice","sort","findSharedChunks","inA","Map","set","chunk","maxPoint","chunkPos","shared","Set","get","add","heapBubble","heap","index","childIndex","child","compare","startA","startB","comparator","goto","endB","pos","dPos","diff","to","endSide","end","clipEnd","Math","min","point","eq","sameValues","activeForPoint","comparePoint","active","compareRange","next","remove","array","e","pop","insert","findMinIndex","found","foundPos","Object","defineProperty","state","RangeValue","other","range","Range","prototype","mapMode","MapMode","TrackDel","constructor","Chunk","findIndex","side","startAt","arr","lo","hi","mid","between","offset","f","map","changes","newPos","val","curFrom","curTo","mapped","mapPos","newFrom","newTo","max","push","RangeSet","nextLayer","empty","last","chunkEnd","isEmpty","size","update","updateSpec","filterFrom","filterTo","filter","of","LayerCursor","spill","builder","RangeSetBuilder","addInner","rangeIndex","chunkIndex","addChunk","nextChunk","finishInner","chunks","start","touch","touchesRange","iter","HeapCursor","sets","oldSets","newSets","textDiff","minPointSize","indexOf","sharedChunks","sideA","SpanCursor","sideB","iterGaps","fromA","fromB","spans","iterator","cursor","open","openStart","openEnd","span","build","finish","chunkStart","lastTo","lastFrom","setMaxPoint","finishChunk","newArrays","Error","result","layer","skip","minPoint","rank","gotoInner","forward","has","top","activeTo","activeRank","minActive","pointRank","pointFrom","removeActive","addActive","trackOpen","wasPoint","trackExtra","nextVal","reverse"]
}
