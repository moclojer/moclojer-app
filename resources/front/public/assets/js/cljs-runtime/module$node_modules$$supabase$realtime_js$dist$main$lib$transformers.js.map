{
"version":3,
"file":"module$node_modules$$supabase$realtime_js$dist$main$lib$transformers.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@supabase/realtime-js/dist/main/lib/transformers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$realtime_js$dist$main$lib$transformers\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Helpers to convert the change Payload into native JS types.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toTimestampString = exports.toArray = exports.toJson = exports.toNumber = exports.toBoolean = exports.convertCell = exports.convertColumn = exports.convertChangeData = exports.PostgresTypes = void 0;\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nvar PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes = exports.PostgresTypes || (exports.PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nconst convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = (0, exports.convertColumn)(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\nexports.convertChangeData = convertChangeData;\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nconst convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return (0, exports.convertCell)(colType, value);\n    }\n    return noop(value);\n};\nexports.convertColumn = convertColumn;\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nconst convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return (0, exports.toArray)(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return (0, exports.toBoolean)(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return (0, exports.toNumber)(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return (0, exports.toJson)(value);\n        case PostgresTypes.timestamp:\n            return (0, exports.toTimestampString)(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nexports.convertCell = convertCell;\nconst noop = (value) => {\n    return value;\n};\nconst toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexports.toBoolean = toBoolean;\nconst toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexports.toNumber = toNumber;\nconst toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\nexports.toJson = toJson;\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nconst toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => (0, exports.convertCell)(type, val));\n    }\n    return value;\n};\nexports.toArray = toArray;\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nconst toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\nexports.toTimestampString = toTimestampString;\n//# sourceMappingURL=transformers.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","toTimestampString","toArray","toJson","toNumber","toBoolean","convertCell","convertColumn","convertChangeData","PostgresTypes","columns","record","options","_a","skipTypes","keys","reduce","acc","rec_key","columnName","column","find","x","name","colType","type","includes","charAt","dataType","slice","length","bool","float4","float8","int2","int4","int8","numeric","oid","json","jsonb","timestamp","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace"]
}
