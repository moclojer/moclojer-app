{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestTransformBuilder.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@supabase/postgrest-js/dist/main/PostgrestTransformBuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$main$PostgrestTransformBuilder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestBuilder_1 = __importDefault(require(\"./PostgrestBuilder\"));\nclass PostgrestTransformBuilder extends PostgrestBuilder_1.default {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order foreign tables, but it doesn't affect the ordering of the\n     * current table.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.foreignTable - Set this to order a foreign table by foreign\n     * columns\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, } = {}) {\n        const key = foreignTable ? `${foreignTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    limit(count, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `from` and `to` inclusively.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    range(from, to, { foreignTable } = {}) {\n        const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n        const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        this.allowEmpty = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = this.headers['Accept'];\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n    returns() {\n        return this;\n    }\n}\nexports.default = PostgrestTransformBuilder;\n//# sourceMappingURL=PostgrestTransformBuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","PostgrestBuilder_1","PostgrestTransformBuilder","default","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyLimit","keyOffset","abortSignal","signal","single","maybeSingle","allowEmpty","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","rollback","_a","trim","length","returns"]
}
