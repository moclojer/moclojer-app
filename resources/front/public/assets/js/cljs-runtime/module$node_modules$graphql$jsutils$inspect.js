shadow$provide.module$node_modules$graphql$jsutils$inspect=function(global,require,module,exports){function formatValue(value,seenValues){switch(typeof value){case "string":return JSON.stringify(value);case "function":return value.name?`[function ${value.name}]`:"[function]";case "object":return formatObjectValue(value,seenValues);default:return String(value)}}function formatObjectValue(value,previouslySeenValues){if(null===value)return"null";if(previouslySeenValues.includes(value))return"[Circular]";
previouslySeenValues=[...previouslySeenValues,value];if("function"===typeof value.toJSON){var jsonValue=value.toJSON();if(jsonValue!==value)return"string"===typeof jsonValue?jsonValue:formatValue(jsonValue,previouslySeenValues)}else if(Array.isArray(value)){if(0===value.length)value="[]";else if(2<previouslySeenValues.length)value="[Array]";else{jsonValue=Math.min(10,value.length);var remaining=value.length-jsonValue,items=[];for(let i=0;i<jsonValue;++i)items.push(formatValue(value[i],previouslySeenValues));
1===remaining?items.push("... 1 more item"):1<remaining&&items.push(`... ${remaining} more items`);value="["+items.join(", ")+"]"}return value}return formatObject(value,previouslySeenValues)}function formatObject(object,seenValues){const entries=Object.entries(object);return 0===entries.length?"{}":2<seenValues.length?"["+getObjectTag(object)+"]":"{ "+entries.map(([key,value])=>key+": "+formatValue(value,seenValues)).join(", ")+" }"}function getObjectTag(object){const tag=Object.prototype.toString.call(object).replace(/^\[object /,
"").replace(/]$/,"");return"Object"===tag&&"function"===typeof object.constructor&&(object=object.constructor.name,"string"===typeof object&&""!==object)?object:tag}Object.defineProperty(exports,"__esModule",{value:!0});exports.inspect=function(value){return formatValue(value,[])}}
//# sourceMappingURL=module$node_modules$graphql$jsutils$inspect.js.map
