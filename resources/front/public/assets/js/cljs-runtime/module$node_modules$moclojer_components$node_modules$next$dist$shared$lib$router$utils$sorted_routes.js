shadow$provide.module$node_modules$moclojer_components$node_modules$next$dist$shared$lib$router$utils$sorted_routes=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.getSortedRoutes=function(normalizedPages){const root=new UrlNode;normalizedPages.forEach(pagePath=>root.insert(pagePath));return root.smoosh()};class UrlNode{insert(urlPath){this._insert(urlPath.split("/").filter(Boolean),[],!1)}smoosh(){return this._smoosh()}_smoosh(prefix="/"){var childrenPaths=
[...this.children.keys()].sort();null!==this.slugName&&childrenPaths.splice(childrenPaths.indexOf("[]"),1);null!==this.restSlugName&&childrenPaths.splice(childrenPaths.indexOf("[...]"),1);null!==this.optionalRestSlugName&&childrenPaths.splice(childrenPaths.indexOf("[[...]]"),1);childrenPaths=childrenPaths.map(c=>this.children.get(c)._smoosh(`${prefix}${c}/`)).reduce((prev,curr)=>[...prev,...curr],[]);null!==this.slugName&&childrenPaths.push(...this.children.get("[]")._smoosh(`${prefix}[${this.slugName}]/`));
if(!this.placeholder){const r="/"===prefix?"/":prefix.slice(0,-1);if(null!=this.optionalRestSlugName)throw Error(`You cannot define a route with the same specificity as a optional catch-all route ("${r}" and "${r}[[...${this.optionalRestSlugName}]]").`);childrenPaths.unshift(r)}null!==this.restSlugName&&childrenPaths.push(...this.children.get("[...]")._smoosh(`${prefix}[...${this.restSlugName}]/`));null!==this.optionalRestSlugName&&childrenPaths.push(...this.children.get("[[...]]")._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`));
return childrenPaths}_insert(urlPaths,slugNames,isCatchAll){if(0===urlPaths.length)this.placeholder=!1;else{if(isCatchAll)throw Error("Catch-all must be the last part of the URL.");var nextSegment=urlPaths[0];if(nextSegment.startsWith("[")&&nextSegment.endsWith("]")){let segmentName=nextSegment.slice(1,-1),isOptional=!1;segmentName.startsWith("[")&&segmentName.endsWith("]")&&(segmentName=segmentName.slice(1,-1),isOptional=!0);segmentName.startsWith("...")&&(segmentName=segmentName.substring(3),isCatchAll=
!0);if(segmentName.startsWith("[")||segmentName.endsWith("]"))throw Error(`Segment names may not start or end with extra brackets ('${segmentName}').`);if(segmentName.startsWith("."))throw Error(`Segment names may not start with erroneous periods ('${segmentName}').`);function handleSlug(previousSlug,nextSlug){if(null!==previousSlug&&previousSlug!==nextSlug)throw Error(`You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`);slugNames.forEach(slug=>{if(slug===
nextSlug)throw Error(`You cannot have the same slug name "${nextSlug}" repeat within a single dynamic path`);if(slug.replace(/\W/g,"")===nextSegment.replace(/\W/g,""))throw Error(`You cannot have the slug names "${slug}" and "${nextSlug}" differ only by non-word symbols within a single dynamic path`);});slugNames.push(nextSlug)}if(isCatchAll)if(isOptional){if(null!=this.restSlugName)throw Error(`You cannot use both an required and optional catch-all route at the same level ("[...${this.restSlugName}]" and "${urlPaths[0]}" ).`);
handleSlug(this.optionalRestSlugName,segmentName);this.optionalRestSlugName=segmentName;nextSegment="[[...]]"}else{if(null!=this.optionalRestSlugName)throw Error(`You cannot use both an optional and required catch-all route at the same level ("[[...${this.optionalRestSlugName}]]" and "${urlPaths[0]}").`);handleSlug(this.restSlugName,segmentName);this.restSlugName=segmentName;nextSegment="[...]"}else{if(isOptional)throw Error(`Optional route parameters are not yet supported ("${urlPaths[0]}").`);handleSlug(this.slugName,
segmentName);this.slugName=segmentName;nextSegment="[]"}}this.children.has(nextSegment)||this.children.set(nextSegment,new UrlNode);this.children.get(nextSegment)._insert(urlPaths.slice(1),slugNames,isCatchAll)}}constructor(){this.placeholder=!0;this.children=new Map;this.optionalRestSlugName=this.restSlugName=this.slugName=null}}}
//# sourceMappingURL=module$node_modules$moclojer_components$node_modules$next$dist$shared$lib$router$utils$sorted_routes.js.map
