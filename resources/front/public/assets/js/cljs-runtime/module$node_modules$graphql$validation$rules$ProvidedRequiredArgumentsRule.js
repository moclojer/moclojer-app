shadow$provide.module$node_modules$graphql$validation$rules$ProvidedRequiredArgumentsRule=function(global,require,module,exports){function ProvidedRequiredArgumentsOnDirectivesRule(context){var _schema$getDirectives;const requiredArgsMap=Object.create(null);var schema=context.getSchema();schema=null!==(_schema$getDirectives=null===schema||void 0===schema?void 0:schema.getDirectives())&&void 0!==_schema$getDirectives?_schema$getDirectives:_directives.specifiedDirectives;for(const directive of schema)requiredArgsMap[directive.name]=
(0,_keyMap.keyMap)(directive.args.filter(_definition.isRequiredArgument),arg=>arg.name);_schema$getDirectives=context.getDocument().definitions;for(const def of _schema$getDirectives)if(def.kind===_kinds.Kind.DIRECTIVE_DEFINITION){var _def$arguments;_schema$getDirectives=null!==(_def$arguments=def.arguments)&&void 0!==_def$arguments?_def$arguments:[];requiredArgsMap[def.name.value]=(0,_keyMap.keyMap)(_schema$getDirectives.filter(isRequiredArgumentNode),arg=>arg.name.value)}return{Directive:{leave(directiveNode){const directiveName=
directiveNode.name.value;var requiredArgs=requiredArgsMap[directiveName];if(requiredArgs){var _directiveNode$argume;const argNodes=null!==(_directiveNode$argume=directiveNode.arguments)&&void 0!==_directiveNode$argume?_directiveNode$argume:[];_directiveNode$argume=new Set(argNodes.map(arg=>arg.name.value));for(const [argName,argDef]of Object.entries(requiredArgs))_directiveNode$argume.has(argName)||(requiredArgs=(0,_definition.isType)(argDef.type)?(0,_inspect.inspect)(argDef.type):(0,_printer.print)(argDef.type),
context.reportError(new _GraphQLError.GraphQLError(`Directive "@${directiveName}" argument "${argName}" of type "${requiredArgs}" is required, but it was not provided.`,{nodes:directiveNode})))}}}}}function isRequiredArgumentNode(arg){return arg.type.kind===_kinds.Kind.NON_NULL_TYPE&&null==arg.defaultValue}Object.defineProperty(exports,"__esModule",{value:!0});exports.ProvidedRequiredArgumentsOnDirectivesRule=ProvidedRequiredArgumentsOnDirectivesRule;exports.ProvidedRequiredArgumentsRule=function(context){return{...ProvidedRequiredArgumentsOnDirectivesRule(context),
Field:{leave(fieldNode){var _fieldNode$arguments;const fieldDef=context.getFieldDef();if(!fieldDef)return!1;const providedArgs=new Set(null===(_fieldNode$arguments=fieldNode.arguments)||void 0===_fieldNode$arguments?void 0:_fieldNode$arguments.map(arg=>arg.name.value));for(const argDef of fieldDef.args)!providedArgs.has(argDef.name)&&(0,_definition.isRequiredArgument)(argDef)&&(_fieldNode$arguments=(0,_inspect.inspect)(argDef.type),context.reportError(new _GraphQLError.GraphQLError(`Field "${fieldDef.name}" argument "${argDef.name}" of type "${_fieldNode$arguments}" is required, but it was not provided.`,
{nodes:fieldNode})))}}}};var _inspect=require("module$node_modules$graphql$jsutils$inspect"),_keyMap=require("module$node_modules$graphql$jsutils$keyMap"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_kinds=require("module$node_modules$graphql$language$kinds"),_printer=require("module$node_modules$graphql$language$printer"),_definition=require("module$node_modules$graphql$type$definition"),_directives=require("module$node_modules$graphql$type$directives")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$ProvidedRequiredArgumentsRule.js.map
