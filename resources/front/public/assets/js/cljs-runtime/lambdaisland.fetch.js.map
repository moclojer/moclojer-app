{"version":3,"sources":["lambdaisland/fetch.cljs"],"mappings":"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","names":["lambdaisland.fetch/content-types","lambdaisland.fetch/transit-json-writer","cljs.core/Delay","cognitect.transit.writer","lambdaisland.fetch/transit-json-reader","cognitect.transit.reader","js/lambdaisland","js/lambdaisland.fetch","js/lambdaisland.fetch.encode-body","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__23494","cljs.core/MultiFn","cljs.core.symbol","lambdaisland.fetch/encode-body","content-type","body","opts","_","cognitect.transit/write","cljs.core/deref","lambdaisland.uri/map->query-string","js/JSON.stringify","cljs.core/clj->js","js/lambdaisland.fetch.decode-body","fexpr__23496","lambdaisland.fetch/decode-body","bodyp","response","obj__22107__auto__","f__22108__auto__","kitchen-async.promise/->promise","kitchen_async.promise.then","e__22712__auto__","e23501","kitchen-async.promise/reject","text","decoded","cognitect.transit/read","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","cljs.core.vary_meta","cljs.core/assoc","p__23509","map__23510","cljs.core/--destructure-map","lambdaisland.fetch/fetch-opts","method","accept","headers","redirect","mode","cache","credentials","referrer-policy","fetch-headers","seq__23511","cljs.core/seq","chunk__23512","count__23513","i__23514","vec__23529","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__23536","cljs.core/first","cljs.core/next","k","v","obj23532","obj23533","applied-science.js-interop.impl/wrap-key","obj23539","obj23541","clojure.string/upper-case","cljs.core/name","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","lambdaisland.fetch/request","p__23549","vec__23551","map__23554","seq23544","G__23545","self__5754__auto__","url","query-params","lambdaisland.uri/uri","lambdaisland.uri/assoc-query*","request","G__23558","obj23559","obj23560","e23563","js/fetch","kitchen-async.promise/catch*","e23587","err23582","obj23592","js/undefined","header-map","cljs.core.into","cljs.core.map","cljs.core/vec","cljs.core/es6-iterator-seq","content-type-header","clojure.set/map-invert","clojure.string/replace","e23613","obj23616","obj23617","obj23614","e","obj23624","obj23625","lambdaisland.fetch/get","lambdaisland.fetch/post","p__23639","vec__23640","seq23634","G__23635","lambdaisland.fetch.request","cljs.core.assoc","lambdaisland.fetch/put","p__23676","vec__23678","seq23672","G__23673","lambdaisland.fetch/delete","p__23688","vec__23689","seq23684","G__23685","lambdaisland.fetch/head","p__23707","vec__23708","seq23695","G__23696"],"sourcesContent":["(ns lambdaisland.fetch\n  (:refer-clojure :exclude [get])\n  (:require [applied-science.js-interop :as j]\n            [clojure.core :as c]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [cognitect.transit :as transit]\n            [kitchen-async.promise :as p]\n            [lambdaisland.uri :as uri]\n            [lambdaisland.uri.normalize :as uri-normalize]))\n\n;; fetch(url, {\n;;             method: 'POST', // *GET, POST, PUT, DELETE, etc.\n;;             mode: 'cors', // no-cors, *cors, same-origin\n;;             cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n;;             credentials: 'same-origin', // include, *same-origin, omit\n;;             headers: {\n;;                       'Content-Type': 'application/json'\n;;                       // 'Content-Type': 'application/x-www-form-urlencoded',\n;;                       },\n;;             redirect: 'follow', // manual, *follow, error\n;;             referrerPolicy: 'no-referrer', // no-referrer, *client\n;;             body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n;;             });\n\n(def content-types\n  {:transit-json \"application/transit+json\"\n   :json         \"application/json\"\n   :form-encoded \"application/x-www-form-urlencoded\"\n   :text         \"text/plain\"\n   :html         \"text/html\"\n   :edn          \"application/edn\"})\n\n(def transit-json-writer\n  (delay (transit/writer :json)))\n\n(def transit-json-reader\n  (delay (transit/reader :json)))\n\n(defmulti encode-body (fn [content-type body opts] content-type))\n\n(defmethod encode-body :default [_ body opts]\n  body)\n\n(defmethod encode-body :transit-json [_ body opts]\n  (transit/write (:transit-json-writer opts @transit-json-writer) body))\n\n(defmethod encode-body :form-encoded [_ body opts]\n  (uri/map->query-string body))\n\n(defmethod encode-body :json [_ body opts]\n  (js/JSON.stringify (clj->js body)))\n\n(defmulti decode-body (fn [content-type bodyp opts] content-type))\n\n(defmethod decode-body :default [_ response opts]\n  (j/call response :text))\n\n(defmethod decode-body :transit-json [_ response opts]\n  (p/let [text (j/call response :text)]\n    (let [decoded (transit/read (:transit-json-reader opts @transit-json-reader) text)]\n      (if (satisfies? IWithMeta decoded)\n        (vary-meta decoded assoc ::raw text)\n        decoded))))\n\n(defmethod decode-body :json [_ response opts]\n  (j/call response :json))\n\n(defn fetch-opts [{:keys [method accept content-type\n                          headers redirect mode cache\n                          credentials referrer-policy]\n                   :or   {method          :get\n                          accept          :transit-json\n                          content-type    :transit-json\n                          redirect        :follow\n                          mode            :cors\n                          cache           :default\n                          credentials     :same-origin\n                          referrer-policy :client}}]\n  (let [fetch-headers #js {\"Accept\"       (c/get content-types accept)\n                           \"Content-Type\" (c/get content-types content-type)}]\n    (doseq [[k v] headers]\n      (j/assoc! fetch-headers k v))\n    #js {:method          (str/upper-case (name method))\n         :headers         fetch-headers\n         :redirect        (name redirect)\n         :mode            (name mode)\n         :cache           (name cache)\n         :credentials     (name credentials)\n         :referrer-policy (name referrer-policy)}))\n\n(defn request [url & [{:keys [method accept content-type query-params body]\n                       :as   opts\n                       :or   {accept       :transit-json\n                              content-type :transit-json}}]]\n  (let [url (-> (uri/uri url)\n                (uri/assoc-query* query-params)\n                str)\n        request (cond-> (fetch-opts opts)\n                  body\n                  (j/assoc! :body (if (string? body)\n                                    body\n                                    (encode-body content-type body opts))))]\n    (p/let [response (js/fetch url request)]\n      (p/try\n        (let [headers             (j/get response :headers)\n              header-map          (into {} (map vec) (es6-iterator-seq (j/call headers :entries)))\n              content-type-header (j/call headers :get \"Content-Type\")\n              content-type        (when content-type-header\n                                    (c/get (set/map-invert content-types)\n                                           (str/replace content-type-header #\";.*\" \"\")))]\n          (p/let [body (decode-body content-type response opts)]\n            ^{::request  (j/assoc! request :url url)\n              ::response response}\n            {:status  (j/get response :status)\n             :headers header-map\n             :body    body}))\n        (p/catch :default e\n          ^{::request  (j/assoc! request :url url)\n            ::response response}\n          {:error e})))))\n\n(def get request)\n\n(defn post [url & [opts]]\n  (request url (assoc opts :method :post)))\n\n(defn put [url & [opts]]\n  (request url (assoc opts :method :put)))\n\n(defn delete [url & [opts]]\n  (request url (assoc opts :method :delete)))\n\n(defn head [url & [opts]]\n  (request url (assoc opts :method :head)))\n"]}