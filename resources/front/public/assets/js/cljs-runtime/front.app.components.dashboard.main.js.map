{"version":3,"sources":["front/app/components/dashboard/main.cljs"],"mappings":"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","names":["front.app.components.dashboard.main/theme","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","front.app.components.dashboard.main/extensions","js/module$node_modules$$codemirror$history$dist$index_cjs.history","js/module$node_modules$$codemirror$highlight$dist$index_cjs.defaultHighlightStyle","js/module$node_modules$$codemirror$view$dist$index_cjs.drawSelection","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","p__27214","map__27215","cljs.core/--destructure-map","cljs.core.get","front.app.components.dashboard.main/new-cm","parent","initial-value","on-change","G__27219","helix.core/get-react","obj27367","update","G__27271","goog/DEBUG","front.app.components.dashboard.main/sig27277","helix.core/signature!","G__27293","props__24071__auto__","maybe-ref__24072__auto__","vec__27294","helix.core/extract-cljs-props","map__27297","cljs.core.nth","G__27310","cljs.core/with-meta","helix.core/register!","front.app.components.dashboard.main/editor","value","style","cm-instance","helix.hooks/use-ref","cm-mount","p1__27272#","cljs.core/reset!","or__5045__auto__","temp__5804__auto__","cljs.core/deref","cm","cljs.core.not_EQ_","clojure.string.join","tx","front.app.components.dashboard.main/sig27312","G__27332","vec__27333","G__27368","front.app.components.dashboard.main/Main","vec__27336","data","set-data","helix.hooks/use-state","obj27309","helix.impl.props/dom-style","obj27344","obj27346","obj27349","obj27351","obj27353","obj27365","G__27303","helix.hooks/wrap-fx","G__27304","helix.hooks/raw-use-effect","G__27305","G__27306","helix.hooks/raw-use-layout-effect","G__27300","G__27301","helix.hooks/raw-use-callback"],"sourcesContent":["(ns front.app.components.dashboard.main\n  (:require\n   [\"@codemirror/closebrackets\" :refer [closeBrackets]]\n   [\"@codemirror/fold\" :as fold]\n   [\"@codemirror/gutter\" :refer [lineNumbers]]\n   [\"@codemirror/highlight\" :as highlight]\n   [\"@codemirror/history\" :refer [history historyKeymap]]\n   [\"@codemirror/state\" :refer [EditorState]]\n   [\"@codemirror/view\" :as view :refer [EditorView]]\n   [clojure.string :as string]\n   [helix.core :refer [defnc $]]\n   [helix.dom :as d]\n   [helix.hooks :as hooks]\n   [front.app.lib :refer [defnc]]))\n\n(def theme\n  (.theme\n   EditorView\n   #js {\".cm-content\" #js {:white-space \"pre-wrap\"\n                           :padding \"10px 8px\"\n                           :min-height \"100%\"}\n        \".cm-line\" #js {:font-family \"Fira Code\"\n                        :font-size \"0.8rem\"}\n        \"&.cm-focused\" #js {:outline \"none\"}\n        \".cm-gutters\" #js {:background \"transparent\"\n                           :border \"none\"}\n        \".cm-gutterElement\" #js {:margin-left \"5px\"}}))\n\n(def extensions\n  #js [theme\n       (history)\n       highlight/defaultHighlightStyle\n       (view/drawSelection)\n       (.. EditorState -allowMultipleSelections (of true)) ])\n\n; #TODO not working properly \n(defn new-cm\n  [{:keys [parent initial-value on-change]}]\n  (EditorView.\n   #js {:state\n        (.create\n         EditorState\n         #js {:doc initial-value\n              :extensions\n              (cond-> extensions\n                ;; readonly\n                (nil? on-change)\n                (.concat\n                 (-> EditorView\n                     (.-editable)\n                     (.of false)))\n\n                (some? on-change)\n                (.concat\n                 (-> EditorView\n                     (.-updateListener)\n                     (.of\n                      (fn [^js update]\n                        (when (.-docChanged update)\n                          (-> (.. update -state -doc toString)\n                              (on-change))))))))})\n        :parent parent}))\n\n; #TODO not working properly \n(defnc editor\n  [{:keys [initial-value on-change value style]}]\n  (let [cm-instance (hooks/use-ref nil)\n        cm-mount (hooks/use-callback\n                  :once\n                  #(when %\n                     (reset!\n                      cm-instance\n                      (new-cm\n                       {:parent %\n                        :initial-value (or initial-value \"\")\n                        :on-change on-change}))))]\n    (hooks/use-effect\n     :once\n     ;; on unmount\n     #(when-let [^js cm @cm-instance]\n        (.destroy cm)))\n\n    (hooks/use-layout-effect\n     [value]\n     (when value\n       (when-let [cm @cm-instance]\n         (when (not= (string/join \"\\n\" (.. cm -state -doc -text))\n                     value)\n           (let [tx (-> (.-state cm)\n                        (.update\n                         #js {:changes\n                              ;; replace entire text with value\n                              #js {:from 0\n                                   :to (.. cm -state -doc -length)\n                                   :insert value}}))]\n             (.dispatch cm tx))))))\n    (d/div\n     {:class \"min-h-full\"\n      :style style\n      :ref cm-mount})))\n\n(defnc Main []\n  (let [[data set-data] (hooks/use-state \"\")]\n    (d/main {:class-name \"ml-60 pt-16 max-h-screnn overflow-auto\"}\n            (d/div {:class-name \"px-6 py-8\"}\n                   (d/div {:class-name \"max-w-4xl mx-auto\"}\n                          (d/div {:class-name \"bg-white rounded-3xl p-8 mb-5\"}\n                                 (d/h1 {:class-name \"text-3xl font-bold mb-10\"}\n                                       \"Create your mock api\")\n                                 (d/div {:class-name \"flex items-center justify-between\"}\n                                        ($ editor {:value data :on-change set-data}))))))))\n"]}