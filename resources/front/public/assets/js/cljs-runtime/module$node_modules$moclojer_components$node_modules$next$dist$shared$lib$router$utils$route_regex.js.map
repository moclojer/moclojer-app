{
"version":3,
"file":"module$node_modules$moclojer_components$node_modules$next$dist$shared$lib$router$utils$route_regex.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/moclojer-components/node_modules/next/dist/shared/lib/router/utils/route-regex.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$moclojer_components$node_modules$next$dist$shared$lib$router$utils$route_regex\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getRouteRegex = getRouteRegex;\nexports.getNamedRouteRegex = getNamedRouteRegex;\nexports.getMiddlewareRegex = getMiddlewareRegex;\nexports.getNamedMiddlewareRegex = getNamedMiddlewareRegex;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _escapeRegexp = require(\"../../escape-regexp\");\nvar _removeTrailingSlash = require(\"./remove-trailing-slash\");\nfunction getRouteRegex(normalizedRoute) {\n    const { parameterizedRoute , groups  } = getParametrizedRoute(normalizedRoute);\n    return {\n        re: new RegExp(`^${parameterizedRoute}(?:/)?$`),\n        groups: groups\n    };\n}\nfunction getNamedRouteRegex(normalizedRoute) {\n    const result = getNamedParametrizedRoute(normalizedRoute);\n    return _extends({}, getRouteRegex(normalizedRoute), {\n        namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`,\n        routeKeys: result.routeKeys\n    });\n}\nfunction getParametrizedRoute(route) {\n    const segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n    const groups = {};\n    let groupIndex = 1;\n    return {\n        parameterizedRoute: segments.map((segment)=>{\n            if (segment.startsWith('[') && segment.endsWith(']')) {\n                const { key , optional , repeat  } = parseParameter(segment.slice(1, -1));\n                groups[key] = {\n                    pos: groupIndex++,\n                    repeat,\n                    optional\n                };\n                return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n            } else {\n                return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n            }\n        }).join(''),\n        groups\n    };\n}\nfunction getNamedParametrizedRoute(route) {\n    const segments = (0, _removeTrailingSlash).removeTrailingSlash(route).slice(1).split('/');\n    const getSafeRouteKey = buildGetSafeRouteKey();\n    const routeKeys = {};\n    return {\n        namedParameterizedRoute: segments.map((segment)=>{\n            if (segment.startsWith('[') && segment.endsWith(']')) {\n                const { key , optional , repeat  } = parseParameter(segment.slice(1, -1));\n                // replace any non-word characters since they can break\n                // the named regex\n                let cleanedKey = key.replace(/\\W/g, '');\n                let invalidKey = false;\n                // check if the key is still invalid and fallback to using a known\n                // safe key\n                if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n                    invalidKey = true;\n                }\n                if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n                    invalidKey = true;\n                }\n                if (invalidKey) {\n                    cleanedKey = getSafeRouteKey();\n                }\n                routeKeys[cleanedKey] = key;\n                return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n            } else {\n                return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n            }\n        }).join(''),\n        routeKeys\n    };\n}\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ name: 'slug', repeat: true, optional: true }`\n *   - `[foo]` -> `{ name: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ name: 'bar', repeat: false, optional: false }`\n */ function parseParameter(param) {\n    const optional = param.startsWith('[') && param.endsWith(']');\n    if (optional) {\n        param = param.slice(1, -1);\n    }\n    const repeat = param.startsWith('...');\n    if (repeat) {\n        param = param.slice(3);\n    }\n    return {\n        key: param,\n        repeat,\n        optional\n    };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */ function buildGetSafeRouteKey() {\n    let routeKeyCharCode = 97;\n    let routeKeyCharLength = 1;\n    return ()=>{\n        let routeKey = '';\n        for(let i = 0; i < routeKeyCharLength; i++){\n            routeKey += String.fromCharCode(routeKeyCharCode);\n            routeKeyCharCode++;\n            if (routeKeyCharCode > 122) {\n                routeKeyCharLength++;\n                routeKeyCharCode = 97;\n            }\n        }\n        return routeKey;\n    };\n}\nfunction getMiddlewareRegex(normalizedRoute, options) {\n    const { parameterizedRoute , groups  } = getParametrizedRoute(normalizedRoute);\n    const { catchAll =true  } = options != null ? options : {};\n    if (parameterizedRoute === '/') {\n        let catchAllRegex = catchAll ? '.*' : '';\n        return {\n            groups: {},\n            re: new RegExp(`^/${catchAllRegex}$`)\n        };\n    }\n    let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n    return {\n        groups: groups,\n        re: new RegExp(`^${parameterizedRoute}${catchAllGroupedRegex}$`)\n    };\n}\nfunction getNamedMiddlewareRegex(normalizedRoute, options) {\n    const { parameterizedRoute  } = getParametrizedRoute(normalizedRoute);\n    const { catchAll =true  } = options;\n    if (parameterizedRoute === '/') {\n        let catchAllRegex = catchAll ? '.*' : '';\n        return {\n            namedRegex: `^/${catchAllRegex}$`\n        };\n    }\n    const { namedParameterizedRoute  } = getNamedParametrizedRoute(normalizedRoute);\n    let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n    return {\n        namedRegex: `^${namedParameterizedRoute}${catchAllGroupedRegex}$`\n    };\n}\n\n//# sourceMappingURL=route-regex.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getRouteRegex","normalizedRoute","parameterizedRoute","groups","getParametrizedRoute","re","RegExp","route","groupIndex","removeTrailingSlash","_removeTrailingSlash","slice","split","segments","map","segment","startsWith","endsWith","key","optional","repeat","parseParameter","pos","escapeStringRegexp","_escapeRegexp","join","getNamedParametrizedRoute","getSafeRouteKey","buildGetSafeRouteKey","routeKeys","namedParameterizedRoute","cleanedKey","replace","invalidKey","length","isNaN","parseInt","param","routeKeyCharCode","routeKeyCharLength","routeKey","i","String","fromCharCode","Object","defineProperty","value","getNamedRouteRegex","result","_extends","namedRegex","getMiddlewareRegex","options","catchAll","catchAllRegex","catchAllGroupedRegex","getNamedMiddlewareRegex","default"]
}
