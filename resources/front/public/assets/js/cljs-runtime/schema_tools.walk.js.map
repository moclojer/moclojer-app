{"version":3,"sources":["schema_tools/walk.cljc"],"mappings":"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","names":["schema-tools$walk$WalkableSchema$_walk$dyn","x__5393__auto__","m__5394__auto__","schema-tools.walk/-walk","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","schema-tools.walk/WalkableSchema","this","inner","outer","schema-tools.walk/schema-record?","x","and__5043__auto__","cljs.core/record?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","schema.core/Schema","schema-tools.walk/walk","G__39869","cljs.core/with-meta","cljs.core.reduce","r","cljs.core.conj","cljs.core/meta","cljs.core/seq?","G__39870","cljs.core.doall","cljs.core.map","cljs.core/coll?","G__39878","cljs.core.into","cljs.core/empty","schema-tools.walk/postwalk","f","schema","cljs.core.partial","schema-tools.walk/prewalk","cljs.core/identity","cljs.core/MapEntry","G__39923","cljs.core/vec","schema.core/Maybe","G__39938","schema.core/maybe","G__39939","schema.core/Both","G__39951","cljs.core.apply","schema.core/both","schema.core/Either","G__39947","schema.core/either","schema.core/Predicate","_","schema.core/NamedSchema","G__39942","schema.core/named","G__39943","schema.core/ConditionalSchema","G__39924","schema.core/->ConditionalSchema","iter__5523__auto__","s__39926","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__39928","cljs.core/chunk-buffer","i__39927","vec__39930","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39925","cljs.core/chunk-rest","vec__39933","cljs.core/first","cljs.core/cons","cljs.core/rest","pred","schema.core/CondPre","G__39950","schema.core/cond-pre","schema.core/Constrained","G__39961","schema.core.constrained","G__39963","cljs.core/chunk-first"],"sourcesContent":["(ns schema-tools.walk\n  \"Provides walk function which can be used to transform schemas while\n  preserving their structure and type.\"\n  (:require [schema.core :as s])\n  #?(:clj (:import [java.util Map$Entry])))\n\n(defprotocol WalkableSchema\n  (-walk [this inner outer]))\n\n(defn- schema-record?\n  \"Tests if the parameter is Schema record. I.e. not vector, map or other\n  collection but implements Schema protocol.\"\n  [x]\n  (and (record? x)\n       #?(:clj  (instance? schema.core.Schema x)\n          :cljs (satisfies? schema.core.Schema x))))\n\n(defn walk\n  \"Calls `inner` for sub-schemas of this schema, creating new Schema of the same\n  type as given and preserving the metadata. Calls `outer` with the created\n  Schema.\"\n  {:added \"0.3.0\"}\n  [inner outer this]\n  (cond\n    ; Schemas with children\n    (satisfies? WalkableSchema this) (-walk this inner outer)\n    ; Leaf schemas - Rest Schema records should be the leaf schemas.\n    (schema-record? this) (outer this)\n    ; Regular clojure datastructures\n    (record? this) (outer (with-meta (reduce (fn [r x] (conj r (inner x))) this this) (meta this)))\n    #?@(:clj [(list? this) (outer (with-meta (apply list (map inner this)) (meta this)))])\n    (seq? this) (outer (with-meta (doall (map inner this)) (meta this)))\n    (coll? this) (outer (with-meta (into (empty this) (map inner this)) (meta this)))\n    :else (outer this)))\n\n(defn postwalk\n  \"Performs a depth-first, post-order traversal of `schema`.  Calls `f` on\n  each sub-form, uses f's return value in place of the original.\n  Works with Schemas implementing schema-tools.walk/WalkableSchema,\n  implementation is provided for built-in schemas.\n  Consumes seqs as with doall.\"\n  {:added \"0.8\"}\n  [f schema]\n  (walk (partial postwalk f) f schema))\n\n(defn prewalk\n  \"Like postwalk, but does pre-order traversal.\"\n  {:added \"0.8\"}\n  [f schema]\n  (walk (partial prewalk f) identity (f schema)))\n\n(extend-protocol WalkableSchema\n  ;; Walk for map-entries doesn't have to return new map-entry, because\n  ;; the result is used in (into {} ...) and vector will\n  ;; work in that case.\n  #?(:clj Map$Entry\n     :cljs MapEntry)\n  (-walk [this inner outer]\n    (outer (with-meta (vec (map inner this)) (meta this))))\n\n  schema.core.Maybe\n  (-walk [this inner outer]\n    (outer (with-meta (s/maybe (inner (:schema this))) (meta this))))\n\n  schema.core.Both\n  (-walk [this inner outer]\n    (outer (with-meta (apply s/both (map inner (:schemas this))) (meta this))))\n\n  schema.core.Either\n  (-walk [this inner outer]\n    (outer (with-meta (apply s/either (map inner (:schemas this))) (meta this))))\n\n  #?@(:clj [schema.core.Recursive\n            (-walk [this inner outer]\n                   (outer (with-meta (s/recursive (inner (:derefable this))) (meta this))))])\n\n  schema.core.Predicate\n  (-walk [this _ outer]\n    (outer this))\n\n  schema.core.NamedSchema\n  (-walk [this inner outer]\n    (outer (with-meta (s/named (inner (:schema this)) (:name this)) (meta this))))\n\n  schema.core.ConditionalSchema\n  (-walk [this inner outer]\n    (outer (with-meta (s/->ConditionalSchema\n                        (doall (for [[pred schema] (:preds-and-schemas this)]\n                                 [pred (inner schema)]))\n                        (:error-symbol this))\n                      (meta this))))\n\n  schema.core.CondPre\n  (-walk [this inner outer]\n    (outer (with-meta (apply s/cond-pre (map inner (:schemas this))) (meta this))))\n\n  schema.core.Constrained\n  (-walk [this inner outer]\n    (outer (with-meta (s/constrained (inner (:schema this)) (:postcondition this) (:post-name this)) (meta this)))))\n"]}