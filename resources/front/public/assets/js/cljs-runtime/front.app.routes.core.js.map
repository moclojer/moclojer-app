{"version":3,"sources":["front/app/routes/core.cljs"],"mappings":";AAOA,+BAAA,/BAAMA,sEAAQC;AAAd,AACE,mEAAA,2CAAA,qDAAA,2CAAA,oEAAA,mFAAA,2CAAA,gMAAA,8MAAA,4FAAA,0DAAA,76BAACC,qDACAD,2YAC8B,yGAAA,QAAA,jHAACE,+LACF,yGAAA,OAAA,hHAACA,oNACZC;;AAGrB,oCAAA,pCAAMC,gFAAaC;AAAnB,AACE,oBAAMA;AAAN,AACE,2BAAA,mFAAA,vGAACC,yLAAqCD;;AADxC;;;AAGF,0CAAA,1CAAME,4FAAcP;AAApB,AACE,YAAA,ZAACQ;;AACD,+GAAA,2CAAA,sEAAA,zNAACC,iCACA,AAACV,6BAAOC,QACRI","names":["front.app.routes.core/router","routes","reitit.frontend.router","cljs.core.println","reitit.coercion.schema/coercion","front.app.routes.core/on-navigate","new-match","refx.alpha/dispatch","front.app.routes.core/init-routes!","js/console.log","reitit.frontend.easy/start!"],"sourcesContent":["(ns front.app.routes.core\n  (:require\n   [reitit.frontend :as rf]\n   [reitit.coercion.schema :as rsc]\n   [refx.alpha :as refx]\n   [reitit.frontend.easy :as rfe]))\n\n(defn router [routes]\n  (rf/router\n   routes\n   {:data {:controllers [{:start (println \"start\" \"root-controller\")\n                          :stop (println \"stop\" \"root controller\")}]\n           :coercion rsc/coercion\n           :public? false}}))\n\n(defn on-navigate [new-match]\n  (when new-match\n    (refx/dispatch [:app.routes/navigated new-match])))\n\n(defn init-routes! [routes]\n  (js/console.log \"initializing routes\")\n  (rfe/start!\n   (router routes)\n   on-navigate\n   {:use-fragment true}))\n\n"]}