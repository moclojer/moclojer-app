{
"version":3,
"file":"module$node_modules$graphql$validation$rules$VariablesAreInputTypesRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,0BAAR,CAkBAA,QAAmC,CAACC,OAAD,CAAU,CAC3C,MAAO,CACLC,kBAAkB,CAACC,IAAD,CAAO,CACvB,IAAMC,KAAO,GAAIC,YAAaC,CAAAA,WAAjB,EACXL,OAAQM,CAAAA,SAAR,EADW,CAEXJ,IAAKC,CAAAA,IAFM,CAKb,IAAaI,IAAAA,EAAb,GAAIJ,IAAJ,EAA0B,CAAC,GAAIK,WAAYC,CAAAA,WAAhB,EAA6BN,IAA7B,CAA3B,CAA+D,CACvDO,IAAAA,CAAeR,IAAKS,CAAAA,QAASC,CAAAA,IAAKd,CAAAA,KACxC,OAAMe,SAAW,GAAIC,QAASC,CAAAA,KAAb,EAAoBb,IAAKC,CAAAA,IAAzB,CACjBH,QAAQgB,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,cAAaR,IAAb,+BAAwDG,QAAxD,IADH;AAEE,CACEM,MAAOjB,IAAKC,CAAAA,IADd,CAFF,CADF,CAH6D,CANxC,CADpB,CADoC,CAhB7C,KAAIc,cAAgBxB,OAAA,CAAQ,gDAAR,CAApB,CAEIqB,SAAWrB,OAAA,CAAQ,8CAAR,CAFf,CAIIe,YAAcf,OAAA,CAAQ,6CAAR,CAJlB,CAMIW,aAAeX,OAAA,CAAQ,mDAAR,CAdiH;",
"sources":["node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$VariablesAreInputTypesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nfunction VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(\n        context.getSchema(),\n        node.type,\n      );\n\n      if (type !== undefined && !(0, _definition.isInputType)(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = (0, _printer.print)(node.type);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","VariablesAreInputTypesRule","context","VariableDefinition","node","type","_typeFromAST","typeFromAST","getSchema","undefined","_definition","isInputType","variableName","variable","name","typeName","_printer","print","reportError","_GraphQLError","GraphQLError","nodes"]
}
