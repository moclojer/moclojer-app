shadow$provide.module$node_modules$graphql$validation$rules$KnownDirectivesRule=function(global,require,module,exports){function getDirectiveLocationForASTPath(ancestors){const appliedTo=ancestors[ancestors.length-1];"kind"in appliedTo||(0,_invariant.invariant)(!1);switch(appliedTo.kind){case _kinds.Kind.OPERATION_DEFINITION:a:{switch(appliedTo.operation){case _ast.OperationTypeNode.QUERY:ancestors=_directiveLocation.DirectiveLocation.QUERY;break a;case _ast.OperationTypeNode.MUTATION:ancestors=_directiveLocation.DirectiveLocation.MUTATION;
break a;case _ast.OperationTypeNode.SUBSCRIPTION:ancestors=_directiveLocation.DirectiveLocation.SUBSCRIPTION;break a}ancestors=void 0}return ancestors;case _kinds.Kind.FIELD:return _directiveLocation.DirectiveLocation.FIELD;case _kinds.Kind.FRAGMENT_SPREAD:return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;case _kinds.Kind.INLINE_FRAGMENT:return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;case _kinds.Kind.FRAGMENT_DEFINITION:return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
case _kinds.Kind.VARIABLE_DEFINITION:return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;case _kinds.Kind.SCHEMA_DEFINITION:case _kinds.Kind.SCHEMA_EXTENSION:return _directiveLocation.DirectiveLocation.SCHEMA;case _kinds.Kind.SCALAR_TYPE_DEFINITION:case _kinds.Kind.SCALAR_TYPE_EXTENSION:return _directiveLocation.DirectiveLocation.SCALAR;case _kinds.Kind.OBJECT_TYPE_DEFINITION:case _kinds.Kind.OBJECT_TYPE_EXTENSION:return _directiveLocation.DirectiveLocation.OBJECT;case _kinds.Kind.FIELD_DEFINITION:return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
case _kinds.Kind.INTERFACE_TYPE_DEFINITION:case _kinds.Kind.INTERFACE_TYPE_EXTENSION:return _directiveLocation.DirectiveLocation.INTERFACE;case _kinds.Kind.UNION_TYPE_DEFINITION:case _kinds.Kind.UNION_TYPE_EXTENSION:return _directiveLocation.DirectiveLocation.UNION;case _kinds.Kind.ENUM_TYPE_DEFINITION:case _kinds.Kind.ENUM_TYPE_EXTENSION:return _directiveLocation.DirectiveLocation.ENUM;case _kinds.Kind.ENUM_VALUE_DEFINITION:return _directiveLocation.DirectiveLocation.ENUM_VALUE;case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
case _kinds.Kind.INPUT_VALUE_DEFINITION:return ancestors=ancestors[ancestors.length-3],"kind"in ancestors||(0,_invariant.invariant)(!1),ancestors.kind===_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION?_directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION:_directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;default:(0,_invariant.invariant)(!1,"Unexpected kind: "+(0,_inspect.inspect)(appliedTo.kind))}}Object.defineProperty(exports,"__esModule",{value:!0});exports.KnownDirectivesRule=function(context){const locationsMap=
Object.create(null);var schema=context.getSchema();schema=schema?schema.getDirectives():_directives.specifiedDirectives;for(var directive of schema)locationsMap[directive.name]=directive.locations;directive=context.getDocument().definitions;for(const def of directive)def.kind===_kinds.Kind.DIRECTIVE_DEFINITION&&(locationsMap[def.name.value]=def.locations.map(name=>name.value));return{Directive(node,_key,_parent,_path,ancestors){_key=node.name.value;(_parent=locationsMap[_key])?(ancestors=getDirectiveLocationForASTPath(ancestors))&&
!_parent.includes(ancestors)&&context.reportError(new _GraphQLError.GraphQLError(`Directive "@${_key}" may not be used on ${ancestors}.`,{nodes:node})):context.reportError(new _GraphQLError.GraphQLError(`Unknown directive "@${_key}".`,{nodes:node}))}}};var _inspect=require("module$node_modules$graphql$jsutils$inspect"),_invariant=require("module$node_modules$graphql$jsutils$invariant"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_ast=require("module$node_modules$graphql$language$ast"),
_directiveLocation=require("module$node_modules$graphql$language$directiveLocation"),_kinds=require("module$node_modules$graphql$language$kinds"),_directives=require("module$node_modules$graphql$type$directives")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$KnownDirectivesRule.js.map
