{"version":3,"sources":["schema_tools/swagger/core.cljc"],"mappings":"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","names":["schema-tools.swagger.core/remove-empty-keys","m","cljs.core.into","cljs.core/empty","cljs.core.filter","cljs.core.comp","cljs.core/not","cljs.core/nil?","cljs.core/val","schema-tools.swagger.core/record-schema","x","temp__5802__auto__","schema","G__40317","schema.utils/class-schema","name","G__40318","cljs.core.pr_str","clojure.string.split","cljs.core/last","schema.core/named","schema-tools.swagger.core/plain-map?","cljs.core/map?","cljs.core/record?","schema-tools.swagger.core/schema-name","opts","G__40324","or__5045__auto__","schema.core/schema-name","cljs.core/name","ns","schema.core/schema-ns","schema-tools.swagger.core/key-name","cljs.core/Keyword","n","cljs.core/namespace","p__40340","map__40341","cljs.core/--destructure-map","cljs.core.get","schema-tools.swagger.core/assoc-collection-format","in","options","G__40342","fexpr__40343","cljs.core.assoc","schema-tools.swagger.core/not-supported!","cljs.core.ex_info","schema-tools.swagger.core/maybe?","schema-tools.swagger.core/collection-schema","e","G__40345","G__40346","schema-tools.swagger.core/transform","cljs.core/first","schema-tools.swagger.core/properties","G__40347","iter__5523__auto__","s__40349","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__40351","cljs.core/chunk-buffer","i__40350","vec__40354","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40348","cljs.core/chunk-rest","vec__40357","cljs.core/cons","cljs.core/rest","k","v","schema.core/specific-key?","and__5043__auto__","schema.core/explicit-schema-key","schema-tools.swagger.core/additional-properties","extra-key","schema.core/find-extra-keys-schema","schema-tools.swagger.core/object-schema","this","G__40360","cljs.core/filterv","schema.core/required-key?","cljs.core/keys","cljs.core.mapv","js/schema-tools","js/schema-tools.swagger","js/schema-tools.swagger.core","js/schema-tools.swagger.core.transform-pred","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__40363","cljs.core/MultiFn","cljs.core.symbol","schema-tools.swagger.core/transform-pred","_","cljs.core/string?","cljs.core/integer?","cljs.core/keyword?","cljs.core/symbol?","p__40368","map__40369","ignore-missing-mappings?","js/schema-tools.swagger.core.transform-type","fexpr__40370","schema-tools.swagger.core/transform-type","c","js/Boolean","js/Number","js/Date","cljs.core/UUID","schema.core/Regex","js/String","js/goog.date.Date","js/goog.date.UtcDateTime","p__40373","map__40374","schema-tools$swagger$core$SwaggerSchema$_transform$dyn","x__5393__auto__","m__5394__auto__","schema-tools.swagger.core/-transform","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","schema-tools.swagger.core/SwaggerSchema","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","rschema","schema_tools.core/Schema","p__40403","map__40404","map__40405","data","cljs.core.merge","cljs.core/select-keys","schema-tools.impl/unlift-keys","js/RegExp","schema.core/Both","schema.core/Predicate","schema.core/EnumSchema","cljs.core/type","schema.core/Maybe","p__40406","map__40407","pred__40408","expr__40409","G__40411","G__40412","G__40413","G__40414","cljs.core/contains?","schema.core/Either","schema.core/EqSchema","schema.core/One","schema.core/AnythingSchema","p__40418","map__40419","cljs.core.not_EQ_","schema.core/maybe","schema.core/Str","schema.core/ConditionalSchema","cljs.core/vec","cljs.core.keep","p1__40384#","cljs.core/second","schema.core/CondPre","p1__40385#","schema.core/Constrained","schema.core/NamedSchema","p__40415","map__40416","map__40417","cljs.core/List","cljs.core/PersistentHashSet","cljs.core/PersistentVector","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","js/schema-tools.swagger.core.extract-parameter","fexpr__40420","schema-tools.swagger.core/extract-parameter","swagger","map__40424","properties","required","p__40426","vec__40427","map__40430","type","cljs.core/set","js/schema-tools.swagger.core.expand","fexpr__40443","schema-tools.swagger.core/expand","acc","s__40445","b__40447","i__40446","vec__40448","iter__40444","vec__40451","status","response","cljs.core.update","cljs.core.fnil","cljs.core/identity","old","new","cljs.core.mapcat","p__40454","vec__40455","spec","merged","cljs.core/reverse","cljs.core.reduce","p__40458","vec__40459","ps","cache","p","cljs.core.conj","schema-tools.swagger.core/expand-qualified-keywords","accept?","cljs.core/methods","clojure.walk/postwalk","cljs.core/reduce-kv","cljs.core.dissoc","var_args","G__40469","schema-tools.swagger.core/swagger-spec","js/Error","schema_tools.swagger.core.swagger_spec","cljs.core/chunk-first"],"sourcesContent":["(ns schema-tools.swagger.core\n  (:require [clojure.walk :as walk]\n            [schema-tools.core]\n            [schema.utils :as su]\n            [schema.core :as s]\n            [clojure.string :as str]\n            #?@(:cljs [goog.date.UtcDateTime\n                       goog.date.Date])\n            [schema-tools.impl :as impl]))\n\n;;\n;; common\n;;\n\n(declare transform)\n\n(defn remove-empty-keys [m]\n  (into (empty m) (filter (comp not nil? val) m)))\n\n(defn record-schema [x]\n  (if-let [schema (some-> x su/class-schema :schema)]\n    (let [name #?(:clj  (.getSimpleName ^Class x)\n                  ;; TODO: phantom generates invalid names\n                  :cljs (some-> x su/class-schema :klass pr-str (str/split \"/\") last))]\n      (s/named schema (str name \"Record\")))))\n\n(defn plain-map? [x]\n  (and (map? x)\n       (not (record? x))))\n\n(defn schema-name [schema opts]\n  (if-let [name (some->\n                  (or\n                    (:name opts)\n                    (s/schema-name schema)\n                    (if (instance? schema.core.NamedSchema schema)\n                      (:name schema)))\n                  (name))]\n    (let [ns (s/schema-ns schema)]\n      (if ns (str ns \"/\" name) name))))\n\n(defn key-name [x]\n  (if (keyword? x)\n    (let [n (namespace x)]\n      (str (if n (str n \"/\")) (name x)))\n    x))\n\n(defn assoc-collection-format [m {:keys [in] :as options}]\n  (cond-> m\n          (#{:query :formData} in)\n          (assoc :collectionFormat (:collection-format options \"multi\"))))\n\n(defn not-supported! [schema]\n  (throw\n    (ex-info\n      (str \"don't know how to convert \" schema \" into a Swagger Schema. \")\n      {:schema schema})))\n\n(defn maybe? [schema]\n  (instance? schema.core.Maybe schema))\n\n#_(defn reference? [m]\n    (contains? m :$ref))\n\n#_(defn reference [e {:keys [ignore-missing-mappings?]}]\n    (if-let [schema-name (s/schema-name e)]\n      {:$ref (str \"#/definitions/\" schema-name)}\n      (if-not ignore-missing-mappings?\n        (not-supported! e))))\n\n(defn- collection-schema [e options]\n  (-> {:type \"array\"\n       :items (transform (first e) (assoc options ::no-meta true))}\n      (assoc-collection-format options)))\n\n(defn properties [schema opts]\n  (some->> (for [[k v] schema\n                 :when (s/specific-key? k)\n                 :let [v (transform v opts)]]\n             (and v [(key-name (s/explicit-schema-key k)) v]))\n           (seq) (into (empty schema))))\n\n(defn additional-properties [schema]\n  (if-let [extra-key (s/find-extra-keys-schema schema)]\n    (let [v (get schema extra-key)]\n      (transform v nil))\n    false))\n\n(defn object-schema [this opts]\n  (if (plain-map? this)\n    (remove-empty-keys\n      {:type \"object\"\n       :title (schema-name this opts)\n       :properties (properties this opts)\n       :additionalProperties (additional-properties this)\n       :required (some->> (filterv s/required-key? (keys this)) seq (mapv key-name))})))\n\n;;\n;; transformations\n;;\n\n(defmulti transform-pred (fn [this _] this) :default ::default)\n(defmethod transform-pred string? [_ _] {:type \"string\"})\n(defmethod transform-pred integer? [_ _] {:type \"integer\" :format \"int32\"})\n(defmethod transform-pred keyword? [_ _] {:type \"string\"})\n(defmethod transform-pred symbol? [_ _] {:type \"string\"})\n\n(defmethod transform-pred ::default [e {:keys [ignore-missing-mappings?]}]\n  (if-not ignore-missing-mappings?\n    (not-supported! e)))\n\n(defmulti transform-type (fn [c _] c) :default ::default)\n\n(defmethod transform-type #?(:clj  java.lang.Boolean,\n                             :cljs js/Boolean) [_ _] {:type \"boolean\"})\n(defmethod transform-type #?(:clj  java.lang.Number,\n                             :cljs js/Number) [_ _] {:type \"number\" :format \"double\"})\n(defmethod transform-type #?(:clj  clojure.lang.Keyword,\n                             :cljs cljs.core.Keyword) [_ _] {:type \"string\"})\n(defmethod transform-type #?(:clj  java.util.Date,\n                             :cljs js/Date) [_ _] {:type \"string\" :format \"date-time\"})\n(defmethod transform-type #?(:clj  java.util.UUID,\n                             :cljs cljs.core/UUID) [_ _] {:type \"string\" :format \"uuid\"})\n(defmethod transform-type #?(:clj  java.util.regex.Pattern\n                             :cljs schema.core.Regex) [_ _] {:type \"string\" :format \"regex\"})\n(defmethod transform-type #?(:clj  String,\n                             :cljs js/String) [_ _] {:type \"string\"})\n\n#?(:clj (defmethod transform-type clojure.lang.Symbol [_ _] {:type \"string\"}))\n#?(:clj (defmethod transform-type java.time.Instant [_ _] {:type \"string\" :format \"date-time\"}))\n#?(:clj (defmethod transform-type java.time.LocalDate [_ _] {:type \"string\" :format \"date\"}))\n#?(:clj (defmethod transform-type java.time.LocalTime [_ _] {:type \"string\" :format \"time\"}))\n#?(:clj (defmethod transform-type java.io.File [_ _] {:type \"file\"}))\n#?(:clj (defmethod transform-type java.lang.Integer [_ _] {:type \"integer\" :format \"int32\"}))\n#?(:clj (defmethod transform-type java.lang.Long [_ _] {:type \"integer\" :format \"int64\"}))\n#?(:clj (defmethod transform-type java.lang.Double [_ _] {:type \"number\" :format \"double\"}))\n\n#?(:cljs (defmethod transform-type goog.date.Date [_ _] {:type \"string\" :format \"date\"}))\n#?(:cljs (defmethod transform-type goog.date.UtcDateTime [_ _] {:type \"string\" :format \"date-time\"}))\n\n(defmethod transform-type ::default [e {:keys [ignore-missing-mappings?]}]\n  (if-not ignore-missing-mappings?\n    (not-supported! e)))\n\n(defprotocol SwaggerSchema\n  (-transform [this opts]))\n\n(defn transform [schema opts]\n  (if (satisfies? SwaggerSchema schema)\n    (-transform schema opts)\n    (if-let [rschema (record-schema schema)]\n      (transform rschema opts)\n      (transform-type schema opts))))\n\n(extend-protocol SwaggerSchema\n\n  nil\n  (-transform [_ _])\n\n  schema_tools.core.Schema\n  (-transform [{:keys [schema data]} opts]\n    (merge\n      (transform schema (merge opts (select-keys data [:name :description])))\n      (impl/unlift-keys data \"swagger\")))\n\n  #?(:clj  java.util.regex.Pattern\n     :cljs js/RegExp)\n  (-transform [this _]\n    {:type \"string\" :pattern (str #?(:clj  this\n                                     :cljs (.-source this)))})\n\n  schema.core.Both\n  (-transform [this options]\n    (transform (first (:schemas this)) options))\n\n  schema.core.Predicate\n  (-transform [this options]\n    (transform-pred (:p? this) options))\n\n  schema.core.EnumSchema\n  (-transform [this options]\n    (assoc (transform (type (first (:vs this))) options) :enum (:vs this)))\n\n  schema.core.Maybe\n  (-transform [e {:keys [in] :as opts}]\n    (let [schema (transform (:schema e) opts)]\n      (condp contains? in\n        #{:query :formData} (assoc schema :allowEmptyValue true)\n        #{nil :body} (assoc schema :x-nullable true)\n        schema)))\n\n  schema.core.Either\n  (-transform [this opts]\n    (transform (first (:schemas this)) opts))\n\n  #_#_schema.core.Recursive\n      (-transform [this opts]\n                  (transform (:derefable this) opts))\n\n  schema.core.EqSchema\n  (-transform [this opts]\n    (transform (type (:v this)) opts))\n\n  schema.core.One\n  (-transform [this opts]\n    (transform (:schema this) opts))\n\n  schema.core.AnythingSchema\n  (-transform [_ {:keys [in] :as opts}]\n    (if (and in (not= :body in))\n      (transform (s/maybe s/Str) opts)\n      {}))\n\n  schema.core.ConditionalSchema\n  (-transform [this opts]\n    {:x-oneOf (vec (keep (comp #(transform % opts) second) (:preds-and-schemas this)))})\n\n  schema.core.CondPre\n  (-transform [this opts]\n    {:x-oneOf (mapv #(transform % opts) (:schemas this))})\n\n  schema.core.Constrained\n  (-transform [this opts]\n    (transform (:schema this) opts))\n\n  schema.core.NamedSchema\n  (-transform [{:keys [schema name]} opts]\n    (transform schema (assoc opts :name name)))\n\n  #?(:clj  clojure.lang.Sequential\n     :cljs cljs.core/List)\n  (-transform [this options]\n    (collection-schema this options))\n\n  #?(:clj  clojure.lang.IPersistentSet\n     :cljs cljs.core/PersistentHashSet)\n  (-transform [this options]\n    (assoc (collection-schema this options) :uniqueItems true))\n\n  #?(:clj  clojure.lang.APersistentVector\n     :cljs cljs.core.PersistentVector)\n  (-transform [this options]\n    (collection-schema this options))\n\n  #?(:clj  clojure.lang.PersistentArrayMap\n     :cljs cljs.core.PersistentArrayMap)\n  (-transform [this opts]\n    (object-schema this opts))\n\n  #?(:clj  clojure.lang.PersistentHashMap\n     :cljs cljs.core.PersistentHashMap)\n  (-transform [this opts]\n    (object-schema this opts)))\n\n;;\n;; extract swagger2 parameters\n;;\n\n(defmulti extract-parameter (fn [in _] in))\n\n(defmethod extract-parameter :body [_ schema]\n  (let [swagger (transform schema {:in :body, :type :parameter})]\n    [{:in \"body\"\n      :name (or (schema-name schema nil) \"body\")\n      :description \"\"\n      :required (not (maybe? schema))\n      :schema swagger}]))\n\n(defmethod extract-parameter :default [in schema]\n  (let [{:keys [properties required]} (transform schema {:in in, :type :parameter})]\n    (mapv\n      (fn [[k {:keys [type] :as swagger}]]\n        (merge\n          {:in (name in)\n           :name (key-name k)\n           :description \"\"\n           :type type\n           :required (contains? (set required) k)}\n          swagger))\n      properties)))\n\n;;\n;; expand the spec\n;;\n\n(defmulti expand (fn [k _ _ _] k))\n\n(defmethod expand ::responses [_ v acc _]\n  {:responses\n   (into\n     (or (:responses acc) {})\n     (for [[status response] v]\n       [status (-> response\n                   (update :schema transform {:type :schema})\n                   (update :description (fnil identity \"\"))\n                   (remove-empty-keys))]))})\n\n(defmethod expand ::parameters [_ v acc _]\n  (let [old (or (:parameters acc) [])\n        new (mapcat (fn [[in spec]] (extract-parameter in spec)) v)\n        merged (->> (into old new)\n                    (reverse)\n                    (reduce\n                      (fn [[ps cache :as acc] p]\n                        (let [c (select-keys p [:in :name])]\n                          (if-not (cache c)\n                            [(conj ps p) (conj cache c)]\n                            acc)))\n                      [[] #{}])\n                    (first)\n                    (reverse)\n                    (vec))]\n    {:parameters merged}))\n\n(defn expand-qualified-keywords [x options]\n  (let [accept? (set (keys (methods expand)))]\n    (walk/postwalk\n      (fn [x]\n        (if (plain-map? x)\n          (reduce-kv\n            (fn [acc k v]\n              (if (accept? k)\n                (-> acc (dissoc k) (merge (expand k v acc options)))\n                acc))\n            x\n            x)\n          x))\n      x)))\n\n;;\n;; generate the swagger spec\n;;\n\n(defn swagger-spec\n  \"Transforms data into a swagger2 spec. Input data must conform\n  to the Swagger2 Spec (http://swagger.io/specification/) with a\n  exception that it can have any qualified keywords that are expanded\n  with the `schema-tools.swagger.core/expand` multimethod.\"\n  ([x]\n   (swagger-spec x nil))\n  ([x options]\n   (expand-qualified-keywords x options)))\n"]}