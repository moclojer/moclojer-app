shadow$provide.module$node_modules$graphql$type$assertName=function(global,require,module,exports){function assertName(name){null!=name||(0,_devAssert.devAssert)(!1,"Must provide name.");"string"===typeof name||(0,_devAssert.devAssert)(!1,"Expected name to be a string.");if(0===name.length)throw new _GraphQLError.GraphQLError("Expected name to be a non-empty string.");for(let i=1;i<name.length;++i)if(!(0,_characterClasses.isNameContinue)(name.charCodeAt(i)))throw new _GraphQLError.GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${name}" does not.`);
if(!(0,_characterClasses.isNameStart)(name.charCodeAt(0)))throw new _GraphQLError.GraphQLError(`Names must start with [_a-zA-Z] but "${name}" does not.`);return name}Object.defineProperty(exports,"__esModule",{value:!0});exports.assertEnumValueName=function(name){if("true"===name||"false"===name||"null"===name)throw new _GraphQLError.GraphQLError(`Enum values cannot be named: ${name}`);return assertName(name)};exports.assertName=assertName;var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),
_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_characterClasses=require("module$node_modules$graphql$language$characterClasses")}
//# sourceMappingURL=module$node_modules$graphql$type$assertName.js.map
