shadow$provide.module$node_modules$graphql$utilities$findBreakingChanges=function(global,require,module,exports){function findSchemaChanges(oldSchema,newSchema){var schemaChanges=[],typesDiff=diff(Object.values(oldSchema.getTypeMap()),Object.values(newSchema.getTypeMap()));for(var oldType$jscomp$0 of typesDiff.removed)schemaChanges.push({type:BreakingChangeType.TYPE_REMOVED,description:(0,_scalars.isSpecifiedScalarType)(oldType$jscomp$0)?`Standard scalar ${oldType$jscomp$0.name} was removed because it is not referenced anymore.`:
`${oldType$jscomp$0.name} was removed.`});for(const [oldType,newType]of typesDiff.persisted)if((0,_definition.isEnumType)(oldType)&&(0,_definition.isEnumType)(newType)){typesDiff=schemaChanges;oldType$jscomp$0=typesDiff.push;var oldType$jscomp$1=oldType,newType$jscomp$0=newType,schemaChanges$jscomp$0=[];newType$jscomp$0=diff(oldType$jscomp$1.getValues(),newType$jscomp$0.getValues());for(var newValue of newType$jscomp$0.added)schemaChanges$jscomp$0.push({type:DangerousChangeType.VALUE_ADDED_TO_ENUM,
description:`${newValue.name} was added to enum type ${oldType$jscomp$1.name}.`});for(const oldValue of newType$jscomp$0.removed)schemaChanges$jscomp$0.push({type:BreakingChangeType.VALUE_REMOVED_FROM_ENUM,description:`${oldValue.name} was removed from enum type ${oldType$jscomp$1.name}.`});oldType$jscomp$0.call(typesDiff,...schemaChanges$jscomp$0)}else if((0,_definition.isUnionType)(oldType)&&(0,_definition.isUnionType)(newType)){typesDiff=schemaChanges;oldType$jscomp$0=typesDiff.push;oldType$jscomp$1=
oldType;newType$jscomp$0=newType;schemaChanges$jscomp$0=[];newType$jscomp$0=diff(oldType$jscomp$1.getTypes(),newType$jscomp$0.getTypes());for(const newPossibleType of newType$jscomp$0.added)schemaChanges$jscomp$0.push({type:DangerousChangeType.TYPE_ADDED_TO_UNION,description:`${newPossibleType.name} was added to union type ${oldType$jscomp$1.name}.`});for(const oldPossibleType of newType$jscomp$0.removed)schemaChanges$jscomp$0.push({type:BreakingChangeType.TYPE_REMOVED_FROM_UNION,description:`${oldPossibleType.name} was removed from union type ${oldType$jscomp$1.name}.`});
oldType$jscomp$0.call(typesDiff,...schemaChanges$jscomp$0)}else if((0,_definition.isInputObjectType)(oldType)&&(0,_definition.isInputObjectType)(newType)){typesDiff=schemaChanges;oldType$jscomp$0=typesDiff.push;oldType$jscomp$1=oldType;newType$jscomp$0=newType;schemaChanges$jscomp$0=[];newType$jscomp$0=diff(Object.values(oldType$jscomp$1.getFields()),Object.values(newType$jscomp$0.getFields()));for(const newField of newType$jscomp$0.added)(0,_definition.isRequiredInputField)(newField)?schemaChanges$jscomp$0.push({type:BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
description:`A required field ${newField.name} on input type ${oldType$jscomp$1.name} was added.`}):schemaChanges$jscomp$0.push({type:DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,description:`An optional field ${newField.name} on input type ${oldType$jscomp$1.name} was added.`});for(const oldField of newType$jscomp$0.removed)schemaChanges$jscomp$0.push({type:BreakingChangeType.FIELD_REMOVED,description:`${oldType$jscomp$1.name}.${oldField.name} was removed.`});for(const [oldField,newField]of newType$jscomp$0.persisted)isChangeSafeForInputObjectFieldOrFieldArg(oldField.type,
newField.type)||schemaChanges$jscomp$0.push({type:BreakingChangeType.FIELD_CHANGED_KIND,description:`${oldType$jscomp$1.name}.${oldField.name} changed type from `+`${String(oldField.type)} to ${String(newField.type)}.`});oldType$jscomp$0.call(typesDiff,...schemaChanges$jscomp$0)}else(0,_definition.isObjectType)(oldType)&&(0,_definition.isObjectType)(newType)?schemaChanges.push(...findFieldChanges(oldType,newType),...findImplementedInterfacesChanges(oldType,newType)):(0,_definition.isInterfaceType)(oldType)&&
(0,_definition.isInterfaceType)(newType)?schemaChanges.push(...findFieldChanges(oldType,newType),...findImplementedInterfacesChanges(oldType,newType)):oldType.constructor!==newType.constructor&&schemaChanges.push({type:BreakingChangeType.TYPE_CHANGED_KIND,description:`${oldType.name} changed from `+`${typeKindName(oldType)} to ${typeKindName(newType)}.`});schemaChanges=[...schemaChanges];newValue=[];oldSchema=diff(oldSchema.getDirectives(),newSchema.getDirectives());for(var oldDirective$jscomp$0 of oldSchema.removed)newValue.push({type:BreakingChangeType.DIRECTIVE_REMOVED,
description:`${oldDirective$jscomp$0.name} was removed.`});for(const [oldDirective,newDirective]of oldSchema.persisted){oldDirective$jscomp$0=diff(oldDirective.args,newDirective.args);for(const newArg of oldDirective$jscomp$0.added)(0,_definition.isRequiredArgument)(newArg)&&newValue.push({type:BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,description:`A required arg ${newArg.name} on directive ${oldDirective.name} was added.`});for(const oldArg of oldDirective$jscomp$0.removed)newValue.push({type:BreakingChangeType.DIRECTIVE_ARG_REMOVED,
description:`${oldArg.name} was removed from ${oldDirective.name}.`});oldDirective.isRepeatable&&!newDirective.isRepeatable&&newValue.push({type:BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,description:`Repeatable flag was removed from ${oldDirective.name}.`});for(const location of oldDirective.locations)newDirective.locations.includes(location)||newValue.push({type:BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,description:`${location} was removed from ${oldDirective.name}.`})}return[...schemaChanges,
...newValue]}function findImplementedInterfacesChanges(oldType,newType){const schemaChanges=[];newType=diff(oldType.getInterfaces(),newType.getInterfaces());for(const newInterface of newType.added)schemaChanges.push({type:DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,description:`${newInterface.name} added to interfaces implemented by ${oldType.name}.`});for(const oldInterface of newType.removed)schemaChanges.push({type:BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,description:`${oldType.name} no longer implements interface ${oldInterface.name}.`});
return schemaChanges}function findFieldChanges(oldType$jscomp$0,newType){const schemaChanges$jscomp$0=[];newType=diff(Object.values(oldType$jscomp$0.getFields()),Object.values(newType.getFields()));for(var oldField$jscomp$0 of newType.removed)schemaChanges$jscomp$0.push({type:BreakingChangeType.FIELD_REMOVED,description:`${oldType$jscomp$0.name}.${oldField$jscomp$0.name} was removed.`});for(const [oldField,newField]of newType.persisted){oldField$jscomp$0=schemaChanges$jscomp$0;newType=oldField$jscomp$0.push;
var oldType=oldType$jscomp$0,oldField$jscomp$1=oldField;const schemaChanges=[],argsDiff=diff(oldField$jscomp$1.args,newField.args);for(const oldArg of argsDiff.removed)schemaChanges.push({type:BreakingChangeType.ARG_REMOVED,description:`${oldType.name}.${oldField$jscomp$1.name} arg ${oldArg.name} was removed.`});for(const [oldArg,newArg]of argsDiff.persisted)if(!isChangeSafeForInputObjectFieldOrFieldArg(oldArg.type,newArg.type))schemaChanges.push({type:BreakingChangeType.ARG_CHANGED_KIND,description:`${oldType.name}.${oldField$jscomp$1.name} arg ${oldArg.name} has changed type from `+
`${String(oldArg.type)} to ${String(newArg.type)}.`});else if(void 0!==oldArg.defaultValue)if(void 0===newArg.defaultValue)schemaChanges.push({type:DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,description:`${oldType.name}.${oldField$jscomp$1.name} arg ${oldArg.name} defaultValue was removed.`});else{const oldValueStr=stringifyValue(oldArg.defaultValue,oldArg.type),newValueStr=stringifyValue(newArg.defaultValue,newArg.type);oldValueStr!==newValueStr&&schemaChanges.push({type:DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
description:`${oldType.name}.${oldField$jscomp$1.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`})}for(const newArg of argsDiff.added)(0,_definition.isRequiredArgument)(newArg)?schemaChanges.push({type:BreakingChangeType.REQUIRED_ARG_ADDED,description:`A required arg ${newArg.name} on ${oldType.name}.${oldField$jscomp$1.name} was added.`}):schemaChanges.push({type:DangerousChangeType.OPTIONAL_ARG_ADDED,description:`An optional arg ${newArg.name} on ${oldType.name}.${oldField$jscomp$1.name} was added.`});
newType.call(oldField$jscomp$0,...schemaChanges);isChangeSafeForObjectOrInterfaceField(oldField.type,newField.type)||schemaChanges$jscomp$0.push({type:BreakingChangeType.FIELD_CHANGED_KIND,description:`${oldType$jscomp$0.name}.${oldField.name} changed type from `+`${String(oldField.type)} to ${String(newField.type)}.`})}return schemaChanges$jscomp$0}function isChangeSafeForObjectOrInterfaceField(oldType,newType){return(0,_definition.isListType)(oldType)?(0,_definition.isListType)(newType)&&isChangeSafeForObjectOrInterfaceField(oldType.ofType,
newType.ofType)||(0,_definition.isNonNullType)(newType)&&isChangeSafeForObjectOrInterfaceField(oldType,newType.ofType):(0,_definition.isNonNullType)(oldType)?(0,_definition.isNonNullType)(newType)&&isChangeSafeForObjectOrInterfaceField(oldType.ofType,newType.ofType):(0,_definition.isNamedType)(newType)&&oldType.name===newType.name||(0,_definition.isNonNullType)(newType)&&isChangeSafeForObjectOrInterfaceField(oldType,newType.ofType)}function isChangeSafeForInputObjectFieldOrFieldArg(oldType,newType){return(0,_definition.isListType)(oldType)?
(0,_definition.isListType)(newType)&&isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType,newType.ofType):(0,_definition.isNonNullType)(oldType)?(0,_definition.isNonNullType)(newType)&&isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType,newType.ofType)||!(0,_definition.isNonNullType)(newType)&&isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType,newType):(0,_definition.isNamedType)(newType)&&oldType.name===newType.name}function typeKindName(type){if((0,_definition.isScalarType)(type))return"a Scalar type";
if((0,_definition.isObjectType)(type))return"an Object type";if((0,_definition.isInterfaceType)(type))return"an Interface type";if((0,_definition.isUnionType)(type))return"a Union type";if((0,_definition.isEnumType)(type))return"an Enum type";if((0,_definition.isInputObjectType)(type))return"an Input type";(0,_invariant.invariant)(!1,"Unexpected type: "+(0,_inspect.inspect)(type))}function stringifyValue(value,type){value=(0,_astFromValue.astFromValue)(value,type);null!=value||(0,_invariant.invariant)(!1);
return(0,_printer.print)((0,_sortValueNode.sortValueNode)(value))}function diff(oldArray,newArray){const added=[],removed=[],persisted=[],oldMap=(0,_keyMap.keyMap)(oldArray,({name})=>name),newMap=(0,_keyMap.keyMap)(newArray,({name})=>name);for(const oldItem of oldArray)oldArray=newMap[oldItem.name],void 0===oldArray?removed.push(oldItem):persisted.push([oldItem,oldArray]);for(const newItem of newArray)void 0===oldMap[newItem.name]&&added.push(newItem);return{added,persisted,removed}}Object.defineProperty(exports,
"__esModule",{value:!0});exports.DangerousChangeType=exports.BreakingChangeType=void 0;exports.findBreakingChanges=function(oldSchema,newSchema){return findSchemaChanges(oldSchema,newSchema).filter(change=>change.type in BreakingChangeType)};exports.findDangerousChanges=function(oldSchema,newSchema){return findSchemaChanges(oldSchema,newSchema).filter(change=>change.type in DangerousChangeType)};var _inspect=require("module$node_modules$graphql$jsutils$inspect"),_invariant=require("module$node_modules$graphql$jsutils$invariant"),
_keyMap=require("module$node_modules$graphql$jsutils$keyMap"),_printer=require("module$node_modules$graphql$language$printer"),_definition=require("module$node_modules$graphql$type$definition"),_scalars=require("module$node_modules$graphql$type$scalars"),_astFromValue=require("module$node_modules$graphql$utilities$astFromValue"),_sortValueNode=require("module$node_modules$graphql$utilities$sortValueNode"),BreakingChangeType;exports.BreakingChangeType=BreakingChangeType;(function(BreakingChangeType){BreakingChangeType.TYPE_REMOVED=
"TYPE_REMOVED";BreakingChangeType.TYPE_CHANGED_KIND="TYPE_CHANGED_KIND";BreakingChangeType.TYPE_REMOVED_FROM_UNION="TYPE_REMOVED_FROM_UNION";BreakingChangeType.VALUE_REMOVED_FROM_ENUM="VALUE_REMOVED_FROM_ENUM";BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED="REQUIRED_INPUT_FIELD_ADDED";BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED="IMPLEMENTED_INTERFACE_REMOVED";BreakingChangeType.FIELD_REMOVED="FIELD_REMOVED";BreakingChangeType.FIELD_CHANGED_KIND="FIELD_CHANGED_KIND";BreakingChangeType.REQUIRED_ARG_ADDED=
"REQUIRED_ARG_ADDED";BreakingChangeType.ARG_REMOVED="ARG_REMOVED";BreakingChangeType.ARG_CHANGED_KIND="ARG_CHANGED_KIND";BreakingChangeType.DIRECTIVE_REMOVED="DIRECTIVE_REMOVED";BreakingChangeType.DIRECTIVE_ARG_REMOVED="DIRECTIVE_ARG_REMOVED";BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED="REQUIRED_DIRECTIVE_ARG_ADDED";BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED="DIRECTIVE_REPEATABLE_REMOVED";BreakingChangeType.DIRECTIVE_LOCATION_REMOVED="DIRECTIVE_LOCATION_REMOVED"})(BreakingChangeType||(exports.BreakingChangeType=
BreakingChangeType={}));var DangerousChangeType;exports.DangerousChangeType=DangerousChangeType;(function(DangerousChangeType){DangerousChangeType.VALUE_ADDED_TO_ENUM="VALUE_ADDED_TO_ENUM";DangerousChangeType.TYPE_ADDED_TO_UNION="TYPE_ADDED_TO_UNION";DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED="OPTIONAL_INPUT_FIELD_ADDED";DangerousChangeType.OPTIONAL_ARG_ADDED="OPTIONAL_ARG_ADDED";DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED="IMPLEMENTED_INTERFACE_ADDED";DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE=
"ARG_DEFAULT_VALUE_CHANGE"})(DangerousChangeType||(exports.DangerousChangeType=DangerousChangeType={}))}
//# sourceMappingURL=module$node_modules$graphql$utilities$findBreakingChanges.js.map
