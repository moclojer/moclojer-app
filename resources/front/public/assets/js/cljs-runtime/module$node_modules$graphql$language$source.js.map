{
"version":3,
"file":"module$node_modules$graphql$language$source.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,MAAR,CAAiB,IAAK,EACtBJ,QAAQK,CAAAA,QAAR,CAwDAA,QAAiB,CAACC,MAAD,CAAS,CACxB,MAAO,GAAIC,WAAYC,CAAAA,UAAhB,EAA4BF,MAA5B,CAAoCF,MAApC,CADiB,CAtD1B,KAAIK,WAAaX,OAAA,CAAQ,+CAAR,CAAjB,CAEIY,SAAWZ,OAAA,CAAQ,6CAAR,CAFf,CAIIS,YAAcT,OAAA,CAAQ,gDAAR,CASlB,MAAMM,OAAN,CACEO,WAAW,CACTC,IADS,CAETC,IAAA,CAAO,iBAFE;AAGTC,cAAA,CAAiB,CACfC,KAAM,CADS,CAEfC,OAAQ,CAFO,CAHR,CAOT,CACgB,QAAhB,GAAA,MAAOJ,KAAP,EACE,GAAIH,UAAWQ,CAAAA,SAAf,EACE,CAAA,CADF,CAEG,oCAAmC,GAAIP,QAASQ,CAAAA,OAAb,EAAsBN,IAAtB,CAAnC,GAFH,CAIF,KAAKA,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,cAAL,CAAsBA,cACK,EAA3B,CAAA,IAAKA,CAAAA,cAAeC,CAAAA,IAApB,EACE,GAAIN,UAAWQ,CAAAA,SAAf,EACE,CAAA,CADF,CAEE,2DAFF,CAI2B,EAA7B,CAAA,IAAKH,CAAAA,cAAeE,CAAAA,MAApB,EACE,GAAIP,UAAWQ,CAAAA,SAAf,EACE,CAAA,CADF,CAEE,6DAFF,CAfF,CAqBF,KAAKE,MAAOC,CAAAA,WAAZ,CAA2B,EAAA,CACzB,MAAO,QADkB,CA7B7B,CAuCApB,OAAQI,CAAAA,MAAR;AAAiBA,MA7DuF;",
"sources":["node_modules/graphql/language/source.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$source\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.Source = void 0;\nexports.isSource = isSource;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _instanceOf = require('../jsutils/instanceOf.js');\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nclass Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`,\n      );\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      (0, _devAssert.devAssert)(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      (0, _devAssert.devAssert)(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexports.Source = Source;\n\nfunction isSource(source) {\n  return (0, _instanceOf.instanceOf)(source, Source);\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Source","isSource","source","_instanceOf","instanceOf","_devAssert","_inspect","constructor","body","name","locationOffset","line","column","devAssert","inspect","Symbol","toStringTag"]
}
