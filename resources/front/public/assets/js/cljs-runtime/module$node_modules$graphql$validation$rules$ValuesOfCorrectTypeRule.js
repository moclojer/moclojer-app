shadow$provide.module$node_modules$graphql$validation$rules$ValuesOfCorrectTypeRule=function(global,require,module,exports){function isValidValueNode(context,node){var locationType=context.getInputType();if(locationType){var type=(0,_definition.getNamedType)(locationType);if((0,_definition.isLeafType)(type))try{if(void 0===type.parseLiteral(node,void 0)){const typeStr=(0,_inspect.inspect)(locationType);context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${typeStr}", found ${(0,_printer.print)(node)}.`,
{nodes:node}))}}catch(error){locationType=(0,_inspect.inspect)(locationType),error instanceof _GraphQLError.GraphQLError?context.reportError(error):context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${locationType}", found ${(0,_printer.print)(node)}; `+error.message,{nodes:node,originalError:error}))}else locationType=(0,_inspect.inspect)(locationType),context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${locationType}", found ${(0,_printer.print)(node)}.`,
{nodes:node}))}}Object.defineProperty(exports,"__esModule",{value:!0});exports.ValuesOfCorrectTypeRule=function(context){return{ListValue(node){const type=(0,_definition.getNullableType)(context.getParentInputType());if(!(0,_definition.isListType)(type))return isValidValueNode(context,node),!1},ObjectValue(node){const type=(0,_definition.getNamedType)(context.getInputType());if(!(0,_definition.isInputObjectType)(type))return isValidValueNode(context,node),!1;const fieldNodeMap=(0,_keyMap.keyMap)(node.fields,
field=>field.name.value);for(const fieldDef of Object.values(type.getFields()))if(!fieldNodeMap[fieldDef.name]&&(0,_definition.isRequiredInputField)(fieldDef)){const typeStr=(0,_inspect.inspect)(fieldDef.type);context.reportError(new _GraphQLError.GraphQLError(`Field "${type.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`,{nodes:node}))}},ObjectField(node){const parentType=(0,_definition.getNamedType)(context.getParentInputType());if(!context.getInputType()&&(0,_definition.isInputObjectType)(parentType)){const suggestions=
(0,_suggestionList.suggestionList)(node.name.value,Object.keys(parentType.getFields()));context.reportError(new _GraphQLError.GraphQLError(`Field "${node.name.value}" is not defined by type "${parentType.name}".`+(0,_didYouMean.didYouMean)(suggestions),{nodes:node}))}},NullValue(node){const type=context.getInputType();(0,_definition.isNonNullType)(type)&&context.reportError(new _GraphQLError.GraphQLError(`Expected value of type "${(0,_inspect.inspect)(type)}", found ${(0,_printer.print)(node)}.`,
{nodes:node}))},EnumValue:node=>isValidValueNode(context,node),IntValue:node=>isValidValueNode(context,node),FloatValue:node=>isValidValueNode(context,node),StringValue:node=>isValidValueNode(context,node),BooleanValue:node=>isValidValueNode(context,node)}};var _didYouMean=require("module$node_modules$graphql$jsutils$didYouMean"),_inspect=require("module$node_modules$graphql$jsutils$inspect"),_keyMap=require("module$node_modules$graphql$jsutils$keyMap"),_suggestionList=require("module$node_modules$graphql$jsutils$suggestionList"),
_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_printer=require("module$node_modules$graphql$language$printer"),_definition=require("module$node_modules$graphql$type$definition")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$ValuesOfCorrectTypeRule.js.map
