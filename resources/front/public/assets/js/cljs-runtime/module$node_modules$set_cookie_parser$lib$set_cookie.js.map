{
"version":3,
"file":"module$node_modules$set_cookie_parser$lib$set_cookie.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/set-cookie-parser/lib/set-cookie.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$set_cookie_parser$lib$set_cookie\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name,\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return { name: name, value: value };\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers && input.headers[\"set-cookie\"]) {\n    // fast-path for node.js (which automatically normalizes header names to lower-case\n    input = input.headers[\"set-cookie\"];\n  } else if (input.headers) {\n    // slow-path for other environments - see #25\n    var sch =\n      input.headers[\n        Object.keys(input.headers).find(function (key) {\n          return key.toLowerCase() === \"set-cookie\";\n        })\n      ];\n    // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n    if (!sch && input.headers.cookie && !options.silent) {\n      console.warn(\n        \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n      );\n    }\n    input = sch;\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n\n};"],
"names":["shadow$provide","global","require","module","exports","isNonEmptyString","str","trim","parseString","setCookieValue","options","parts","split","filter","nameValuePairStr","shift","parsed","parseNameValuePair","name","value","Object","assign","defaultParseOptions","decodeValues","decodeURIComponent","e","console","error","cookie","forEach","part","sides","key","trimLeft","toLowerCase","join","expires","Date","maxAge","parseInt","secure","httpOnly","sameSite","nameValueArr","length","parse","input","map","headers","sch","keys","find","silent","warn","Array","isArray","reduce","cookies","splitCookiesString","cookiesString","skipWhitespace","pos","test","charAt","notSpecialChar","ch","cookiesStrings","start","lastComma","nextStart","cookiesSeparatorFound","push","substring"]
}
