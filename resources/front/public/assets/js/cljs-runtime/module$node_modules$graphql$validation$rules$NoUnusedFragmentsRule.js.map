{
"version":3,
"file":"module$node_modules$graphql$validation$rules$NoUnusedFragmentsRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAYAA,QAA8B,CAACC,OAAD,CAAU,CACtC,MAAMC,cAAgB,EAAtB,CACMC,aAAe,EACrB,OAAO,CACLC,mBAAmB,CAACC,IAAD,CAAO,CACxBH,aAAcI,CAAAA,IAAd,CAAmBD,IAAnB,CACA,OAAO,CAAA,CAFiB,CADrB,CAMLE,kBAAkB,CAACF,IAAD,CAAO,CACvBF,YAAaG,CAAAA,IAAb,CAAkBD,IAAlB,CACA,OAAO,CAAA,CAFgB,CANpB,CAWLG,SAAU,CACRC,KAAK,EAAG,CACN,MAAMC,iBAAmBb,MAAOc,CAAAA,MAAP,CAAc,IAAd,CAEzB,KAAK,IAAMC,SAAX,GAAwBV,cAAxB,CACE,IAAK,MAAMW,QAAX,GAAuBZ,QAAQa,CAAAA,iCAAR,CACrBF,SADqB,CAAvB,CAGEF,gBAAA,CAAiBG,QAASE,CAAAA,IAAKhB,CAAAA,KAA/B,CAAA;AAAwC,CAAA,CAI5C,KAAK,MAAMiB,WAAX,GAA0Bb,aAA1B,CACQc,SAEN,CAFiBD,WAAYD,CAAAA,IAAKhB,CAAAA,KAElC,CAAmC,CAAA,CAAnC,GAAIW,gBAAA,CAAiBO,SAAjB,CAAJ,EACEhB,OAAQiB,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,aAAYH,SAAZ,kBADH,CAEE,CACEI,MAAOL,WADT,CAFF,CADF,CAfE,CADA,CAXL,CAH+B,CAVxC,KAAIG,cAAgBzB,OAAA,CAAQ,gDAAR,CAR2G;",
"sources":["node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$NoUnusedFragmentsRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nfunction NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Fragment \"${fragName}\" is never used.`,\n                {\n                  nodes: fragmentDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","NoUnusedFragmentsRule","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","create","operation","fragment","getRecursivelyReferencedFragments","name","fragmentDef","fragName","reportError","_GraphQLError","GraphQLError","nodes"]
}
