{
"version":3,
"file":"module$node_modules$graphql$jsutils$suggestionList.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkI/GC,QAASA,cAAa,CAACC,GAAD,CAAM,CAC1B,MAAMC,UAAYD,GAAIE,CAAAA,MAAtB,CACMC,MAAYC,KAAJ,CAAUH,SAAV,CAEd,KAAK,IAAII,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,SAApB,CAA+B,EAAEI,CAAjC,CACEF,KAAA,CAAME,CAAN,CAAA,CAAWL,GAAIM,CAAAA,UAAJ,CAAeD,CAAf,CAGb,OAAOF,MARmB,CA/H5BI,MAAOC,CAAAA,cAAP,CAAsBV,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CW,MAAO,CAAA,CADoC,CAA7C,CAGAX,QAAQY,CAAAA,cAAR,CAQAA,QAAuB,CAACC,KAAD,CAAQC,OAAR,CAAiB,CACtC,MAAMC,kBAAoBN,MAAOO,CAAAA,MAAP,CAAc,IAAd,CAA1B,CACMC,gBAAkB,IAAIC,eAAJ,CAAoBL,KAApB,CAClBM,MAAAA,CAAYC,IAAKC,CAAAA,KAAL,CAA0B,EAA1B,CAAWR,KAAMT,CAAAA,MAAjB,CAAZe,CAA6C,CAEnD,KAAK,MAAMG,MAAX,GAAqBR,QAArB,CACQS,OAEN;AAFiBN,eAAgBO,CAAAA,OAAhB,CAAwBF,MAAxB,CAAgCH,KAAhC,CAEjB,CAAiBM,IAAAA,EAAjB,GAAIF,OAAJ,GACER,iBAAA,CAAkBO,MAAlB,CADF,CAC8BC,OAD9B,CAKF,OAAOd,OAAOiB,CAAAA,IAAP,CAAYX,iBAAZ,CAA+BY,CAAAA,IAA/B,CAAoC,CAACC,CAAD,CAAIC,CAAJ,CAAA,EAAU,CACnD,MAAMC,aAAef,iBAAA,CAAkBa,CAAlB,CAAfE,CAAsCf,iBAAA,CAAkBc,CAAlB,CAC5C,OAAwB,EAAjB,GAAAC,YAAA,CACHA,YADG,CAEH,GAAIC,eAAgBC,CAAAA,cAApB,EAAoCJ,CAApC,CAAuCC,CAAvC,CAJ+C,CAA9C,CAb+B,CANxC,KAAIE,gBAAkBjC,OAAA,CAAQ,oDAAR,CAyCtB,MAAMoB,gBAAN,CACEe,WAAW,CAACpB,KAAD,CAAQ,CACjB,IAAKqB,CAAAA,MAAL,CAAcrB,KACd,KAAKsB,CAAAA,eAAL,CAAuBtB,KAAMuB,CAAAA,WAAN,EACvB,KAAKC,CAAAA,WAAL,CAAmBpC,aAAA,CAAc,IAAKkC,CAAAA,eAAnB,CACnB;IAAKG,CAAAA,KAAL,CAAa,CACPhC,KAAJ,CAAUO,KAAMT,CAAAA,MAAhB,CAAyB,CAAzB,CAA4BmC,CAAAA,IAA5B,CAAiC,CAAjC,CADW,CAEPjC,KAAJ,CAAUO,KAAMT,CAAAA,MAAhB,CAAyB,CAAzB,CAA4BmC,CAAAA,IAA5B,CAAiC,CAAjC,CAFW,CAGPjC,KAAJ,CAAUO,KAAMT,CAAAA,MAAhB,CAAyB,CAAzB,CAA4BmC,CAAAA,IAA5B,CAAiC,CAAjC,CAHW,CAJI,CAWnBf,OAAO,CAACF,MAAD,CAASH,SAAT,CAAoB,CACzB,GAAI,IAAKe,CAAAA,MAAT,GAAoBZ,MAApB,CACE,MAAO,EAGHkB,OAAAA,CAAkBlB,MAAOc,CAAAA,WAAP,EAExB,IAAI,IAAKD,CAAAA,eAAT,GAA6BK,MAA7B,CACE,MAAO,EAGLZ,OAAAA,CAAI3B,aAAA,CAAcuC,MAAd,CACR,KAAIX,EAAI,IAAKQ,CAAAA,WAEb,IAAIT,MAAExB,CAAAA,MAAN,CAAeyB,CAAEzB,CAAAA,MAAjB,CAAyB,CACvB,IAAMqC,IAAMb,MACZA,OAAA,CAAIC,CACJA,EAAA,CAAIY,GAHmB,CAMnBC,GAAAA,CAAUd,MAAExB,CAAAA,MAClB,OAAMuC,QAAUd,CAAEzB,CAAAA,MAElB,IAAI,EAAAsC,GAAA,CAAUC,OAAV,CAAoBxB,SAApB,CAAJ,CAAA,CAIA,IAAMyB,KAAO,IAAKN,CAAAA,KAElB,KAAK,IAAIO,WAAI,CAAb,CAAgBA,UAAhB,EAAqBF,OAArB,CAA8BE,UAAA,EAA9B,CACED,IAAA,CAAK,CAAL,CAAA,CAAQC,UAAR,CAAA;AAAaA,UAGf,KAAStC,UAAT,CAAa,CAAb,CAAgBA,UAAhB,EAAqBmC,GAArB,CAA8BnC,UAAA,EAA9B,CAAmC,CACjC,MAAMuC,MAAQF,IAAA,EAAMrC,UAAN,CAAU,CAAV,EAAe,CAAf,CAAd,CACMwC,WAAaH,IAAA,CAAKrC,UAAL,CAAS,CAAT,CACnB,KAAIyC,aAAgBD,UAAA,CAAW,CAAX,CAAhBC,CAAgCzC,UAEpC,KAAK,IAAIsC,EAAI,CAAb,CAAgBA,CAAhB,EAAqBF,OAArB,CAA8BE,CAAA,EAA9B,CAAmC,CAEjC,IAAII,YAAc7B,IAAK8B,CAAAA,GAAL,CAChBJ,KAAA,CAAMD,CAAN,CADgB,CACL,CADK,CAEhBE,UAAA,CAAWF,CAAX,CAAe,CAAf,CAFgB,CAEI,CAFJ,CAGhBC,KAAA,CAAMD,CAAN,CAAU,CAAV,CAHgB,EADLjB,MAAA,CAAErB,UAAF,CAAM,CAAN,CAAA4C,GAAatB,CAAA,CAAEgB,CAAF,CAAM,CAAN,CAAbM,CAAwB,CAAxBA,CAA4B,CACvB,EAMV,EAAR,CAAI5C,UAAJ,EAAiB,CAAjB,CAAasC,CAAb,EAAsBjB,MAAA,CAAErB,UAAF,CAAM,CAAN,CAAtB,GAAmCsB,CAAA,CAAEgB,CAAF,CAAM,CAAN,CAAnC,EAA+CjB,MAAA,CAAErB,UAAF,CAAM,CAAN,CAA/C,GAA4DsB,CAAA,CAAEgB,CAAF,CAAM,CAAN,CAA5D,GAGEI,WAHF,CAGgB7B,IAAK8B,CAAAA,GAAL,CAASD,WAAT,CADaL,IAAA,EAAMrC,UAAN,CAAU,CAAV,EAAe,CAAf,CAAA6C,CAAkBP,CAAlBO,CAAsB,CAAtBA,CACb,CAA2C,CAA3C,CAHhB,CAMIH,YAAJ,CAAkBD,YAAlB,GACEA,YADF,CACiBC,WADjB,CAIAF,WAAA,CAAWF,CAAX,CAAA;AAAgBI,WAlBiB,CAqBnC,GAAID,YAAJ,CAAmB7B,SAAnB,CACE,MA3B+B,CA+B7BI,MAAAA,CAAWqB,IAAA,CAAKF,GAAL,CAAe,CAAf,CAAA,CAAkBC,OAAlB,CACjB,OAAOpB,OAAA,EAAYJ,SAAZ,CAAwBI,MAAxB,CAAmCE,IAAAA,EA1C1C,CAvByB,CAZ7B,CAjD+G;",
"sources":["node_modules/graphql/jsutils/suggestionList.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$jsutils$suggestionList\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.suggestionList = suggestionList;\n\nvar _naturalCompare = require('./naturalCompare.js');\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nfunction suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0\n      ? distanceDiff\n      : (0, _naturalCompare.naturalCompare)(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","stringToArray","str","strLength","length","array","Array","i","charCodeAt","Object","defineProperty","value","suggestionList","input","options","optionsByDistance","create","lexicalDistance","LexicalDistance","threshold","Math","floor","option","distance","measure","undefined","keys","sort","a","b","distanceDiff","_naturalCompare","naturalCompare","constructor","_input","_inputLowerCase","toLowerCase","_inputArray","_rows","fill","optionLowerCase","tmp","aLength","bLength","rows","j","upRow","currentRow","smallestCell","currentCell","min","cost","doubleDiagonalCell"]
}
