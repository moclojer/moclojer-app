shadow$provide.module$node_modules$graphql$type$directives=function(global,require,module,exports){function isDirective(directive){return(0,_instanceOf.instanceOf)(directive,GraphQLDirective)}Object.defineProperty(exports,"__esModule",{value:!0});exports.GraphQLSpecifiedByDirective=exports.GraphQLSkipDirective=exports.GraphQLIncludeDirective=exports.GraphQLDirective=exports.GraphQLDeprecatedDirective=exports.DEFAULT_DEPRECATION_REASON=void 0;exports.assertDirective=function(directive){if(!isDirective(directive))throw Error(`Expected ${(0,_inspect.inspect)(directive)} to be a GraphQL directive.`);
return directive};exports.isDirective=isDirective;exports.isSpecifiedDirective=function(directive){return specifiedDirectives.some(({name})=>name===directive.name)};exports.specifiedDirectives=void 0;var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),_inspect=require("module$node_modules$graphql$jsutils$inspect"),_instanceOf=require("module$node_modules$graphql$jsutils$instanceOf"),_isObjectLike=require("module$node_modules$graphql$jsutils$isObjectLike"),_toObjMap=require("module$node_modules$graphql$jsutils$toObjMap");
global=require("module$node_modules$graphql$language$directiveLocation");var _assertName=require("module$node_modules$graphql$type$assertName"),_definition=require("module$node_modules$graphql$type$definition"),_scalars=require("module$node_modules$graphql$type$scalars");class GraphQLDirective{constructor(config){var _config$isRepeatable,_config$args;this.name=(0,_assertName.assertName)(config.name);this.description=config.description;this.locations=config.locations;this.isRepeatable=null!==(_config$isRepeatable=
config.isRepeatable)&&void 0!==_config$isRepeatable?_config$isRepeatable:!1;this.extensions=(0,_toObjMap.toObjMap)(config.extensions);this.astNode=config.astNode;Array.isArray(config.locations)||(0,_devAssert.devAssert)(!1,`@${config.name} locations must be an Array.`);_config$isRepeatable=null!==(_config$args=config.args)&&void 0!==_config$args?_config$args:{};(0,_isObjectLike.isObjectLike)(_config$isRepeatable)&&!Array.isArray(_config$isRepeatable)||(0,_devAssert.devAssert)(!1,`@${config.name} args must be an object with argument names as keys.`);
this.args=(0,_definition.defineArguments)(_config$isRepeatable)}get [Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:(0,_definition.argsToArgsConfig)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}exports.GraphQLDirective=GraphQLDirective;require=new GraphQLDirective({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",
locations:[global.DirectiveLocation.FIELD,global.DirectiveLocation.FRAGMENT_SPREAD,global.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),description:"Included when true."}}});exports.GraphQLIncludeDirective=require;module=new GraphQLDirective({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[global.DirectiveLocation.FIELD,global.DirectiveLocation.FRAGMENT_SPREAD,global.DirectiveLocation.INLINE_FRAGMENT],
args:{if:{type:new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),description:"Skipped when true."}}});exports.GraphQLSkipDirective=module;exports.DEFAULT_DEPRECATION_REASON="No longer supported";const GraphQLDeprecatedDirective=new GraphQLDirective({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[global.DirectiveLocation.FIELD_DEFINITION,global.DirectiveLocation.ARGUMENT_DEFINITION,global.DirectiveLocation.INPUT_FIELD_DEFINITION,global.DirectiveLocation.ENUM_VALUE],
args:{reason:{type:_scalars.GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:"No longer supported"}}});exports.GraphQLDeprecatedDirective=GraphQLDeprecatedDirective;global=new GraphQLDirective({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[global.DirectiveLocation.SCALAR],
args:{url:{type:new _definition.GraphQLNonNull(_scalars.GraphQLString),description:"The URL that specifies the behavior of this scalar."}}});exports.GraphQLSpecifiedByDirective=global;const specifiedDirectives=Object.freeze([require,module,GraphQLDeprecatedDirective,global]);exports.specifiedDirectives=specifiedDirectives}
//# sourceMappingURL=module$node_modules$graphql$type$directives.js.map
