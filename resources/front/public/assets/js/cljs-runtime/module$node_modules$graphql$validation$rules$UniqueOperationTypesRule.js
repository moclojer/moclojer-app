shadow$provide.module$node_modules$graphql$validation$rules$UniqueOperationTypesRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.UniqueOperationTypesRule=function(context){function checkOperationTypes(node){var _node$operationTypes;node=null!==(_node$operationTypes=node.operationTypes)&&void 0!==_node$operationTypes?_node$operationTypes:[];for(const operationType of node)_node$operationTypes=operationType.operation,node=definedOperationTypes[_node$operationTypes],
existingOperationTypes[_node$operationTypes]?context.reportError(new _GraphQLError.GraphQLError(`Type for ${_node$operationTypes} already defined in the schema. It cannot be redefined.`,{nodes:operationType})):node?context.reportError(new _GraphQLError.GraphQLError(`There can be only one ${_node$operationTypes} type in schema.`,{nodes:[node,operationType]})):definedOperationTypes[_node$operationTypes]=operationType;return!1}const schema=context.getSchema(),definedOperationTypes=Object.create(null),
existingOperationTypes=schema?{query:schema.getQueryType(),mutation:schema.getMutationType(),subscription:schema.getSubscriptionType()}:{};return{SchemaDefinition:checkOperationTypes,SchemaExtension:checkOperationTypes}};var _GraphQLError=require("module$node_modules$graphql$error$GraphQLError")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$UniqueOperationTypesRule.js.map
