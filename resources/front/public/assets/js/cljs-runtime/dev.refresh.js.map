{"version":3,"sources":["dev/refresh.cljs"],"mappings":";AASA,AAACA;AAMD,sBAAA,tBAAuBC;AAAvB,AACE,OAACC;;AAEH,2CAAA,3CAAuBC;AAAvB,AAIE,AAACC;;AACD,OAACC","names":["helix.experimental.refresh/inject-hook!","dev.refresh/refresh","helix.experimental.refresh/refresh!","dev.refresh/clear-cache-and-render!","refx.alpha/clear-subscription-cache!","app.core/render"],"sourcesContent":["(ns dev.refresh\n  \"A place to add preloads for developer tools!\"\n  (:require [app.core :as app]\n            [helix.experimental.refresh :as r]\n            [refx.alpha :as refx]))\n\n;; inject-hook! needs to run on application start.\n;; For ease, we run it at the top level.\n;; This function adds the react-refresh runtime to the page\n(r/inject-hook!)\n\n;; shadow-cljs allows us to annotate a function name with `:dev/after-load`\n;; to signal that it should be run after any code reload. We call the `refresh!`\n;; function, which will tell react to refresh any components which have a\n;; signature created by turning on the `:fast-refresh` feature flag.\n(defn ^:dev/after-load refresh []\n  (r/refresh!))\n\n(defn ^:dev/after-load clear-cache-and-render! []\n  ;; The `:dev/after-load` metadata causes this function to be called\n  ;; after shadow-cljs hot-reloads code. We force a UI update by clearing\n  ;; the Refx subscription cache.\n  (refx/clear-subscription-cache!)\n  (app/render))\n"]}