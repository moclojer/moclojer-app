{
"version":3,
"file":"module$node_modules$graphql$type$scalars.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/graphql/type/scalars.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$type$scalars\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.GraphQLString =\n  exports.GraphQLInt =\n  exports.GraphQLID =\n  exports.GraphQLFloat =\n  exports.GraphQLBoolean =\n  exports.GRAPHQL_MIN_INT =\n  exports.GRAPHQL_MAX_INT =\n    void 0;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\nexports.specifiedScalarTypes = void 0;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _definition = require('./definition.js');\n\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\nconst GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;\nconst GRAPHQL_MIN_INT = -2147483648;\nexports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;\nconst GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          (0, _inspect.inspect)(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexports.GraphQLInt = GraphQLInt;\nconst GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.FLOAT &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexports.GraphQLFloat = GraphQLFloat;\nconst GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING) {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLString = GraphQLString;\nconst GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n        coercedValue,\n      )}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLBoolean = GraphQLBoolean;\nconst GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`,\n    );\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.STRING &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          (0, _printer.print)(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLID = GraphQLID;\nconst specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexports.specifiedScalarTypes = specifiedScalarTypes;\n\nfunction isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if ((0, _isObjectLike.isObjectLike)(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","serializeObject","outputValue","_isObjectLike","isObjectLike","valueOf","valueOfResult","toJSON","Object","defineProperty","value","GraphQLString","GraphQLInt","GraphQLID","GraphQLFloat","GraphQLBoolean","GRAPHQL_MIN_INT","GRAPHQL_MAX_INT","isSpecifiedScalarType","type","specifiedScalarTypes","some","name","_inspect","_GraphQLError","_kinds","_printer","_definition","GraphQLScalarType","description","serialize","coercedValue","num","Number","isInteger","GraphQLError","inspect","parseValue","inputValue","parseLiteral","valueNode","kind","Kind","INT","print","nodes","parseInt","isFinite","FLOAT","parseFloat","toString","STRING","BOOLEAN","String","freeze"]
}
