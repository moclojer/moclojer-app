shadow$provide.module$node_modules$graphql$type$scalars=function(global,require,module,exports){function serializeObject(outputValue){if((0,_isObjectLike.isObjectLike)(outputValue)){if("function"===typeof outputValue.valueOf){const valueOfResult=outputValue.valueOf();if(!(0,_isObjectLike.isObjectLike)(valueOfResult))return valueOfResult}if("function"===typeof outputValue.toJSON)return outputValue.toJSON()}return outputValue}Object.defineProperty(exports,"__esModule",{value:!0});exports.GraphQLString=
exports.GraphQLInt=exports.GraphQLID=exports.GraphQLFloat=exports.GraphQLBoolean=exports.GRAPHQL_MIN_INT=exports.GRAPHQL_MAX_INT=void 0;exports.isSpecifiedScalarType=function(type){return specifiedScalarTypes.some(({name})=>type.name===name)};exports.specifiedScalarTypes=void 0;var _inspect=require("module$node_modules$graphql$jsutils$inspect"),_isObjectLike=require("module$node_modules$graphql$jsutils$isObjectLike"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_kinds=require("module$node_modules$graphql$language$kinds"),
_printer=require("module$node_modules$graphql$language$printer"),_definition=require("module$node_modules$graphql$type$definition");exports.GRAPHQL_MAX_INT=2147483647;exports.GRAPHQL_MIN_INT=-2147483648;global=new _definition.GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(outputValue){outputValue=serializeObject(outputValue);if("boolean"===typeof outputValue)return outputValue?
1:0;let num=outputValue;"string"===typeof outputValue&&""!==outputValue&&(num=Number(outputValue));if("number"!==typeof num||!Number.isInteger(num))throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0,_inspect.inspect)(outputValue)}`);if(2147483647<num||-2147483648>num)throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: "+(0,_inspect.inspect)(outputValue));return num},parseValue(inputValue){if("number"!==typeof inputValue||!Number.isInteger(inputValue))throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0,_inspect.inspect)(inputValue)}`);
if(2147483647<inputValue||-2147483648>inputValue)throw new _GraphQLError.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==_kinds.Kind.INT)throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0,_printer.print)(valueNode)}`,{nodes:valueNode});const num=parseInt(valueNode.value,10);if(2147483647<num||-2147483648>num)throw new _GraphQLError.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,
{nodes:valueNode});return num}});exports.GraphQLInt=global;require=new _definition.GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(outputValue){outputValue=serializeObject(outputValue);if("boolean"===typeof outputValue)return outputValue?1:0;let num=outputValue;"string"===typeof outputValue&&""!==outputValue&&(num=Number(outputValue));
if("number"!==typeof num||!Number.isFinite(num))throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0,_inspect.inspect)(outputValue)}`);return num},parseValue(inputValue){if("number"!==typeof inputValue||!Number.isFinite(inputValue))throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0,_inspect.inspect)(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==_kinds.Kind.FLOAT&&valueNode.kind!==_kinds.Kind.INT)throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0,_printer.print)(valueNode)}`,
valueNode);return parseFloat(valueNode.value)}});exports.GraphQLFloat=require;module=new _definition.GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"===typeof coercedValue)return coercedValue;if("boolean"===typeof coercedValue)return coercedValue?
"true":"false";if("number"===typeof coercedValue&&Number.isFinite(coercedValue))return coercedValue.toString();throw new _GraphQLError.GraphQLError(`String cannot represent value: ${(0,_inspect.inspect)(outputValue)}`);},parseValue(inputValue){if("string"!==typeof inputValue)throw new _GraphQLError.GraphQLError(`String cannot represent a non string value: ${(0,_inspect.inspect)(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==_kinds.Kind.STRING)throw new _GraphQLError.GraphQLError(`String cannot represent a non string value: ${(0,_printer.print)(valueNode)}`,
{nodes:valueNode});return valueNode.value}});exports.GraphQLString=module;const GraphQLBoolean=new _definition.GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(outputValue){outputValue=serializeObject(outputValue);if("boolean"===typeof outputValue)return outputValue;if(Number.isFinite(outputValue))return 0!==outputValue;throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,_inspect.inspect)(outputValue)}`);
},parseValue(inputValue){if("boolean"!==typeof inputValue)throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,_inspect.inspect)(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==_kinds.Kind.BOOLEAN)throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,_printer.print)(valueNode)}`,{nodes:valueNode});return valueNode.value}});exports.GraphQLBoolean=GraphQLBoolean;_definition=new _definition.GraphQLScalarType({name:"ID",
description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"===typeof coercedValue)return coercedValue;if(Number.isInteger(coercedValue))return String(coercedValue);
throw new _GraphQLError.GraphQLError(`ID cannot represent value: ${(0,_inspect.inspect)(outputValue)}`);},parseValue(inputValue){if("string"===typeof inputValue)return inputValue;if("number"===typeof inputValue&&Number.isInteger(inputValue))return inputValue.toString();throw new _GraphQLError.GraphQLError(`ID cannot represent value: ${(0,_inspect.inspect)(inputValue)}`);},parseLiteral(valueNode){if(valueNode.kind!==_kinds.Kind.STRING&&valueNode.kind!==_kinds.Kind.INT)throw new _GraphQLError.GraphQLError("ID cannot represent a non-string and non-integer value: "+
(0,_printer.print)(valueNode),{nodes:valueNode});return valueNode.value}});exports.GraphQLID=_definition;const specifiedScalarTypes=Object.freeze([module,global,require,GraphQLBoolean,_definition]);exports.specifiedScalarTypes=specifiedScalarTypes}
//# sourceMappingURL=module$node_modules$graphql$type$scalars.js.map
