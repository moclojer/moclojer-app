{
"version":3,
"file":"module$node_modules$graphql$utilities$buildASTSchema.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiCjHC,QAASA,eAAc,CAACC,WAAD,CAAcC,OAAd,CAAuB,CAC5B,IAAhB,EAACD,WAAD,EAAwBA,WAAYE,CAAAA,IAApC,GAA6CC,MAAOC,CAAAA,IAAKC,CAAAA,QAAzD,EACE,GAAIC,UAAWC,CAAAA,SAAf,EAA0B,CAAA,CAA1B,CAAiC,kCAAjC,CAIE,EAAA,CAFJ,IACe,IAAZ,GAAAN,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQO,CAAAA,WAD7D,GAKkC,CAAA,CALlC,IAGe,IAAZ,GAAAP,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CACG,IAAK,EADR,CAEGA,OAAQQ,CAAAA,cALd,GAOE,GAAIC,SAAUC,CAAAA,cAAd,EAA8BX,WAA9B,CAGF,OAAMY,kBAAoB,CACxBC,YAAaC,IAAAA,EADW;AAExBC,MAAO,EAFiB,CAGxBC,WAAY,EAHY,CAIxBC,WAAYC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAJY,CAKxBC,kBAAmB,EALK,CAMxBZ,YAAa,CAAA,CANW,CAA1B,CAQMa,OAAS,GAAIC,aAAcC,CAAAA,gBAAlB,EACbX,iBADa,CAEbZ,WAFa,CAGbC,OAHa,CAMf,IAAsB,IAAtB,EAAIoB,MAAOG,CAAAA,OAAX,CACE,IAAK,MAAMC,IAAX,GAAmBJ,OAAON,CAAAA,KAA1B,CACE,OAAQU,IAAKC,CAAAA,IAAb,EAIE,KAAK,OAAL,CAEEL,MAAOM,CAAAA,KAAP,CAAeF,IACf,MAEF,MAAK,UAAL,CAEEJ,MAAOO,CAAAA,QAAP,CAAkBH,IAClB,MAEF,MAAK,cAAL,CAEEJ,MAAOQ,CAAAA,YAAP,CAAsBJ,IAhB1B,CAsBET,WAAAA,CAAa,CACjB,GAAGK,MAAOL,CAAAA,UADO,CAEjB,GAAGc,WAAYC,CAAAA,mBAAoBC,CAAAA,MAAhC,CAAwCC,YAAD,EACxCZ,MAAOL,CAAAA,UAAWkB,CAAAA,KAAlB,CACGC,SAAD,EAAeA,SAAUT,CAAAA,IAAzB;AAAkCO,YAAaP,CAAAA,IADjD,CADC,CAFc,CAQnB,OAAO,KAAIU,OAAQC,CAAAA,aAAZ,CAA0B,CAAE,GAAGhB,MAAL,CAAaL,WAAAA,WAAb,CAA1B,CA5DqC,CA9B9CE,MAAOoB,CAAAA,cAAP,CAAsBxC,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CyC,MAAO,CAAA,CADoC,CAA7C,CAGAzC,QAAQC,CAAAA,cAAR,CAAyBA,cACzBD,QAAQ0C,CAAAA,WAAR,CA6FAA,QAAoB,CAACC,MAAD,CAASxC,OAAT,CAAkB,CAC9ByC,MAAAA,CAAW,GAAIC,OAAQC,CAAAA,KAAZ,EAAmBH,MAAnB,CAA2B,CAC1CI,WACc,IAAZ,GAAA5C,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQ4C,CAAAA,UAFlB,CAG1CC,6BACc,IAAZ,GAAA7C,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CACI,IAAK,EADT,CAEIA,OAAQ6C,CAAAA,4BAN4B,CAA3B,CAQjB,OAAO/C,eAAA,CAAe2C,MAAf,CAAyB,CAC9BjC,eACc,IAAZ,GAAAR,OAAA,EAAgC,IAAK,EAArC;AAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQQ,CAAAA,cAF9B,CAG9BD,YACc,IAAZ,GAAAP,OAAA,EAAgC,IAAK,EAArC,GAAoBA,OAApB,CAAyC,IAAK,EAA9C,CAAkDA,OAAQO,CAAAA,WAJ9B,CAAzB,CAT6B,CA3FtC,KAAIF,WAAaV,OAAA,CAAQ,+CAAR,CAAjB,CAEIO,OAASP,OAAA,CAAQ,4CAAR,CAFb,CAII+C,QAAU/C,OAAA,CAAQ,6CAAR,CAJd,CAMIkC,YAAclC,OAAA,CAAQ,6CAAR,CANlB,CAQIwC,QAAUxC,OAAA,CAAQ,yCAAR,CARd,CAUIc,UAAYd,OAAA,CAAQ,iDAAR,CAVhB;AAYI0B,cAAgB1B,OAAA,CAAQ,oDAAR,CArB6F;",
"sources":["node_modules/graphql/utilities/buildASTSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$buildASTSchema\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.buildASTSchema = buildASTSchema;\nexports.buildSchema = buildSchema;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _parser = require('../language/parser.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _schema = require('../type/schema.js');\n\nvar _validate = require('../validation/validate.js');\n\nvar _extendSchema = require('./extendSchema.js');\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nfunction buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT) ||\n    (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    (0, _validate.assertValidSDL)(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = (0, _extendSchema.extendSchemaImpl)(\n    emptySchemaConfig,\n    documentAST,\n    options,\n  );\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ..._directives.specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new _schema.GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nfunction buildSchema(source, options) {\n  const document = (0, _parser.parse)(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","buildASTSchema","documentAST","options","kind","_kinds","Kind","DOCUMENT","_devAssert","devAssert","assumeValid","assumeValidSDL","_validate","assertValidSDL","emptySchemaConfig","description","undefined","types","directives","extensions","Object","create","extensionASTNodes","config","_extendSchema","extendSchemaImpl","astNode","type","name","query","mutation","subscription","_directives","specifiedDirectives","filter","stdDirective","every","directive","_schema","GraphQLSchema","defineProperty","value","buildSchema","source","document","_parser","parse","noLocation","allowLegacyFragmentVariables"]
}
