shadow$provide.module$node_modules$debug$src$common=function(global,require,module,exports){module.exports=function(env){function createDebug(namespace){function debug(...args){if(debug.enabled){var curr=Number(new Date);debug.diff=curr-(prevTime||curr);debug.prev=prevTime;prevTime=debug.curr=curr;args[0]=createDebug.coerce(args[0]);"string"!==typeof args[0]&&args.unshift("%O");var index=0;args[0]=args[0].replace(/%([a-zA-Z%])/g,(match,format)=>{if("%%"===match)return"%";index++;format=createDebug.formatters[format];
"function"===typeof format&&(match=format.call(debug,args[index]),args.splice(index,1),index--);return match});createDebug.formatArgs.call(debug,args);(debug.log||createDebug.log).apply(debug,args)}}let prevTime,enableOverride=null,namespacesCache,enabledCache;debug.namespace=namespace;debug.useColors=createDebug.useColors();debug.color=createDebug.selectColor(namespace);debug.extend=extend;debug.destroy=createDebug.destroy;Object.defineProperty(debug,"enabled",{enumerable:!0,configurable:!1,get:()=>
{if(null!==enableOverride)return enableOverride;namespacesCache!==createDebug.namespaces&&(namespacesCache=createDebug.namespaces,enabledCache=createDebug.enabled(namespace));return enabledCache},set:v=>{enableOverride=v}});"function"===typeof createDebug.init&&createDebug.init(debug);return debug}function extend(namespace,delimiter){namespace=createDebug(this.namespace+("undefined"===typeof delimiter?":":delimiter)+namespace);namespace.log=this.log;return namespace}function toNamespace(regexp){return regexp.toString().substring(2,
regexp.toString().length-2).replace(/\.\*\?$/,"*")}createDebug.debug=createDebug;createDebug.default=createDebug;createDebug.coerce=function(val){return val instanceof Error?val.stack||val.message:val};createDebug.disable=function(){const namespaces=[...createDebug.names.map(toNamespace),...createDebug.skips.map(toNamespace).map(namespace=>"-"+namespace)].join();createDebug.enable("");return namespaces};createDebug.enable=function(namespaces){createDebug.save(namespaces);createDebug.namespaces=namespaces;
createDebug.names=[];createDebug.skips=[];let i;const split=("string"===typeof namespaces?namespaces:"").split(/[\s,]+/),len=split.length;for(i=0;i<len;i++)split[i]&&(namespaces=split[i].replace(/\*/g,".*?"),"-"===namespaces[0]?createDebug.skips.push(new RegExp("^"+namespaces.slice(1)+"$")):createDebug.names.push(new RegExp("^"+namespaces+"$")))};createDebug.enabled=function(name){if("*"===name[name.length-1])return!0;let i,len;i=0;for(len=createDebug.skips.length;i<len;i++)if(createDebug.skips[i].test(name))return!1;
i=0;for(len=createDebug.names.length;i<len;i++)if(createDebug.names[i].test(name))return!0;return!1};createDebug.humanize=require("module$node_modules$ms$index");createDebug.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")};Object.keys(env).forEach(key=>{createDebug[key]=env[key]});createDebug.names=[];createDebug.skips=[];createDebug.formatters={};createDebug.selectColor=function(namespace){let hash=
0;for(let i=0;i<namespace.length;i++)hash=(hash<<5)-hash+namespace.charCodeAt(i),hash|=0;return createDebug.colors[Math.abs(hash)%createDebug.colors.length]};createDebug.enable(createDebug.load());return createDebug}}
//# sourceMappingURL=module$node_modules$debug$src$common.js.map
