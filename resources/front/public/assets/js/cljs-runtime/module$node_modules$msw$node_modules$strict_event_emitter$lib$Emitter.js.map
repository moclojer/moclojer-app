{
"version":3,
"file":"module$node_modules$msw$node_modules$strict_event_emitter$lib$Emitter.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/msw/node_modules/strict-event-emitter/lib/Emitter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$msw$node_modules$strict_event_emitter$lib$Emitter\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = void 0;\nconst MemoryLeakError_1 = require(\"./MemoryLeakError\");\n/**\n * Node.js-compatible implementation of `EventEmitter`.\n *\n * @example\n * const emitter = new Emitter<{ hello: [string] }>()\n * emitter.on('hello', (name) => console.log(name))\n * emitter.emit('hello', 'John')\n */\nclass Emitter {\n    constructor() {\n        this.events = new Map();\n        this.maxListeners = Emitter.defaultMaxListeners;\n        this.hasWarnedAboutPotentialMemoryLeak = false;\n    }\n    static listenerCount(emitter, eventName) {\n        return emitter.listenerCount(eventName);\n    }\n    _emitInternalEvent(internalEventName, eventName, listener) {\n        this.emit(internalEventName, \n        // Anything to make TypeScript happy.\n        ...[eventName, listener]);\n    }\n    _getListeners(eventName) {\n        return this.events.get(eventName) || [];\n    }\n    _removeListener(listeners, listener) {\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n        return [];\n    }\n    _wrapOnceListener(eventName, listener) {\n        const onceListener = (...data) => {\n            this.removeListener(eventName, onceListener);\n            listener.apply(this, data);\n        };\n        return onceListener;\n    }\n    setMaxListeners(maxListeners) {\n        this.maxListeners = maxListeners;\n        return this;\n    }\n    /**\n     * Returns the current max listener value for the `Emitter` which is\n     * either set by `emitter.setMaxListeners(n)` or defaults to\n     * `Emitter.defaultMaxListeners`.\n     */\n    getMaxListeners() {\n        return this.maxListeners;\n    }\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     * The values in the array will be strings or Symbols.\n     */\n    eventNames() {\n        return Array.from(this.events.keys());\n    }\n    /**\n     * Synchronously calls each of the listeners registered for the event named `eventName`,\n     * in the order they were registered, passing the supplied arguments to each.\n     * Returns `true` if the event has listeners, `false` otherwise.\n     *\n     * @example\n     * const emitter = new Emitter<{ hello: [string] }>()\n     * emitter.emit('hello', 'John')\n     */\n    emit(eventName, ...data) {\n        const listeners = this._getListeners(eventName);\n        listeners.forEach((listener) => {\n            listener.apply(this, data);\n        });\n        return listeners.length > 0;\n    }\n    addListener(eventName, listener) {\n        // Emit the `newListener` event before adding the listener.\n        this._emitInternalEvent('newListener', eventName, listener);\n        const nextListeners = this._getListeners(eventName).concat(listener);\n        this.events.set(eventName, nextListeners);\n        if (this.maxListeners > 0 &&\n            this.listenerCount(eventName) > this.maxListeners &&\n            !this.hasWarnedAboutPotentialMemoryLeak) {\n            this.hasWarnedAboutPotentialMemoryLeak = true;\n            const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(this, eventName, this.listenerCount(eventName));\n            console.warn(memoryLeakWarning);\n        }\n        return this;\n    }\n    on(eventName, listener) {\n        return this.addListener(eventName, listener);\n    }\n    once(eventName, listener) {\n        return this.addListener(eventName, this._wrapOnceListener(eventName, listener));\n    }\n    prependListener(eventName, listener) {\n        const listeners = this._getListeners(eventName);\n        if (listeners.length > 0) {\n            const nextListeners = [listener].concat(listeners);\n            this.events.set(eventName, nextListeners);\n        }\n        else {\n            this.events.set(eventName, listeners.concat(listener));\n        }\n        return this;\n    }\n    prependOnceListener(eventName, listener) {\n        return this.prependListener(eventName, this._wrapOnceListener(eventName, listener));\n    }\n    removeListener(eventName, listener) {\n        const listeners = this._getListeners(eventName);\n        if (listeners.length > 0) {\n            this._removeListener(listeners, listener);\n            this.events.set(eventName, listeners);\n            // Emit the `removeListener` event after removing the listener.\n            this._emitInternalEvent('removeListener', eventName, listener);\n        }\n        return this;\n    }\n    /**\n     * Alias for `emitter.removeListener()`.\n     *\n     * @example\n     * emitter.off('hello', listener)\n     */\n    off(eventName, listener) {\n        return this.removeListener(eventName, listener);\n    }\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this.events.delete(eventName);\n        }\n        else {\n            this.events.clear();\n        }\n        return this;\n    }\n    /**\n     * Returns a copy of the array of listeners for the event named `eventName`.\n     */\n    listeners(eventName) {\n        return Array.from(this._getListeners(eventName));\n    }\n    /**\n     * Returns the number of listeners listening to the event named `eventName`.\n     */\n    listenerCount(eventName) {\n        return this._getListeners(eventName).length;\n    }\n    rawListeners(eventName) {\n        return this.listeners(eventName);\n    }\n}\nexports.Emitter = Emitter;\nEmitter.defaultMaxListeners = 10;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Emitter","MemoryLeakError_1","constructor","events","Map","maxListeners","defaultMaxListeners","hasWarnedAboutPotentialMemoryLeak","listenerCount","emitter","eventName","_emitInternalEvent","internalEventName","listener","emit","_getListeners","get","_removeListener","listeners","index","indexOf","splice","_wrapOnceListener","onceListener","data","removeListener","apply","setMaxListeners","getMaxListeners","eventNames","Array","from","keys","forEach","length","addListener","nextListeners","concat","set","memoryLeakWarning","MemoryLeakError","console","warn","on","once","prependListener","prependOnceListener","off","removeAllListeners","delete","clear","rawListeners"]
}
