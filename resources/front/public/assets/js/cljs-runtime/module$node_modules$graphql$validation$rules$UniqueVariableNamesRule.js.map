{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueVariableNamesRule.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,uBAAR,CAWAA,QAAgC,CAACC,OAAD,CAAU,CACxC,MAAO,CACLC,mBAAmB,CAACC,aAAD,CAAgB,CACjC,IAAIC,qBAKEC,cAAAA,CAC4D,IAAhE,IAACD,qBAAD,CAAyBD,aAAcE,CAAAA,mBAAvC,GAC0B,IAAK,EAD/B,GACAD,qBADA,CAEIA,qBAFJ,CAGI,EACAE,sBAAAA,CAA0B,GAAIC,QAASC,CAAAA,OAAb,EAC9BH,aAD8B,CAE7BI,IAAD,EAAUA,IAAKC,CAAAA,QAASC,CAAAA,IAAKZ,CAAAA,KAFC,CAKhC;IAAK,MAAM,CAACa,YAAD,CAAeC,aAAf,CAAX,EAA4CP,sBAA5C,CAC6B,CAA3B,CAAIO,aAAcC,CAAAA,MAAlB,EACEb,OAAQc,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACG,0CAAyCL,YAAzC,IADH,CAEE,CACEM,MAAOL,aAAcM,CAAAA,GAAd,CAAmBV,IAAD,EAAUA,IAAKC,CAAAA,QAASC,CAAAA,IAA1C,CADT,CAFF,CADF,CAlB6B,CAD9B,CADiC,CAT1C,KAAIJ,SAAWb,OAAA,CAAQ,6CAAR,CAAf,CAEIsB,cAAgBtB,OAAA,CAAQ,gDAAR,CAV6G;",
"sources":["node_modules/graphql/validation/rules/UniqueVariableNamesRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueVariableNamesRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueVariableNamesRule = UniqueVariableNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nfunction UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = (0, _groupBy.groupBy)(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","UniqueVariableNamesRule","context","OperationDefinition","operationNode","_operationNode$variab","variableDefinitions","seenVariableDefinitions","_groupBy","groupBy","node","variable","name","variableName","variableNodes","length","reportError","_GraphQLError","GraphQLError","nodes","map"]
}
