shadow$provide.module$node_modules$graphql$validation$rules$FieldsOnCorrectTypeRule=function(global,require,module,exports){function getSuggestedTypeNames(schema,type,fieldName){if(!(0,_definition.isAbstractType)(type))return[];const suggestedTypes=new Set,usageCount=Object.create(null);for(const possibleType of schema.getPossibleTypes(type))if(possibleType.getFields()[fieldName]){suggestedTypes.add(possibleType);usageCount[possibleType.name]=1;for(const possibleInterface of possibleType.getInterfaces()){var _usageCount$possibleI;
possibleInterface.getFields()[fieldName]&&(suggestedTypes.add(possibleInterface),usageCount[possibleInterface.name]=(null!==(_usageCount$possibleI=usageCount[possibleInterface.name])&&void 0!==_usageCount$possibleI?_usageCount$possibleI:0)+1)}}return[...suggestedTypes].sort((typeA,typeB)=>{const usageCountDiff=usageCount[typeB.name]-usageCount[typeA.name];return 0!==usageCountDiff?usageCountDiff:(0,_definition.isInterfaceType)(typeA)&&schema.isSubType(typeA,typeB)?-1:(0,_definition.isInterfaceType)(typeB)&&
schema.isSubType(typeB,typeA)?1:(0,_naturalCompare.naturalCompare)(typeA.name,typeB.name)}).map(x=>x.name)}Object.defineProperty(exports,"__esModule",{value:!0});exports.FieldsOnCorrectTypeRule=function(context){return{Field(node){const type=context.getParentType();if(type&&!context.getFieldDef()){var schema=context.getSchema();const fieldName=node.name.value;schema=(0,_didYouMean.didYouMean)("to use an inline fragment on",getSuggestedTypeNames(schema,type,fieldName));if(""===schema){schema=_didYouMean;
var JSCompiler_temp_const=schema.didYouMean;var JSCompiler_inline_result=fieldName;if((0,_definition.isObjectType)(type)||(0,_definition.isInterfaceType)(type)){const possibleFieldNames=Object.keys(type.getFields());JSCompiler_inline_result=(0,_suggestionList.suggestionList)(JSCompiler_inline_result,possibleFieldNames)}else JSCompiler_inline_result=[];schema=JSCompiler_temp_const.call(schema,JSCompiler_inline_result)}context.reportError(new _GraphQLError.GraphQLError(`Cannot query field "${fieldName}" on type "${type.name}".`+
schema,{nodes:node}))}}}};var _didYouMean=require("module$node_modules$graphql$jsutils$didYouMean"),_naturalCompare=require("module$node_modules$graphql$jsutils$naturalCompare"),_suggestionList=require("module$node_modules$graphql$jsutils$suggestionList"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_definition=require("module$node_modules$graphql$type$definition")}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$FieldsOnCorrectTypeRule.js.map
