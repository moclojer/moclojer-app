{
"version":3,
"file":"module$node_modules$graphql$validation$ValidationContext.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/graphql/validation/ValidationContext.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$ValidationContext\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.ValidationContext =\n  exports.SDLValidationContext =\n  exports.ASTValidationContext =\n    void 0;\n\nvar _kinds = require('../language/kinds.js');\n\nvar _visitor = require('../language/visitor.js');\n\nvar _TypeInfo = require('../utilities/TypeInfo.js');\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nclass ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\n\nexports.ASTValidationContext = ASTValidationContext;\n\nclass SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\n\nexports.SDLValidationContext = SDLValidationContext;\n\nclass ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new _TypeInfo.TypeInfo(this._schema);\n      (0, _visitor.visit)(\n        node,\n        (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n\nexports.ValidationContext = ValidationContext;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ValidationContext","SDLValidationContext","ASTValidationContext","_kinds","_visitor","_TypeInfo","constructor","ast","onError","_ast","_fragments","undefined","_fragmentSpreads","Map","_recursivelyReferencedFragments","_onError","Symbol","toStringTag","reportError","error","getDocument","getFragment","name","fragments","create","defNode","definitions","kind","Kind","FRAGMENT_DEFINITION","getFragmentSpreads","node","spreads","get","setsToVisit","set","pop","selection","selections","FRAGMENT_SPREAD","push","selectionSet","getRecursivelyReferencedFragments","operation","collectedNames","nodesToVisit","spread","fragName","fragment","schema","_schema","getSchema","typeInfo","_typeInfo","_variableUsages","_recursiveVariableUsages","getVariableUsages","usages","newUsages","TypeInfo","visit","visitWithTypeInfo","VariableDefinition","Variable","variable","type","getInputType","defaultValue","getDefaultValue","getRecursiveVariableUsages","frag","concat","getType","getParentType","getParentInputType","getFieldDef","getDirective","getArgument","getEnumValue"]
}
