{
"version":3,
"file":"module$node_modules$graphql$language$ast.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/graphql/language/ast.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$ast\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.Token =\n  exports.QueryDocumentKeys =\n  exports.OperationTypeNode =\n  exports.Location =\n    void 0;\nexports.isNode = isNode;\n\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nclass Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexports.Location = Location;\n\nclass Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\nexports.Token = Token;\n\n/**\n * @internal\n */\nconst QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nexports.QueryDocumentKeys = QueryDocumentKeys;\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nfunction isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\nexports.OperationTypeNode = OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (exports.OperationTypeNode = OperationTypeNode = {}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Token","QueryDocumentKeys","OperationTypeNode","Location","isNode","maybeNode","maybeKind","kind","kindValues","has","constructor","startToken","endToken","source","start","end","Symbol","toStringTag","toJSON","line","column","next","prev","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","Set","keys"]
}
