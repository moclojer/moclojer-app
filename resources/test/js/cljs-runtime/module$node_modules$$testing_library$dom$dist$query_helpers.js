shadow$provide.module$node_modules$$testing_library$dom$dist$query_helpers=function(global,require,module,exports){function getElementError(message,container){return(0,_config.getConfig)().getElementError(message,container)}function getMultipleElementsFoundError(message,container){return getElementError(`${message}\n\n(If this is intentional, then use the \`*AllBy*\` variant of the query (like \`queryAllByText\`, \`getAllByText\`, or \`findAllByText\`)).`,container)}function queryAllByAttribute(attribute,
container,text,{exact=!0,collapseWhitespace,trim,normalizer}={}){const matcher=exact?_matches.matches:_matches.fuzzyMatches,matchNormalizer=(0,_matches.makeNormalizer)({collapseWhitespace,trim,normalizer});return Array.from(container.querySelectorAll(`[${attribute}]`)).filter(node=>matcher(node.getAttribute(attribute),node,text,matchNormalizer))}function makeSingleQuery(allQuery,getMultipleError){return(container,...args)=>{var els=allQuery(container,...args);if(1<els.length)throw els=els.map(element=>
getElementError(null,element).message).join("\n\n"),getMultipleElementsFoundError(`${getMultipleError(container,...args)}

Here are the matching elements:

${els}`,container);return els[0]||null}}function getSuggestionError(suggestion,container){return(0,_config.getConfig)().getElementError(`A better query is available, try this:
${suggestion.toString()}
`,container)}function makeGetAllQuery(allQuery,getMissingError){return(container,...args)=>{const els=allQuery(container,...args);if(!els.length)throw(0,_config.getConfig)().getElementError(getMissingError(container,...args),container);return els}}function makeFindQuery(getter){return(container,text,options,waitForOptions)=>(0,_waitFor.waitFor)(()=>getter(container,text,options),{container,...waitForOptions})}Object.defineProperty(exports,"__esModule",{value:!0});exports.buildQueries=function(queryAllBy,
getMultipleError,getMissingError){const queryBy=wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy,getMultipleError),queryAllBy.name,"query");var getAllBy=makeGetAllQuery(queryAllBy,getMissingError);const getBy=makeSingleQuery(getAllBy,getMultipleError);getMultipleError=wrapSingleQueryWithSuggestion(getBy,queryAllBy.name,"get");getMissingError=wrapAllByQueryWithSuggestion(getAllBy,queryAllBy.name.replace("query","get"),"getAll");getAllBy=makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy,queryAllBy.name,
"findAll"));queryAllBy=makeFindQuery(wrapSingleQueryWithSuggestion(getBy,queryAllBy.name,"find"));return[queryBy,getMissingError,getMultipleError,getAllBy,queryAllBy]};exports.getElementError=getElementError;exports.getMultipleElementsFoundError=getMultipleElementsFoundError;exports.makeFindQuery=makeFindQuery;exports.makeGetAllQuery=makeGetAllQuery;exports.makeSingleQuery=makeSingleQuery;exports.queryAllByAttribute=queryAllByAttribute;exports.queryByAttribute=function(attribute,container,text,options){options=
queryAllByAttribute(attribute,container,text,options);if(1<options.length)throw getMultipleElementsFoundError(`Found multiple elements by [${attribute}=${text}]`,container);return options[0]||null};exports.wrapSingleQueryWithSuggestion=exports.wrapAllByQueryWithSuggestion=void 0;var _suggestions=require("module$node_modules$$testing_library$dom$dist$suggestions"),_matches=require("module$node_modules$$testing_library$dom$dist$matches"),_waitFor=require("module$node_modules$$testing_library$dom$dist$wait_for"),
_config=require("module$node_modules$$testing_library$dom$dist$config");const wrapSingleQueryWithSuggestion=(query,queryAllByName,variant)=>(container,...args)=>{const element=query(container,...args);[{suggest:args=(0,_config.getConfig)().throwSuggestions}={}]=args.slice(-1);if(element&&args&&(args=(0,_suggestions.getSuggestedQuery)(element,variant))&&!queryAllByName.endsWith(args.queryName))throw getSuggestionError(args.toString(),container);return element};exports.wrapSingleQueryWithSuggestion=
wrapSingleQueryWithSuggestion;const wrapAllByQueryWithSuggestion=(query,queryAllByName,variant)=>(container,...args)=>{const els=query(container,...args);[{suggest:args=(0,_config.getConfig)().throwSuggestions}={}]=args.slice(-1);if(els.length&&args&&(args=[...(new Set(els.map(element=>{var _getSuggestedQuery;return null==(_getSuggestedQuery=(0,_suggestions.getSuggestedQuery)(element,variant))?void 0:_getSuggestedQuery.toString()})))],1===args.length&&!queryAllByName.endsWith((0,_suggestions.getSuggestedQuery)(els[0],
variant).queryName)))throw getSuggestionError(args[0],container);return els};exports.wrapAllByQueryWithSuggestion=wrapAllByQueryWithSuggestion}
//# sourceMappingURL=module$node_modules$$testing_library$dom$dist$query_helpers.js.map
