{
"version":3,
"file":"module$node_modules$graphql$validation$rules$FieldsOnCorrectTypeRule.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$FieldsOnCorrectTypeRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _naturalCompare = require('../../jsutils/naturalCompare.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nfunction FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = (0, _didYouMean.didYouMean)(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = (0, _didYouMean.didYouMean)(\n              getSuggestedFieldNames(type, fieldName),\n            );\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!(0, _definition.isAbstractType)(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (\n        (0, _definition.isInterfaceType)(typeA) &&\n        schema.isSubType(typeA, typeB)\n      ) {\n        return -1;\n      }\n\n      if (\n        (0, _definition.isInterfaceType)(typeB) &&\n        schema.isSubType(typeB, typeA)\n      ) {\n        return 1;\n      }\n\n      return (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (\n    (0, _definition.isObjectType)(type) ||\n    (0, _definition.isInterfaceType)(type)\n  ) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getSuggestedTypeNames","schema","type","fieldName","_definition","isAbstractType","suggestedTypes","Set","usageCount","Object","create","possibleType","getPossibleTypes","getFields","add","name","possibleInterface","getInterfaces","_usageCount$possibleI","sort","typeA","typeB","usageCountDiff","isInterfaceType","isSubType","_naturalCompare","naturalCompare","map","x","defineProperty","value","FieldsOnCorrectTypeRule","context","Field","node","getParentType","getFieldDef","fieldDef","getSchema","suggestion","_didYouMean","didYouMean","isObjectType","possibleFieldNames","keys","_suggestionList","suggestionList","reportError","_GraphQLError","GraphQLError","nodes"]
}
