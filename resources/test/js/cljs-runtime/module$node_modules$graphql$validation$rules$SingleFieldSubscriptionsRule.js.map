{
"version":3,
"file":"module$node_modules$graphql$validation$rules$SingleFieldSubscriptionsRule.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,4BAAR,CAgBAA,QAAqC,CAACC,OAAD,CAAU,CAC7C,MAAO,CACLC,mBAAmB,CAACC,IAAD,CAAO,CACxB,GAAuB,cAAvB,GAAIA,IAAKC,CAAAA,SAAT,CAAuC,CACrC,IAAMC,OAASJ,OAAQK,CAAAA,SAAR,EACf,OAAMC,iBAAmBF,MAAOG,CAAAA,mBAAP,EAEzB,IAAID,gBAAJ,CAAsB,CACpB,MAAME,cAAgBN,IAAKO,CAAAA,IAAL,CAAYP,IAAKO,CAAAA,IAAKX,CAAAA,KAAtB,CAA8B,IAApD,CACMY,eAAiBd,MAAOe,CAAAA,MAAP,CAAc,IAAd,CADvB,CAEMC;AAAWZ,OAAQa,CAAAA,WAAR,EAFjB,CAGMC,UAAYlB,MAAOe,CAAAA,MAAP,CAAc,IAAd,CAElB,KAAK,MAAMI,UAAX,GAAyBH,SAASI,CAAAA,WAAlC,CACMD,UAAWE,CAAAA,IAAf,GAAwBC,MAAOC,CAAAA,IAAKC,CAAAA,mBAApC,GACEN,SAAA,CAAUC,UAAWN,CAAAA,IAAKX,CAAAA,KAA1B,CADF,CACqCiB,UADrC,CAKIM,KAAAA,CAAS,GAAIC,cAAeC,CAAAA,aAAnB,EACbnB,MADa,CAEbU,SAFa,CAGbJ,cAHa,CAIbJ,gBAJa,CAKbJ,IAAKsB,CAAAA,YALQ,CAQG,EAAlB,CAAIH,IAAOI,CAAAA,IAAX,GAGQC,MACN,CAH4BC,CAAC,GAAGN,IAAOO,CAAAA,MAAP,EAAJD,CACyBE,CAAAA,KAApBC,CAA0B,CAA1BA,CACqBC,CAAAA,IAAzB,EAC7B,CAAA/B,OAAQgC,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACmB,IAAjB,EAAA1B,aAAA,CACK,iBAAgBA,aAAhB,yCADL,CAEI,8DAHN;AAIE,CACE2B,MAAOT,MADT,CAJF,CADF,CAJF,CAgBA,KAAK,MAAMU,UAAX,GAAyBf,KAAOO,CAAAA,MAAP,EAAzB,CACgBQ,UAAAC,CAAW,CAAXA,CACU5B,CAAAA,IAAKX,CAAAA,KAEfwC,CAAAA,UAAV,CAAqB,IAArB,CAAJ,EACEtC,OAAQgC,CAAAA,WAAR,CACE,IAAIC,aAAcC,CAAAA,YAAlB,CACmB,IAAjB,EAAA1B,aAAA,CACK,iBAAgBA,aAAhB,qDADL,CAEI,0EAHN,CAIE,CACE2B,MAAOC,UADT,CAJF,CADF,CAzCgB,CAJe,CADf,CADrB,CADsC,CAd/C,KAAIH,cAAgBxC,OAAA,CAAQ,gDAAR,CAApB,CAEIyB,OAASzB,OAAA,CAAQ,4CAAR,CAFb,CAII6B;AAAiB7B,OAAA,CAAQ,qDAAR,CAZiH;",
"sources":["node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$SingleFieldSubscriptionsRule\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _collectFields = require('../../execution/collectFields.js');\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nfunction SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = (0, _collectFields.collectFields)(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","SingleFieldSubscriptionsRule","context","OperationDefinition","node","operation","schema","getSchema","subscriptionType","getSubscriptionType","operationName","name","variableValues","create","document","getDocument","fragments","definition","definitions","kind","_kinds","Kind","FRAGMENT_DEFINITION","fields","_collectFields","collectFields","selectionSet","size","extraFieldSelections","fieldSelectionLists","values","slice","extraFieldSelectionLists","flat","reportError","_GraphQLError","GraphQLError","nodes","fieldNodes","field","startsWith"]
}
