shadow$provide.module$node_modules$graphql$utilities$buildClientSchema=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.buildClientSchema=function(introspection,options){function getType(typeRef){if(typeRef.kind===_introspection.TypeKind.LIST){typeRef=typeRef.ofType;if(!typeRef)throw Error("Decorated type deeper than introspection query.");return new _definition.GraphQLList(getType(typeRef))}if(typeRef.kind===_introspection.TypeKind.NON_NULL){typeRef=
typeRef.ofType;if(!typeRef)throw Error("Decorated type deeper than introspection query.");typeRef=getType(typeRef);return new _definition.GraphQLNonNull((0,_definition.assertNullableType)(typeRef))}return getNamedType(typeRef)}function getNamedType(typeRef){const typeName=typeRef.name;if(!typeName)throw Error(`Unknown type reference: ${(0,_inspect.inspect)(typeRef)}.`);typeRef=typeMap[typeName];if(!typeRef)throw Error(`Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`);
return typeRef}function getObjectType(typeRef){return(0,_definition.assertObjectType)(getNamedType(typeRef))}function getInterfaceType(typeRef){return(0,_definition.assertInterfaceType)(getNamedType(typeRef))}function buildType(type){if(null!=type&&null!=type.name&&null!=type.kind)switch(type.kind){case _introspection.TypeKind.SCALAR:return new _definition.GraphQLScalarType({name:type.name,description:type.description,specifiedByURL:type.specifiedByURL});case _introspection.TypeKind.OBJECT:return buildObjectDef(type);
case _introspection.TypeKind.INTERFACE:return buildInterfaceDef(type);case _introspection.TypeKind.UNION:return buildUnionDef(type);case _introspection.TypeKind.ENUM:return buildEnumDef(type);case _introspection.TypeKind.INPUT_OBJECT:return buildInputObjectDef(type)}type=(0,_inspect.inspect)(type);throw Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${type}.`);}function buildImplementationsList(implementingIntrospection){if(null===
implementingIntrospection.interfaces&&implementingIntrospection.kind===_introspection.TypeKind.INTERFACE)return[];if(!implementingIntrospection.interfaces)throw implementingIntrospection=(0,_inspect.inspect)(implementingIntrospection),Error(`Introspection result missing interfaces: ${implementingIntrospection}.`);return implementingIntrospection.interfaces.map(getInterfaceType)}function buildObjectDef(objectIntrospection){return new _definition.GraphQLObjectType({name:objectIntrospection.name,description:objectIntrospection.description,
interfaces:()=>buildImplementationsList(objectIntrospection),fields:()=>buildFieldDefMap(objectIntrospection)})}function buildInterfaceDef(interfaceIntrospection){return new _definition.GraphQLInterfaceType({name:interfaceIntrospection.name,description:interfaceIntrospection.description,interfaces:()=>buildImplementationsList(interfaceIntrospection),fields:()=>buildFieldDefMap(interfaceIntrospection)})}function buildUnionDef(unionIntrospection){if(!unionIntrospection.possibleTypes){const unionIntrospectionStr=
(0,_inspect.inspect)(unionIntrospection);throw Error(`Introspection result missing possibleTypes: ${unionIntrospectionStr}.`);}return new _definition.GraphQLUnionType({name:unionIntrospection.name,description:unionIntrospection.description,types:()=>unionIntrospection.possibleTypes.map(getObjectType)})}function buildEnumDef(enumIntrospection){if(!enumIntrospection.enumValues)throw enumIntrospection=(0,_inspect.inspect)(enumIntrospection),Error(`Introspection result missing enumValues: ${enumIntrospection}.`);
return new _definition.GraphQLEnumType({name:enumIntrospection.name,description:enumIntrospection.description,values:(0,_keyValMap.keyValMap)(enumIntrospection.enumValues,valueIntrospection=>valueIntrospection.name,valueIntrospection=>({description:valueIntrospection.description,deprecationReason:valueIntrospection.deprecationReason}))})}function buildInputObjectDef(inputObjectIntrospection){if(!inputObjectIntrospection.inputFields){const inputObjectIntrospectionStr=(0,_inspect.inspect)(inputObjectIntrospection);
throw Error(`Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`);}return new _definition.GraphQLInputObjectType({name:inputObjectIntrospection.name,description:inputObjectIntrospection.description,fields:()=>buildInputValueDefMap(inputObjectIntrospection.inputFields)})}function buildFieldDefMap(typeIntrospection){if(!typeIntrospection.fields)throw Error(`Introspection result missing fields: ${(0,_inspect.inspect)(typeIntrospection)}.`);return(0,_keyValMap.keyValMap)(typeIntrospection.fields,
fieldIntrospection=>fieldIntrospection.name,buildField)}function buildField(fieldIntrospection){const type=getType(fieldIntrospection.type);if(!(0,_definition.isOutputType)(type))throw fieldIntrospection=(0,_inspect.inspect)(type),Error(`Introspection must provide output type for fields, but received: ${fieldIntrospection}.`);if(!fieldIntrospection.args)throw fieldIntrospection=(0,_inspect.inspect)(fieldIntrospection),Error(`Introspection result missing field args: ${fieldIntrospection}.`);return{description:fieldIntrospection.description,
deprecationReason:fieldIntrospection.deprecationReason,type,args:buildInputValueDefMap(fieldIntrospection.args)}}function buildInputValueDefMap(inputValueIntrospections){return(0,_keyValMap.keyValMap)(inputValueIntrospections,inputValue=>inputValue.name,buildInputValue)}function buildInputValue(inputValueIntrospection){const type=getType(inputValueIntrospection.type);if(!(0,_definition.isInputType)(type))throw inputValueIntrospection=(0,_inspect.inspect)(type),Error(`Introspection must provide input type for arguments, but received: ${inputValueIntrospection}.`);
const defaultValue=null!=inputValueIntrospection.defaultValue?(0,_valueFromAST.valueFromAST)((0,_parser.parseValue)(inputValueIntrospection.defaultValue),type):void 0;return{description:inputValueIntrospection.description,type,defaultValue,deprecationReason:inputValueIntrospection.deprecationReason}}function buildDirective(directiveIntrospection){if(!directiveIntrospection.args)throw directiveIntrospection=(0,_inspect.inspect)(directiveIntrospection),Error(`Introspection result missing directive args: ${directiveIntrospection}.`);
if(!directiveIntrospection.locations)throw directiveIntrospection=(0,_inspect.inspect)(directiveIntrospection),Error(`Introspection result missing directive locations: ${directiveIntrospection}.`);return new _directives.GraphQLDirective({name:directiveIntrospection.name,description:directiveIntrospection.description,isRepeatable:directiveIntrospection.isRepeatable,locations:directiveIntrospection.locations.slice(),args:buildInputValueDefMap(directiveIntrospection.args)})}(0,_isObjectLike.isObjectLike)(introspection)&&
(0,_isObjectLike.isObjectLike)(introspection.__schema)||(0,_devAssert.devAssert)(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0,_inspect.inspect)(introspection)}.`);introspection=introspection.__schema;const typeMap=(0,_keyValMap.keyValMap)(introspection.types,typeIntrospection=>typeIntrospection.name,typeIntrospection=>buildType(typeIntrospection));for(var stdType of[..._scalars.specifiedScalarTypes,
..._introspection.introspectionTypes])typeMap[stdType.name]&&(typeMap[stdType.name]=stdType);stdType=introspection.queryType?getObjectType(introspection.queryType):null;const mutationType=introspection.mutationType?getObjectType(introspection.mutationType):null,subscriptionType=introspection.subscriptionType?getObjectType(introspection.subscriptionType):null,directives=introspection.directives?introspection.directives.map(buildDirective):[];return new _schema.GraphQLSchema({description:introspection.description,
query:stdType,mutation:mutationType,subscription:subscriptionType,types:Object.values(typeMap),directives,assumeValid:null===options||void 0===options?void 0:options.assumeValid})};var _devAssert=require("module$node_modules$graphql$jsutils$devAssert"),_inspect=require("module$node_modules$graphql$jsutils$inspect"),_isObjectLike=require("module$node_modules$graphql$jsutils$isObjectLike"),_keyValMap=require("module$node_modules$graphql$jsutils$keyValMap"),_parser=require("module$node_modules$graphql$language$parser"),
_definition=require("module$node_modules$graphql$type$definition"),_directives=require("module$node_modules$graphql$type$directives"),_introspection=require("module$node_modules$graphql$type$introspection"),_scalars=require("module$node_modules$graphql$type$scalars"),_schema=require("module$node_modules$graphql$type$schema"),_valueFromAST=require("module$node_modules$graphql$utilities$valueFromAST")}
//# sourceMappingURL=module$node_modules$graphql$utilities$buildClientSchema.js.map
