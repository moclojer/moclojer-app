shadow$provide.module$node_modules$$testing_library$dom$dist$events=function(global,require,module,exports){function fireEvent(element,event){return(0,_config.getConfig)().eventWrapper(()=>{if(!event)throw Error("Unable to fire an event - please provide an event object.");if(!element)throw Error(`Unable to fire a "${event.type}" event - please provide a DOM element.`);return element.dispatchEvent(event)})}function createEvent(eventName,node,init,{EventType="Event",defaultInit={}}={}){if(!node)throw Error(`Unable to fire a "${eventName}" event - please provide a DOM element.`);
const eventInit={...defaultInit,...init},{target:{value,files,...targetProperties}={}}=eventInit;void 0!==value&&setNativeValue(node,value);void 0!==files&&Object.defineProperty(node,"files",{configurable:!0,enumerable:!0,writable:!0,value:files});Object.assign(node,targetProperties);const window=(0,_helpers.getWindowFromNode)(node);node=window[EventType]||window.Event;let event;if("function"===typeof node)event=new node(eventName,eventInit);else{event=window.document.createEvent(EventType);const {bubbles,
cancelable,detail,...otherInit}=eventInit;event.initEvent(eventName,bubbles,cancelable,detail);Object.keys(otherInit).forEach(eventKey=>{event[eventKey]=otherInit[eventKey]})}["dataTransfer","clipboardData"].forEach(dataTransferKey=>{const dataTransferValue=eventInit[dataTransferKey];"object"===typeof dataTransferValue&&("function"===typeof window.DataTransfer?Object.defineProperty(event,dataTransferKey,{value:Object.getOwnPropertyNames(dataTransferValue).reduce((acc,propName)=>{Object.defineProperty(acc,
propName,{value:dataTransferValue[propName]});return acc},new window.DataTransfer)}):Object.defineProperty(event,dataTransferKey,{value:dataTransferValue}))});return event}function setNativeValue(element,value){const {set:valueSetter}=Object.getOwnPropertyDescriptor(element,"value")||{};var prototype=Object.getPrototypeOf(element);({set:prototype}=Object.getOwnPropertyDescriptor(prototype,"value")||{});if(prototype&&valueSetter!==prototype)prototype.call(element,value);else if(valueSetter)valueSetter.call(element,
value);else throw Error("The given element does not have a value setter");}Object.defineProperty(exports,"__esModule",{value:!0});exports.createEvent=createEvent;exports.fireEvent=fireEvent;var _config=require("module$node_modules$$testing_library$dom$dist$config"),_helpers=require("module$node_modules$$testing_library$dom$dist$helpers"),_eventMap=require("module$node_modules$$testing_library$dom$dist$event_map");Object.keys(_eventMap.eventMap).forEach(key=>{const {EventType,defaultInit}=_eventMap.eventMap[key],
eventName=key.toLowerCase();createEvent[key]=(node,init)=>createEvent(eventName,node,init,{EventType,defaultInit});fireEvent[key]=(node,init)=>fireEvent(node,createEvent[key](node,init))});Object.keys(_eventMap.eventAliasMap).forEach(aliasKey=>{const key=_eventMap.eventAliasMap[aliasKey];fireEvent[aliasKey]=(...args)=>fireEvent[key](...args)})}
//# sourceMappingURL=module$node_modules$$testing_library$dom$dist$events.js.map
