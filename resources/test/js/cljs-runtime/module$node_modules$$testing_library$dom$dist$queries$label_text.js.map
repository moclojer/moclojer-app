{
"version":3,
"file":"module$node_modules$$testing_library$dom$dist$queries$label_text.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/@testing-library/dom/dist/queries/label-text.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$testing_library$dom$dist$queries$label_text\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryByLabelText = exports.queryAllByLabelText = exports.getByLabelText = exports.getAllByLabelText = exports.findByLabelText = exports.findAllByLabelText = void 0;\nvar _config = require(\"../config\");\nvar _helpers = require(\"../helpers\");\nvar _labelHelpers = require(\"../label-helpers\");\nvar _allUtils = require(\"./all-utils\");\nfunction queryAllLabels(container) {\n  return Array.from(container.querySelectorAll('label,input')).map(node => {\n    return {\n      node,\n      textToMatch: (0, _labelHelpers.getLabelContent)(node)\n    };\n  }).filter(({\n    textToMatch\n  }) => textToMatch !== null);\n}\nconst queryAllLabelsByText = (container, text, {\n  exact = true,\n  trim,\n  collapseWhitespace,\n  normalizer\n} = {}) => {\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const textToMatchByLabels = queryAllLabels(container);\n  return textToMatchByLabels.filter(({\n    node,\n    textToMatch\n  }) => matcher(textToMatch, node, text, matchNormalizer)).map(({\n    node\n  }) => node);\n};\nconst queryAllByLabelText = (container, text, {\n  selector = '*',\n  exact = true,\n  collapseWhitespace,\n  trim,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const matchingLabelledElements = Array.from(container.querySelectorAll('*')).filter(element => {\n    return (0, _labelHelpers.getRealLabels)(element).length || element.hasAttribute('aria-labelledby');\n  }).reduce((labelledElements, labelledElement) => {\n    const labelList = (0, _labelHelpers.getLabels)(container, labelledElement, {\n      selector\n    });\n    labelList.filter(label => Boolean(label.formControl)).forEach(label => {\n      if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) {\n        labelledElements.push(label.formControl);\n      }\n    });\n    const labelsValue = labelList.filter(label => Boolean(label.content)).map(label => label.content);\n    if (matcher(labelsValue.join(' '), labelledElement, text, matchNormalizer)) {\n      labelledElements.push(labelledElement);\n    }\n    if (labelsValue.length > 1) {\n      labelsValue.forEach((labelValue, index) => {\n        if (matcher(labelValue, labelledElement, text, matchNormalizer)) {\n          labelledElements.push(labelledElement);\n        }\n        const labelsFiltered = [...labelsValue];\n        labelsFiltered.splice(index, 1);\n        if (labelsFiltered.length > 1) {\n          if (matcher(labelsFiltered.join(' '), labelledElement, text, matchNormalizer)) {\n            labelledElements.push(labelledElement);\n          }\n        }\n      });\n    }\n    return labelledElements;\n  }, []).concat((0, _allUtils.queryAllByAttribute)('aria-label', container, text, {\n    exact,\n    normalizer: matchNormalizer\n  }));\n  return Array.from(new Set(matchingLabelledElements)).filter(element => element.matches(selector));\n};\n\n// the getAll* query would normally look like this:\n// const getAllByLabelText = makeGetAllQuery(\n//   queryAllByLabelText,\n//   (c, text) => `Unable to find a label with the text of: ${text}`,\n// )\n// however, we can give a more helpful error message than the generic one,\n// so we're writing this one out by hand.\nconst getAllByLabelText = (container, text, ...rest) => {\n  const els = queryAllByLabelText(container, text, ...rest);\n  if (!els.length) {\n    const labels = queryAllLabelsByText(container, text, ...rest);\n    if (labels.length) {\n      const tagNames = labels.map(label => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter(tagName => !!tagName);\n      if (tagNames.length) {\n        throw (0, _config.getConfig)().getElementError(tagNames.map(tagName => `Found a label with the text of: ${text}, however the element associated with this label (<${tagName} />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <${tagName} />, you can use aria-label or aria-labelledby instead.`).join('\\n\\n'), container);\n      } else {\n        throw (0, _config.getConfig)().getElementError(`Found a label with the text of: ${text}, however no form control was found associated to that label. Make sure you're using the \"for\" attribute or \"aria-labelledby\" attribute correctly.`, container);\n      }\n    } else {\n      throw (0, _config.getConfig)().getElementError(`Unable to find a label with the text of: ${text}`, container);\n    }\n  }\n  return els;\n};\nfunction getTagNameOfElementAssociatedWithLabelViaFor(container, label) {\n  const htmlFor = label.getAttribute('for');\n  if (!htmlFor) {\n    return null;\n  }\n  const element = container.querySelector(`[id=\"${htmlFor}\"]`);\n  return element ? element.tagName.toLowerCase() : null;\n}\n\n// the reason mentioned above is the same reason we're not using buildQueries\nconst getMultipleError = (c, text) => `Found multiple elements with the text of: ${text}`;\nconst queryByLabelText = (0, _allUtils.wrapSingleQueryWithSuggestion)((0, _allUtils.makeSingleQuery)(queryAllByLabelText, getMultipleError), queryAllByLabelText.name, 'query');\nexports.queryByLabelText = queryByLabelText;\nconst getByLabelText = (0, _allUtils.makeSingleQuery)(getAllByLabelText, getMultipleError);\nconst findAllByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'findAll'));\nexports.findAllByLabelText = findAllByLabelText;\nconst findByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'find'));\nexports.findByLabelText = findByLabelText;\nconst getAllByLabelTextWithSuggestions = (0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'getAll');\nexports.getAllByLabelText = getAllByLabelTextWithSuggestions;\nconst getByLabelTextWithSuggestions = (0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'get');\nexports.getByLabelText = getByLabelTextWithSuggestions;\nconst queryAllByLabelTextWithSuggestions = (0, _allUtils.wrapAllByQueryWithSuggestion)(queryAllByLabelText, queryAllByLabelText.name, 'queryAll');\nexports.queryAllByLabelText = queryAllByLabelTextWithSuggestions;\n};"],
"names":["shadow$provide","global","require","module","exports","queryAllLabels","container","Array","from","querySelectorAll","map","node","textToMatch","_labelHelpers","getLabelContent","filter","Object","defineProperty","value","queryByLabelText","queryAllByLabelText","getByLabelText","getAllByLabelText","findByLabelText","findAllByLabelText","_config","_helpers","_allUtils","queryAllLabelsByText","text","exact","trim","collapseWhitespace","normalizer","matcher","matches","fuzzyMatches","matchNormalizer","makeNormalizer","textToMatchByLabels","selector","checkContainerType","matchingLabelledElements","element","getRealLabels","length","hasAttribute","reduce","labelledElements","labelledElement","labelList","getLabels","label","formControl","forEach","content","push","labelsValue","join","labelValue","index","labelsFiltered","splice","concat","queryAllByAttribute","Set","rest","els","labels","tagNames","htmlFor","getAttribute","querySelector","tagName","toLowerCase","getConfig","getElementError","getMultipleError","c","wrapSingleQueryWithSuggestion","makeSingleQuery","name","makeFindQuery","wrapAllByQueryWithSuggestion","getAllByLabelTextWithSuggestions","getByLabelTextWithSuggestions","queryAllByLabelTextWithSuggestions"]
}
