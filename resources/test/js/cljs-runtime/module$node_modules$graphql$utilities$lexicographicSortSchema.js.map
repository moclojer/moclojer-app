{
"version":3,
"file":"module$node_modules$graphql$utilities$lexicographicSortSchema.js",
"lineCount":7,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6J1HC,QAASA,WAAU,CAACC,GAAD,CAAMC,WAAN,CAAmB,CACpC,MAAMC,UAAYC,MAAOC,CAAAA,MAAP,CAAc,IAAd,CAElB,KAAK,MAAMC,GAAX,GAAkBF,OAAOG,CAAAA,IAAP,CAAYN,GAAZ,CAAiBO,CAAAA,IAAjB,CAAsBC,eAAgBC,CAAAA,cAAtC,CAAlB,CACEP,SAAA,CAAUG,GAAV,CAAA,CAAiBJ,WAAA,CAAYD,GAAA,CAAIK,GAAJ,CAAZ,CAGnB,OAAOH,UAP6B,CAUtCQ,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzB,MAAOC,OAAA,CAAOD,KAAP,CAAeE,GAAD,EAASA,GAAIC,CAAAA,IAA3B,CADkB,CAI3BF,QAASA,OAAM,CAACD,KAAD,CAAQI,QAAR,CAAkB,CAC/B,MAAOJ,MAAMK,CAAAA,KAAN,EAAcT,CAAAA,IAAd,CAAmB,CAACU,IAAD,CAAOC,IAAP,CAAA,EAAgB,CAClCC,IAAAA,CAAOJ,QAAA,CAASE,IAAT,CACPG,KAAAA,CAAOL,QAAA,CAASG,IAAT,CACb,OAAO,GAAIV,eAAgBC,CAAAA,cAApB,EAAoCU,IAApC;AAA0CC,IAA1C,CAHiC,CAAnC,CADwB,CAxKjCjB,MAAOkB,CAAAA,cAAP,CAAsBvB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CwB,MAAO,CAAA,CADoC,CAA7C,CAGAxB,QAAQyB,CAAAA,uBAAR,CAuBAA,QAAgC,CAACC,MAAD,CAAS,CAgBvCC,QAASA,YAAW,CAACC,IAAD,CAAO,CACzB,MAAI,GAAIC,WAAYC,CAAAA,UAAhB,EAA4BF,IAA5B,CAAJ,CAES,IAAIC,WAAYE,CAAAA,WAAhB,CAA4BJ,WAAA,CAAYC,IAAKI,CAAAA,MAAjB,CAA5B,CAFT,CAGW,GAAIH,WAAYI,CAAAA,aAAhB,EAA+BL,IAA/B,CAAJ,CAEE,IAAIC,WAAYK,CAAAA,cAAhB,CAA+BP,WAAA,CAAYC,IAAKI,CAAAA,MAAjB,CAA/B,CAFF,CAKAG,gBAAA,CAAiBP,IAAjB,CATkB,CAY3BO,QAASA,iBAAgB,CAACP,IAAD,CAAO,CAC9B,MAAOQ,QAAA,CAAQR,IAAKZ,CAAAA,IAAb,CADuB,CAIhCqB,QAASA,iBAAgB,CAACC,SAAD,CAAY,CACnC,MAAOA,UAAP,EAAoBH,gBAAA,CAAiBG,SAAjB,CADe,CAarCC,QAASA,SAAQ,CAACC,IAAD,CAAO,CACtB,MAAOvC,WAAA,CAAWuC,IAAX;AAAkBC,GAAD,EAAU,EAAE,GAAGA,GAAL,CAAUb,KAAMD,WAAA,CAAYc,GAAIb,CAAAA,IAAhB,CAAhB,EAA3B,CADe,CAIxBc,QAASA,WAAU,CAACC,SAAD,CAAY,CAC7B,MAAO1C,WAAA,CAAW0C,SAAX,CAAuBC,KAAD,EAAY,EACvC,GAAGA,KADoC,CAEvChB,KAAMD,WAAA,CAAYiB,KAAMhB,CAAAA,IAAlB,CAFiC,CAGvCY,KAAMI,KAAMJ,CAAAA,IAAZA,EAAoBD,QAAA,CAASK,KAAMJ,CAAAA,IAAf,CAHmB,EAAlC,CADsB,CAQ/BK,QAASA,gBAAe,CAACF,SAAD,CAAY,CAClC,MAAO1C,WAAA,CAAW0C,SAAX,CAAuBC,KAAD,EAAY,EACvC,GAAGA,KADoC,CAEvChB,KAAMD,WAAA,CAAYiB,KAAMhB,CAAAA,IAAlB,CAFiC,EAAlC,CAD2B,CAxD9BkB,MAAAA,CAAepB,MAAOqB,CAAAA,QAAP,EACrB,OAAMX,QAAU,GAAIY,UAAWC,CAAAA,SAAf,EACdrC,UAAA,CAAWkC,MAAaI,CAAAA,KAAxB,CADc,CAEbtB,IAAD,EAAUA,IAAKZ,CAAAA,IAFD,CAkEhBmC,QAAsB,CAACvB,IAAD,CAAO,CAC3B,GACE,GAAIC,WAAYuB,CAAAA,YAAhB,EAA8BxB,IAA9B,CADF,EAEE,GAAIyB,cAAeC,CAAAA,mBAAnB,EAAwC1B,IAAxC,CAFF,CAIE,MAAOA,KAGT;GAAI,GAAIC,WAAY0B,CAAAA,YAAhB,EAA8B3B,IAA9B,CAAJ,CAAyC,CACvC,MAAM4B,OAAS5B,IAAKmB,CAAAA,QAAL,EACf,OAAO,KAAIlB,WAAY4B,CAAAA,iBAAhB,CAAkC,CACvC,GAAGD,MADoC,CAEvCE,WAAY,EAAAA,EAfT9C,UAAA,CAeyB4C,MAAOE,CAAAA,UAfhC,CAAkBxD,CAAAA,GAAlB,CAAsBiC,gBAAtB,CAaoC,CAGvCwB,OAAQ,EAAAA,EAAMjB,UAAA,CAAWc,MAAOG,CAAAA,MAAlB,CAHyB,CAAlC,CAFgC,CASzC,GAAI,GAAI9B,WAAY+B,CAAAA,eAAhB,EAAiChC,IAAjC,CAAJ,CAA4C,CAC1C,MAAM4B,OAAS5B,IAAKmB,CAAAA,QAAL,EACf,OAAO,KAAIlB,WAAYgC,CAAAA,oBAAhB,CAAqC,CAC1C,GAAGL,MADuC,CAE1CE,WAAY,EAAAA,EAxBT9C,UAAA,CAwByB4C,MAAOE,CAAAA,UAxBhC,CAAkBxD,CAAAA,GAAlB,CAAsBiC,gBAAtB,CAsBuC,CAG1CwB,OAAQ,EAAAA,EAAMjB,UAAA,CAAWc,MAAOG,CAAAA,MAAlB,CAH4B,CAArC,CAFmC,CAS5C,GAAI,GAAI9B,WAAYiC,CAAAA,WAAhB,EAA6BlC,IAA7B,CAAJ,CAAwC,CACtC,MAAM4B;AAAS5B,IAAKmB,CAAAA,QAAL,EACf,OAAO,KAAIlB,WAAYkC,CAAAA,gBAAhB,CAAiC,CACtC,GAAGP,MADmC,CAEtCN,MAAO,EAAAA,EAjCJtC,UAAA,CAiCoB4C,MAAON,CAAAA,KAjC3B,CAAkBhD,CAAAA,GAAlB,CAAsBiC,gBAAtB,CA+BmC,CAAjC,CAF+B,CAQxC,GAAI,GAAIN,WAAYmC,CAAAA,UAAhB,EAA4BpC,IAA5B,CAAJ,CAEE,MADM4B,KACC,CADQ5B,IAAKmB,CAAAA,QAAL,EACR,CAAA,IAAIlB,WAAYoC,CAAAA,eAAhB,CAAgC,CACrC,GAAGT,IADkC,CAErCU,OAAQjE,UAAA,CAAWuD,IAAOU,CAAAA,MAAlB,CAA2B1C,KAAD,EAAWA,KAArC,CAF6B,CAAhC,CAMT,IAAI,GAAIK,WAAYsC,CAAAA,iBAAhB,EAAmCvC,IAAnC,CAAJ,CAA8C,CAC5C,MAAM4B,OAAS5B,IAAKmB,CAAAA,QAAL,EACf,OAAO,KAAIlB,WAAYuC,CAAAA,sBAAhB,CAAuC,CAC5C,GAAGZ,MADyC,CAE5CG,OAAQ,EAAAA,EAAMd,eAAA,CAAgBW,MAAOG,CAAAA,MAAvB,CAF8B,CAAvC,CAFqC,CAW5C,GAAIU,UAAWC,CAAAA,SAAf,EACE,CAAA,CADF,CAEE,mBAFF,CAEwB,GAAIC,QAASC,CAAAA,OAAb,EAAsB5C,IAAtB,CAFxB,CArDyB,CAlEb,CAKhB;MAAO,KAAI6C,OAAQC,CAAAA,aAAZ,CAA0B,CAC/B,GAAG5B,MAD4B,CAE/BI,MAAO7C,MAAO6D,CAAAA,MAAP,CAAc9B,OAAd,CAFwB,CAG/BuC,WAAY/D,UAAA,CAAWkC,MAAa6B,CAAAA,UAAxB,CAAoCzE,CAAAA,GAApC,CA0Bd0E,QAAsB,CAACC,SAAD,CAAY,CAC1BrB,SAAAA,CAASqB,SAAU9B,CAAAA,QAAV,EACf,OAAO,KAAI+B,WAAYC,CAAAA,gBAAhB,CAAiC,CACtC,GAAGvB,SADmC,CAEtCwB,UAAWlE,MAAA,CAAO0C,SAAOwB,CAAAA,SAAd,CAA0BC,CAAD,EAAOA,CAAhC,CAF2B,CAGtCzC,KAAMD,QAAA,CAASiB,SAAOhB,CAAAA,IAAhB,CAHgC,CAAjC,CAFyB,CA1BpB,CAHmB,CAI/B0C,MAAO7C,gBAAA,CAAiBS,MAAaoC,CAAAA,KAA9B,CAJwB,CAK/BC,SAAU9C,gBAAA,CAAiBS,MAAaqC,CAAAA,QAA9B,CALqB,CAM/BC,aAAc/C,gBAAA,CAAiBS,MAAasC,CAAAA,YAA9B,CANiB,CAA1B,CAPgC,CArBzC,KAAIb,SAAWzE,OAAA,CAAQ,6CAAR,CAAf;AAEIuE,WAAavE,OAAA,CAAQ,+CAAR,CAFjB,CAIIkD,WAAalD,OAAA,CAAQ,+CAAR,CAJjB,CAMIY,gBAAkBZ,OAAA,CAAQ,oDAAR,CANtB,CAQI+B,YAAc/B,OAAA,CAAQ,6CAAR,CARlB,CAUIgF,YAAchF,OAAA,CAAQ,6CAAR,CAVlB,CAYIuD,eAAiBvD,OAAA,CAAQ,gDAAR,CAZrB,CAcI2E,QAAU3E,OAAA,CAAQ,yCAAR,CAtB4G;",
"sources":["node_modules/graphql/utilities/lexicographicSortSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$lexicographicSortSchema\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.lexicographicSortSchema = lexicographicSortSchema;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _naturalCompare = require('../jsutils/naturalCompare.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _schema = require('../type/schema.js');\n\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\nfunction lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = (0, _keyValMap.keyValMap)(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new _schema.GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (\n      (0, _definition.isScalarType)(type) ||\n      (0, _introspection.isIntrospectionType)(type)\n    ) {\n      return type;\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if ((0, _definition.isEnumType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if ((0, _definition.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false ||\n      (0, _invariant.invariant)(\n        false,\n        'Unexpected type: ' + (0, _inspect.inspect)(type),\n      );\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return (0, _naturalCompare.naturalCompare)(key1, key2);\n  });\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","sortObjMap","map","sortValueFn","sortedMap","Object","create","key","keys","sort","_naturalCompare","naturalCompare","sortByName","array","sortBy","obj","name","mapToKey","slice","obj1","obj2","key1","key2","defineProperty","value","lexicographicSortSchema","schema","replaceType","type","_definition","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull","replaceNamedType","typeMap","replaceMaybeType","maybeType","sortArgs","args","arg","sortFields","fieldsMap","field","sortInputFields","schemaConfig","toConfig","_keyValMap","keyValMap","types","sortNamedType","isScalarType","_introspection","isIntrospectionType","isObjectType","config","GraphQLObjectType","interfaces","fields","isInterfaceType","GraphQLInterfaceType","isUnionType","GraphQLUnionType","isEnumType","GraphQLEnumType","values","isInputObjectType","GraphQLInputObjectType","_invariant","invariant","_inspect","inspect","_schema","GraphQLSchema","directives","sortDirective","directive","_directives","GraphQLDirective","locations","x","query","mutation","subscription"]
}
