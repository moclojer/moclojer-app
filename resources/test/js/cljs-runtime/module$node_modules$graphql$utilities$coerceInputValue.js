shadow$provide.module$node_modules$graphql$utilities$coerceInputValue=function(global,require,module,exports){function defaultOnError(path,invalidValue,error){invalidValue="Invalid value "+(0,_inspect.inspect)(invalidValue);0<path.length&&(invalidValue+=` at "value${(0,_printPathArray.printPathArray)(path)}"`);error.message=invalidValue+": "+error.message;throw error;}function coerceInputValueImpl(inputValue,type,onError,path){if((0,_definition.isNonNullType)(type)){if(null!=inputValue)return coerceInputValueImpl(inputValue,
type.ofType,onError,path);onError((0,_Path.pathToArray)(path),inputValue,new _GraphQLError.GraphQLError(`Expected non-nullable type "${(0,_inspect.inspect)(type)}" not to be null.`))}else{if(null==inputValue)return null;if((0,_definition.isListType)(type)){const itemType=type.ofType;return(0,_isIterableObject.isIterableObject)(inputValue)?Array.from(inputValue,(itemValue,index)=>{index=(0,_Path.addPath)(path,index,void 0);return coerceInputValueImpl(itemValue,itemType,onError,index)}):[coerceInputValueImpl(inputValue,
itemType,onError,path)]}if((0,_definition.isInputObjectType)(type)){if(!(0,_isObjectLike.isObjectLike)(inputValue)){onError((0,_Path.pathToArray)(path),inputValue,new _GraphQLError.GraphQLError(`Expected type "${type.name}" to be an object.`));return}var coercedValue={};const fieldDefs=type.getFields();for(var field of Object.values(fieldDefs)){var fieldValue=inputValue[field.name];void 0===fieldValue?void 0!==field.defaultValue?coercedValue[field.name]=field.defaultValue:(0,_definition.isNonNullType)(field.type)&&
(fieldValue=(0,_inspect.inspect)(field.type),onError((0,_Path.pathToArray)(path),inputValue,new _GraphQLError.GraphQLError(`Field "${field.name}" of required type "${fieldValue}" was not provided.`))):coercedValue[field.name]=coerceInputValueImpl(fieldValue,field.type,onError,(0,_Path.addPath)(path,field.name,type.name))}for(const fieldName of Object.keys(inputValue))fieldDefs[fieldName]||(field=(0,_suggestionList.suggestionList)(fieldName,Object.keys(type.getFields())),onError((0,_Path.pathToArray)(path),
inputValue,new _GraphQLError.GraphQLError(`Field "${fieldName}" is not defined by type "${type.name}".`+(0,_didYouMean.didYouMean)(field))));return coercedValue}if((0,_definition.isLeafType)(type)){try{coercedValue=type.parseValue(inputValue)}catch(error){error instanceof _GraphQLError.GraphQLError?onError((0,_Path.pathToArray)(path),inputValue,error):onError((0,_Path.pathToArray)(path),inputValue,new _GraphQLError.GraphQLError(`Expected type "${type.name}". `+error.message,{originalError:error}));
return}void 0===coercedValue&&onError((0,_Path.pathToArray)(path),inputValue,new _GraphQLError.GraphQLError(`Expected type "${type.name}".`));return coercedValue}(0,_invariant.invariant)(!1,"Unexpected input type: "+(0,_inspect.inspect)(type))}}Object.defineProperty(exports,"__esModule",{value:!0});exports.coerceInputValue=function(inputValue,type,onError=defaultOnError){return coerceInputValueImpl(inputValue,type,onError,void 0)};var _didYouMean=require("module$node_modules$graphql$jsutils$didYouMean"),
_inspect=require("module$node_modules$graphql$jsutils$inspect"),_invariant=require("module$node_modules$graphql$jsutils$invariant"),_isIterableObject=require("module$node_modules$graphql$jsutils$isIterableObject"),_isObjectLike=require("module$node_modules$graphql$jsutils$isObjectLike"),_Path=require("module$node_modules$graphql$jsutils$Path"),_printPathArray=require("module$node_modules$graphql$jsutils$printPathArray"),_suggestionList=require("module$node_modules$graphql$jsutils$suggestionList"),
_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_definition=require("module$node_modules$graphql$type$definition")}
//# sourceMappingURL=module$node_modules$graphql$utilities$coerceInputValue.js.map
