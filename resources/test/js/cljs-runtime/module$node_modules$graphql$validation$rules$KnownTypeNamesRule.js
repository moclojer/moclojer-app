shadow$provide.module$node_modules$graphql$validation$rules$KnownTypeNamesRule=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.KnownTypeNamesRule=function(context){const schema=context.getSchema(),existingTypesMap=schema?schema.getTypeMap():Object.create(null),definedTypes=Object.create(null);for(const def of context.getDocument().definitions)(0,_predicates.isTypeDefinitionNode)(def)&&(definedTypes[def.name.value]=!0);const typeNames=[...Object.keys(existingTypesMap),
...Object.keys(definedTypes)];return{NamedType(node,_1,parent,_2,ancestors){_1=node.name.value;if(!existingTypesMap[_1]&&!definedTypes[_1]){var _ancestors$;ancestors=null!==(_ancestors$=ancestors[2])&&void 0!==_ancestors$?_ancestors$:parent;if(parent=null!=ancestors)parent=ancestors,parent="kind"in parent&&((0,_predicates.isTypeSystemDefinitionNode)(parent)||(0,_predicates.isTypeSystemExtensionNode)(parent));parent&&standardTypeNames.includes(_1)||(parent=(0,_suggestionList.suggestionList)(_1,parent?
standardTypeNames.concat(typeNames):typeNames),context.reportError(new _GraphQLError.GraphQLError(`Unknown type "${_1}".`+(0,_didYouMean.didYouMean)(parent),{nodes:node})))}}}};var _didYouMean=require("module$node_modules$graphql$jsutils$didYouMean"),_suggestionList=require("module$node_modules$graphql$jsutils$suggestionList"),_GraphQLError=require("module$node_modules$graphql$error$GraphQLError"),_predicates=require("module$node_modules$graphql$language$predicates");global=require("module$node_modules$graphql$type$introspection");
const standardTypeNames=[...require("module$node_modules$graphql$type$scalars").specifiedScalarTypes,...global.introspectionTypes].map(type=>type.name)}
//# sourceMappingURL=module$node_modules$graphql$validation$rules$KnownTypeNamesRule.js.map
