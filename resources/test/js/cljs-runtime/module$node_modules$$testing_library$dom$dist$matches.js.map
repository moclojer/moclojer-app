{
"version":3,
"file":"module$node_modules$$testing_library$dom$dist$matches.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@testing-library/dom/dist/matches.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$testing_library$dom$dist$matches\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fuzzyMatches = fuzzyMatches;\nexports.getDefaultNormalizer = getDefaultNormalizer;\nexports.makeNormalizer = makeNormalizer;\nexports.matches = matches;\nfunction assertNotNullOrUndefined(matcher) {\n  if (matcher === null || matcher === undefined) {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`\n    `It looks like ${matcher} was passed instead of a matcher. Did you do something like getByText(${matcher})?`);\n  }\n}\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (typeof matcher === 'string' || typeof matcher === 'number') {\n    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matchRegExp(matcher, normalizedText);\n  }\n}\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (matcher instanceof Function) {\n    return matcher(normalizedText, node);\n  } else if (matcher instanceof RegExp) {\n    return matchRegExp(matcher, normalizedText);\n  } else {\n    return normalizedText === String(matcher);\n  }\n}\nfunction getDefaultNormalizer({\n  trim = true,\n  collapseWhitespace = true\n} = {}) {\n  return text => {\n    let normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\nfunction makeNormalizer({\n  trim,\n  collapseWhitespace,\n  normalizer\n}) {\n  if (!normalizer) {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim,\n      collapseWhitespace\n    });\n  }\n  if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n    // They've also specified a value for trim or collapseWhitespace\n    throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n  }\n  return normalizer;\n}\nfunction matchRegExp(matcher, text) {\n  const match = matcher.test(text);\n  if (matcher.global && matcher.lastIndex !== 0) {\n    console.warn(`To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.`);\n    matcher.lastIndex = 0;\n  }\n  return match;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","assertNotNullOrUndefined","matcher","undefined","Error","getDefaultNormalizer","trim","collapseWhitespace","text","normalizedText","replace","matchRegExp","match","test","lastIndex","console","warn","Object","defineProperty","value","fuzzyMatches","textToMatch","node","normalizer","toLowerCase","includes","toString","makeNormalizer","matches","Function","RegExp","String"]
}
