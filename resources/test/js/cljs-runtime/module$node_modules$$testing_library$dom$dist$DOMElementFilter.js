shadow$provide.module$node_modules$$testing_library$dom$dist$DOMElementFilter=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(filterNode){return{test:val=>{var _val$constructor2;return(null==val?void 0:null==(_val$constructor2=val.constructor)?void 0:_val$constructor2.name)&&testNode(val)},serialize:(node,config,indentation,depth,refs,printer)=>{if(3===node.nodeType)return printText(node.data,config);if(8===node.nodeType)return printComment(node.data,
config);const type=11===node.nodeType?"DocumentFragment":node.tagName.toLowerCase();return++depth>config.maxDepth?printElementAsLeaf(type,config):printElement(type,printProps(11===node.nodeType?[]:Array.from(node.attributes).map(attr=>attr.name).sort(),11===node.nodeType?{}:Array.from(node.attributes).reduce((props,attribute)=>{props[attribute.name]=attribute.value;return props},{}),config,indentation+config.indent,depth,refs,printer),printChildren(Array.prototype.slice.call(node.childNodes||node.children).filter(filterNode),
config,indentation+config.indent,depth,refs,printer),config,indentation)}}};exports.test=void 0;const printProps=(keys,props,config,indentation,depth,refs,printer)=>{const indentationNext=indentation+config.indent,colors=config.colors;return keys.map(key=>{const value=props[key];let printed=printer(value,config,indentationNext,depth,refs);"string"!==typeof value&&(-1!==printed.indexOf("\n")&&(printed=config.spacingOuter+indentationNext+printed+config.spacingOuter+indentation),printed="{"+printed+
"}");return config.spacingInner+indentation+colors.prop.open+key+colors.prop.close+"\x3d"+colors.value.open+printed+colors.value.close}).join("")},printChildren=(children,config,indentation,depth,refs,printer)=>children.map(child=>{const printedChild="string"===typeof child?printText(child,config):printer(child,config,indentation,depth,refs);return""===printedChild&&"object"===typeof child&&null!==child&&3!==child.nodeType?"":config.spacingOuter+indentation+printedChild}).join(""),printText=(text,
config)=>{config=config.colors.content;return config.open+text.replace(/</g,"\x26lt;").replace(/>/g,"\x26gt;")+config.close},printComment=(comment,config)=>{config=config.colors.comment;return config.open+"\x3c!--"+comment.replace(/</g,"\x26lt;").replace(/>/g,"\x26gt;")+"--\x3e"+config.close},printElement=(type,printedProps,printedChildren,config,indentation)=>{const tagColor=config.colors.tag;return tagColor.open+"\x3c"+type+(printedProps&&tagColor.close+printedProps+config.spacingOuter+indentation+
tagColor.open)+(printedChildren?"\x3e"+tagColor.close+printedChildren+config.spacingOuter+indentation+tagColor.open+"\x3c/"+type:(printedProps&&!config.min?"":" ")+"/")+"\x3e"+tagColor.close},printElementAsLeaf=(type,config)=>{config=config.colors.tag;return config.open+"\x3c"+type+config.close+" â€¦"+config.open+" /\x3e"+config.close},ELEMENT_REGEXP=/^((HTML|SVG)\w*)?Element$/,testNode=val=>{const constructorName=val.constructor.name,{nodeType,tagName}=val;val="string"===typeof tagName&&tagName.includes("-")||
"function"===typeof val.hasAttribute&&val.hasAttribute("is");return 1===nodeType&&(ELEMENT_REGEXP.test(constructorName)||val)||3===nodeType&&"Text"===constructorName||8===nodeType&&"Comment"===constructorName||11===nodeType&&"DocumentFragment"===constructorName};exports.test=val=>{var _val$constructor;return(null==val?void 0:null==(_val$constructor=val.constructor)?void 0:_val$constructor.name)&&testNode(val)}}
//# sourceMappingURL=module$node_modules$$testing_library$dom$dist$DOMElementFilter.js.map
