{
"version":3,
"file":"module$node_modules$graphql$type$assertName.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkBxGC,QAASA,WAAU,CAACC,IAAD,CAAO,CAChB,IAAR,EAAAA,IAAA,EAAgB,GAAIC,UAAWC,CAAAA,SAAf,EAA0B,CAAA,CAA1B,CAAiC,oBAAjC,CACA,SAAhB,GAAA,MAAOF,KAAP,EACE,GAAIC,UAAWC,CAAAA,SAAf,EAA0B,CAAA,CAA1B,CAAiC,+BAAjC,CAEF,IAAoB,CAApB,GAAIF,IAAKG,CAAAA,MAAT,CACE,KAAM,KAAIC,aAAcC,CAAAA,YAAlB,CACJ,yCADI,CAAN,CAKF,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBN,IAAKG,CAAAA,MAAzB,CAAiC,EAAEG,CAAnC,CACE,GAAI,CAAC,GAAIC,iBAAkBC,CAAAA,cAAtB,EAAsCR,IAAKS,CAAAA,UAAL,CAAgBH,CAAhB,CAAtC,CAAL,CACE,KAAM,KAAIF,aAAcC,CAAAA,YAAlB,CACH,6CAA4CL,IAA5C,aADG,CAAN;AAMJ,GAAI,CAAC,GAAIO,iBAAkBG,CAAAA,WAAtB,EAAmCV,IAAKS,CAAAA,UAAL,CAAgB,CAAhB,CAAnC,CAAL,CACE,KAAM,KAAIL,aAAcC,CAAAA,YAAlB,CACH,wCAAuCL,IAAvC,aADG,CAAN,CAKF,MAAOA,KAzBiB,CAf1BW,MAAOC,CAAAA,cAAP,CAAsBd,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Ce,MAAO,CAAA,CADoC,CAA7C,CAGAf,QAAQgB,CAAAA,mBAAR,CA6CAA,QAA4B,CAACd,IAAD,CAAO,CACjC,GAAa,MAAb,GAAIA,IAAJ,EAAgC,OAAhC,GAAuBA,IAAvB,EAAoD,MAApD,GAA2CA,IAA3C,CACE,KAAM,KAAII,aAAcC,CAAAA,YAAlB,CACH,gCAA+BL,IAA/B,EADG,CAAN,CAKF,MAAOD,WAAA,CAAWC,IAAX,CAP0B,CA5CnCF,QAAQC,CAAAA,UAAR,CAAqBA,UAErB,KAAIE,WAAaL,OAAA,CAAQ,+CAAR,CAAjB;AAEIQ,cAAgBR,OAAA,CAAQ,gDAAR,CAFpB,CAIIW,kBAAoBX,OAAA,CAAQ,uDAAR,CAbgF;",
"sources":["node_modules/graphql/type/assertName.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$type$assertName\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertEnumValueName = assertEnumValueName;\nexports.assertName = assertName;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _characterClasses = require('../language/characterClasses.js');\n\n/**\n * Upholds the spec rules about naming.\n */\nfunction assertName(name) {\n  name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');\n  typeof name === 'string' ||\n    (0, _devAssert.devAssert)(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new _GraphQLError.GraphQLError(\n      'Expected name to be a non-empty string.',\n    );\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {\n      throw new _GraphQLError.GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {\n    throw new _GraphQLError.GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nfunction assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new _GraphQLError.GraphQLError(\n      `Enum values cannot be named: ${name}`,\n    );\n  }\n\n  return assertName(name);\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","assertName","name","_devAssert","devAssert","length","_GraphQLError","GraphQLError","i","_characterClasses","isNameContinue","charCodeAt","isNameStart","Object","defineProperty","value","assertEnumValueName"]
}
